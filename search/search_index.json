{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Documentation of Stabila \u00b6 This is the main documentation of Stabila.","title":"Home"},{"location":"#the-documentation-of-stabila","text":"This is the main documentation of Stabila.","title":"The Documentation of Stabila"},{"location":"glossary/","text":"Glossary \u00b6 ucrUsage The Ucr consumption of the contract caller in one contract trigger. ucrFee The number of STB burned from the contract caller for Ucr consumption in one contract trigger. originUcrUsage The total Ucr consumption of the contract developer in one contract trigger. ucrUsageTotal The total Ucr consumption of the contract developer and the contract caller combined. Feelimit When the user triggers or create the contract, this is used to set the usage limit of the Ucr consumption got from burning STB or staking STB, Ucr got from staking STB will be used first. CallValue When the user triggers or create the contract, this can be used to send STB to the contract. consume_user_resource_percent For a contract, Resource consumption is composed of two parts, one part is afforded by contract developer and the other part is afforded by contract caller. This is the percentage of the two parts in the Resource consumption. origin_ucr_limit The usage limit of the Ucr consumption of the developer in one contract trigger, should be greater than 0. net_usage The Bandwidth consumption in one contract trigger. (NetFee not included) net_fee The STB burned for Bandwidth consumption in one contract trigger. Bandwidth The Bandwidth Points consumed by a transaction is the size of the byte array in this transaction. If the byte array length of a transaction is 100, then the transaction needs to consume 100 Bandwidth Points. Ucr The creation and operation of a smart contract consume CPU resources. It takes time for smart contracts to operate in virtual machines (VMs), and the time consumed in the system is calculated in microseconds. CPU resources are consumed in ucr, which means 1 Ucr = 1 Microsecond (\u03bcs). If a contract takes 100 \u03bcs to execute in a VM, it needs to consume 100 Ucr. STABILA Power(TP) 1 staked STB = 1 TP, TP can be used to vote, 1 TP = 1 vote. Super Representative(SR) The current block producing Top 21 nodes.","title":"Glossary"},{"location":"glossary/#glossary","text":"ucrUsage The Ucr consumption of the contract caller in one contract trigger. ucrFee The number of STB burned from the contract caller for Ucr consumption in one contract trigger. originUcrUsage The total Ucr consumption of the contract developer in one contract trigger. ucrUsageTotal The total Ucr consumption of the contract developer and the contract caller combined. Feelimit When the user triggers or create the contract, this is used to set the usage limit of the Ucr consumption got from burning STB or staking STB, Ucr got from staking STB will be used first. CallValue When the user triggers or create the contract, this can be used to send STB to the contract. consume_user_resource_percent For a contract, Resource consumption is composed of two parts, one part is afforded by contract developer and the other part is afforded by contract caller. This is the percentage of the two parts in the Resource consumption. origin_ucr_limit The usage limit of the Ucr consumption of the developer in one contract trigger, should be greater than 0. net_usage The Bandwidth consumption in one contract trigger. (NetFee not included) net_fee The STB burned for Bandwidth consumption in one contract trigger. Bandwidth The Bandwidth Points consumed by a transaction is the size of the byte array in this transaction. If the byte array length of a transaction is 100, then the transaction needs to consume 100 Bandwidth Points. Ucr The creation and operation of a smart contract consume CPU resources. It takes time for smart contracts to operate in virtual machines (VMs), and the time consumed in the system is calculated in microseconds. CPU resources are consumed in ucr, which means 1 Ucr = 1 Microsecond (\u03bcs). If a contract takes 100 \u03bcs to execute in a VM, it needs to consume 100 Ucr. STABILA Power(TP) 1 staked STB = 1 TP, TP can be used to vote, 1 TP = 1 vote. Super Representative(SR) The current block producing Top 21 nodes.","title":"Glossary"},{"location":"api/http/","text":"HTTP API \u00b6 Check following URL to see the API https://documenter.getpostman.com/view/17682647/UVJiftVK","title":"HTTP API"},{"location":"api/http/#http-api","text":"Check following URL to see the API https://documenter.getpostman.com/view/17682647/UVJiftVK","title":"HTTP API"},{"location":"api/rpc/","text":"RPC List \u00b6 For the specific definition of API, please refer to the following link: api/api.proto Note SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. 1. Get account information rpc GetAccount ( Account ) returns ( Account ) {} Nodes: Fullnode and SolidityNode 2. STB transfer rpc CreateTransaction ( TransferContract ) returns ( Transaction ) {} Nodes: Fullnode 3. Broadcast transaction rpc BroadcastTransaction ( Transaction ) returns ( Return ) {} Nodes: Fullnode Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after executive verification. 4. Create an account rpc CreateAccount ( AccountCreateContract ) returns ( Transaction ) {} Nodes: FullNode 5. Account name update rpc UpdateAccount ( AccountUpdateContract ) returns ( Transaction ) {} Nodes: Fullnode 6. Vote for Governor candidates rpc VoteExecutiveAccount ( VoteExecutiveContract ) returns ( Transaction ) {} Nodes: FullNode 7. Query the ratio of brokerage of the executive rpc GetBrokerageInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 8. Query unclaimed reward rpc GetRewardInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 9. Update the ratio of brokerage rpc UpdateBrokerage ( UpdateBrokerageContract ) returns ( TransactionExtention ) {} Nodes: FullNode 10. Issue a token rpc CreateAssetIssue ( AssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 11. Query of list of executives rpc ListExecutivees ( EmptyMessage ) returns ( ExecutiveList ) {} Nodes: FullNode and SolidityNode 12. Application for super representative rpc CreateExecutive ( ExecutiveCreateContract ) returns ( Transaction ) {} Nodes: FullNode Description: To apply to become STABILA\u2019s Super Representative candidate. 13. Information update of executives rpc UpdateExecutive ( ExecutiveUpdateContract ) returns ( Transaction ) {} Nodes: FullNode Description: Update the website url of the SR. 14. Token transfer rpc TransferAsset ( TransferAssetContract ) returns ( Transaction ){} Node: FullNode 15. Participate a token rpc ParticipateAssetIssue ( ParticipateAssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 16. Query the list of nodes connected to the ip of the api rpc ListNodes ( EmptyMessage ) returns ( NodeList ) {} Nodes: FullNode and SolidityNode 17. Query the list of all issued tokens rpc GetAssetIssueList ( EmptyMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 18. Query the token issued by a given account rpc GetAssetIssueByAccount ( Account ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 19. Query the token information by token name rpc GetAssetIssueByName ( BytesMessage ) returns ( AssetIssueContract ) {} Nodes: FullNode and Soliditynode 20. Query the list of tokens by timestamp rpc GetAssetIssueListByTimestamp ( NumberMessage ) returns ( AssetIssueList ){} Nodes: SolidityNode 21. Get current block information rpc GetNowBlock ( EmptyMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 22. Get a block by block height rpc GetBlockByNum ( NumberMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 23. Get the total number of transactions rpc TotalTransaction ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode and SolidityNode 24. Query the transaction by transaction id rpc getTransactionById ( BytesMessage ) returns ( Transaction ) {} Nodes: SolidityNode 25. Query the transaction by timestamp rpc getTransactionsByTimestamp ( TimeMessage ) returns ( TransactionList ) {} Nodes: SolidityNode 26. Query the transactions initiated by an account rpc getTransactionsFromThis ( Account ) returns ( TransactionList ) {} Nodes: SolidityNode 27. Query the transactions received by an account rpc getTransactionsToThis ( Account ) returns ( NumberMessage ) {} Nodes: SolidityNode 28. Stake STB rpc CdBalance ( CdBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 29. Unstake STB rpc UncdBalance ( UncdBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 30. Block producing reward redemption rpc WithdrawBalance ( WithdrawBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 31. Unstake token balance rpc UncdAsset ( UncdAssetContract ) returns ( Transaction ) {} Nodes: FullNode 32. Query the next maintenance time rpc GetNextMaintenanceTime ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode 33. Query the transaction fee & block information rpc GetTransactionInfoById ( BytesMessage ) returns ( TransactionInfo ) {} Nodes: SolidityNode 34. Query block information by block id rpc GetBlockById ( BytesMessage ) returns ( Block ) {} Nodes: FullNode 35. Update token information rpc UpdateAsset ( UpdateAssetContract ) returns ( Transaction ) {} Nodes: Fullnode Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption. 36. Query the list of all the tokens by pagination rpc GetPaginatedAssetIssueList ( PaginatedMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 37. To sign a transaction rpc GetTransactionSign ( TransactionSign ) returns ( Transaction ) {} Nodes: FullNode 38. Address and private key creation rpc CreateAdresss ( BytesMessage ) returns ( BytesMessage ) {} Nodes: Fullnode 39. STB easy transfer rpc EasyTransfer ( EasyTransferMessage ) returns ( EasyTransferResponse ) {} Nodes: FullNode 40. Deploy a smart contract rpc DeployContract ( CreateSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode and SolidityNode 41. Trigger a smart contract rpc TriggerContract ( TriggerSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode 42. Create a shielded transaction rpc CreateShieldedTransaction ( PrivateParameters ) returns ( TransactionExtention ) {} Nodes: FullNode 43. Get a Merkle tree information of a note rpc GetMerkleTreeVoucherInfo ( OutputPointInfo ) returns ( IncrementalMerkleVoucherInfo ) {} Nodes: FullNode 44. Scan note by ivk rpc ScanNoteByIvk ( IvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 45. Scan note by ovk rpc ScanNoteByOvk ( OvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 46. Get spending key rpc GetSpendingKey ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 47. Get expanded spending key rpc GetExpandedSpendingKey ( BytesMessage ) returns ( ExpandedSpendingKeyMessage ) {} Nodes: FullNode 48. Get ak from ask rpc GetAkFromAsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 49. Get nk from nsk rpc GetNkFromNsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 50. Get incoming viewing key rpc GetIncomingViewingKey ( ViewingKeyMessage ) returns ( IncomingViewingKeyMessage ) {} Nodes: FullNode 51. Get diversifier rpc GetDiversifier ( EmptyMessage ) returns ( DiversifierMessage ) {} Nodes: FullNode 52. Get zen payment address rpc GetZenPaymentAddress ( IncomingViewingKeyDiversifierMessage ) returns ( PaymentAddressMessage ) {} Nodes: FullNode 53. Get rcm rpc GetRcm ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 54. Get a note status of is spent or not rpc IsSpend ( NoteParameters ) returns ( SpendResult ) {} Nodes: FullNode 55. Create a shielded transaction without using ask rpc CreateShieldedTransactionWithoutSpendAuthSig ( PrivateParametersWithoutAsk ) returns ( TransactionExtention ) {} Nodes: FullNode 56. Create a shielded transaction hash rpc GetShieldTransactionHash ( Transaction ) returns ( BytesMessage ) {} Nodes: FullNode 57. Create a signature for a shielded transaction rpc CreateSpendAuthSig ( SpendAuthSigParameters ) returns ( BytesMessage ) {} Nodes: FullNode 58. Create a shield nullifier rpc CreateShieldNullifier ( NfParameters ) returns ( BytesMessage ) {} Nodes: FullNode 59. Get new shielded address rpc GetNewShieldedAddress ( EmptyMessage ) returns ( ShieldedAddressInfo ){} Nodes: FullNode 60. Create shielded contract parameters rpc CreateShieldedContractParameters ( PrivateShieldedSRC20Parameters ) returns ( ShieldedSRC20Parameters ) {} Nodes: FullNode 61. Create shielded contract parameters without ask rpc CreateShieldedContractParametersWithoutAsk ( PrivateShieldedSRC20ParametersWithoutAsk ) returns ( ShieldedSRC20Parameters ) {} Nodes: FullNode 62. Scan shielded SRC20 notes by ivk rpc ScanShieldedSRC20NotesbyIvk ( IvkDecryptSRC20Parameters ) returns ( DecryptNotesSRC20 ) {} Nodes: FullNode, SolidityNode 63. Scan shielded SRC20 notes by ovk rpc ScanShieldedSRC20NotesbyOvk ( OvkDecryptSRC20Parameters ) returns ( DecryptNotesSRC20 ) {} Nodes: FullNode, SolidityNode 64. Get the status of shielded SRC20 note of spent or not rpc IsShieldedSRC20ContractNoteSpent ( NfSRC20Parameters ) returns ( NullifierResult ) {} Nodes: FullNode, SolidityNode 65. Get the trigger input for the shielded SRC20 rpc GetTriggerInputForShieldedSRC20Contract ( ShieldedSRC20TriggerContractParameters ) returns ( BytesMessage ) {} Nodes: FullNode 66. Create an market order Interface statement: rpc MarketSellAsset (MarketSellAssetContract) returns (TransactionExtention) {}; Nodes: FullNode 67. Cancel the order Interface statement: rpc MarketCancelOrder (MarketCancelOrderContract) returns (TransactionExtention) {}; Nodes: FullNode 68. Get all orders for the account Interface statement: rpc GetMarketOrderByAccount (BytesMessage) returns (MarketOrderList) {}; Nodes: FullNode 69. Get all trading pairs Interface statement: rpc GetMarketPairList (EmptyMessage) returns (MarketOrderPairList) {}; Nodes: FullNode 70. Get all orders for the trading pair Interface statement: rpc GetMarketOrderListByPair (MarketOrderPair) returns (MarketOrderList) {}; Nodes: FullNode 71. Get all prices for the trading pair Interface statement: rpc GetMarketPriceByPair (MarketOrderPair) returns (MarketPriceList) {}; Nodes: FullNode 72. Get order by id Interface statement: rpc GetMarketOrderById (BytesMessage) returns (MarketOrder) {}; Nodes: FullNode 73. perform a historical balance lookup Interface statement: rpc GetAccountBalance (AccountBalanceRequest) returns (AccountBalanceResponse){}; Nodes: FullNode 74. fetch all balance-changing transactions in a block Interface statement: rpc GetBlockBalanceTrace (BlockBalanceTrace.BlockIdentifier) returns (BlockBalanceTrace) {}; Nodes: FullNode 75. get the burn stb amount Interface statement: rpc GetBurnStb (EmptyMessage) returns (NumberMessage) {}; Nodes: FullNode and SolidityNode","title":"RPC API"},{"location":"api/rpc/#rpc-list","text":"For the specific definition of API, please refer to the following link: api/api.proto Note SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. 1. Get account information rpc GetAccount ( Account ) returns ( Account ) {} Nodes: Fullnode and SolidityNode 2. STB transfer rpc CreateTransaction ( TransferContract ) returns ( Transaction ) {} Nodes: Fullnode 3. Broadcast transaction rpc BroadcastTransaction ( Transaction ) returns ( Return ) {} Nodes: Fullnode Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after executive verification. 4. Create an account rpc CreateAccount ( AccountCreateContract ) returns ( Transaction ) {} Nodes: FullNode 5. Account name update rpc UpdateAccount ( AccountUpdateContract ) returns ( Transaction ) {} Nodes: Fullnode 6. Vote for Governor candidates rpc VoteExecutiveAccount ( VoteExecutiveContract ) returns ( Transaction ) {} Nodes: FullNode 7. Query the ratio of brokerage of the executive rpc GetBrokerageInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 8. Query unclaimed reward rpc GetRewardInfo ( BytesMessage ) returns ( NumberMessage ) {} Nodes: FullNode 9. Update the ratio of brokerage rpc UpdateBrokerage ( UpdateBrokerageContract ) returns ( TransactionExtention ) {} Nodes: FullNode 10. Issue a token rpc CreateAssetIssue ( AssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 11. Query of list of executives rpc ListExecutivees ( EmptyMessage ) returns ( ExecutiveList ) {} Nodes: FullNode and SolidityNode 12. Application for super representative rpc CreateExecutive ( ExecutiveCreateContract ) returns ( Transaction ) {} Nodes: FullNode Description: To apply to become STABILA\u2019s Super Representative candidate. 13. Information update of executives rpc UpdateExecutive ( ExecutiveUpdateContract ) returns ( Transaction ) {} Nodes: FullNode Description: Update the website url of the SR. 14. Token transfer rpc TransferAsset ( TransferAssetContract ) returns ( Transaction ){} Node: FullNode 15. Participate a token rpc ParticipateAssetIssue ( ParticipateAssetIssueContract ) returns ( Transaction ) {} Nodes: FullNode 16. Query the list of nodes connected to the ip of the api rpc ListNodes ( EmptyMessage ) returns ( NodeList ) {} Nodes: FullNode and SolidityNode 17. Query the list of all issued tokens rpc GetAssetIssueList ( EmptyMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 18. Query the token issued by a given account rpc GetAssetIssueByAccount ( Account ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 19. Query the token information by token name rpc GetAssetIssueByName ( BytesMessage ) returns ( AssetIssueContract ) {} Nodes: FullNode and Soliditynode 20. Query the list of tokens by timestamp rpc GetAssetIssueListByTimestamp ( NumberMessage ) returns ( AssetIssueList ){} Nodes: SolidityNode 21. Get current block information rpc GetNowBlock ( EmptyMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 22. Get a block by block height rpc GetBlockByNum ( NumberMessage ) returns ( Block ) {} Nodes: FullNode and SolidityNode 23. Get the total number of transactions rpc TotalTransaction ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode and SolidityNode 24. Query the transaction by transaction id rpc getTransactionById ( BytesMessage ) returns ( Transaction ) {} Nodes: SolidityNode 25. Query the transaction by timestamp rpc getTransactionsByTimestamp ( TimeMessage ) returns ( TransactionList ) {} Nodes: SolidityNode 26. Query the transactions initiated by an account rpc getTransactionsFromThis ( Account ) returns ( TransactionList ) {} Nodes: SolidityNode 27. Query the transactions received by an account rpc getTransactionsToThis ( Account ) returns ( NumberMessage ) {} Nodes: SolidityNode 28. Stake STB rpc CdBalance ( CdBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 29. Unstake STB rpc UncdBalance ( UncdBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 30. Block producing reward redemption rpc WithdrawBalance ( WithdrawBalanceContract ) returns ( Transaction ) {} Nodes: FullNode 31. Unstake token balance rpc UncdAsset ( UncdAssetContract ) returns ( Transaction ) {} Nodes: FullNode 32. Query the next maintenance time rpc GetNextMaintenanceTime ( EmptyMessage ) returns ( NumberMessage ) {} Nodes: FullNode 33. Query the transaction fee & block information rpc GetTransactionInfoById ( BytesMessage ) returns ( TransactionInfo ) {} Nodes: SolidityNode 34. Query block information by block id rpc GetBlockById ( BytesMessage ) returns ( Block ) {} Nodes: FullNode 35. Update token information rpc UpdateAsset ( UpdateAssetContract ) returns ( Transaction ) {} Nodes: Fullnode Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption. 36. Query the list of all the tokens by pagination rpc GetPaginatedAssetIssueList ( PaginatedMessage ) returns ( AssetIssueList ) {} Nodes: FullNode and SolidityNode 37. To sign a transaction rpc GetTransactionSign ( TransactionSign ) returns ( Transaction ) {} Nodes: FullNode 38. Address and private key creation rpc CreateAdresss ( BytesMessage ) returns ( BytesMessage ) {} Nodes: Fullnode 39. STB easy transfer rpc EasyTransfer ( EasyTransferMessage ) returns ( EasyTransferResponse ) {} Nodes: FullNode 40. Deploy a smart contract rpc DeployContract ( CreateSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode and SolidityNode 41. Trigger a smart contract rpc TriggerContract ( TriggerSmartContract ) returns ( TransactionExtention ) {} Nodes: FullNode 42. Create a shielded transaction rpc CreateShieldedTransaction ( PrivateParameters ) returns ( TransactionExtention ) {} Nodes: FullNode 43. Get a Merkle tree information of a note rpc GetMerkleTreeVoucherInfo ( OutputPointInfo ) returns ( IncrementalMerkleVoucherInfo ) {} Nodes: FullNode 44. Scan note by ivk rpc ScanNoteByIvk ( IvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 45. Scan note by ovk rpc ScanNoteByOvk ( OvkDecryptParameters ) returns ( DecryptNotes ) {} Nodes: FullNode 46. Get spending key rpc GetSpendingKey ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 47. Get expanded spending key rpc GetExpandedSpendingKey ( BytesMessage ) returns ( ExpandedSpendingKeyMessage ) {} Nodes: FullNode 48. Get ak from ask rpc GetAkFromAsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 49. Get nk from nsk rpc GetNkFromNsk ( BytesMessage ) returns ( BytesMessage ) {} Nodes: FullNode 50. Get incoming viewing key rpc GetIncomingViewingKey ( ViewingKeyMessage ) returns ( IncomingViewingKeyMessage ) {} Nodes: FullNode 51. Get diversifier rpc GetDiversifier ( EmptyMessage ) returns ( DiversifierMessage ) {} Nodes: FullNode 52. Get zen payment address rpc GetZenPaymentAddress ( IncomingViewingKeyDiversifierMessage ) returns ( PaymentAddressMessage ) {} Nodes: FullNode 53. Get rcm rpc GetRcm ( EmptyMessage ) returns ( BytesMessage ) {} Nodes: FullNode 54. Get a note status of is spent or not rpc IsSpend ( NoteParameters ) returns ( SpendResult ) {} Nodes: FullNode 55. Create a shielded transaction without using ask rpc CreateShieldedTransactionWithoutSpendAuthSig ( PrivateParametersWithoutAsk ) returns ( TransactionExtention ) {} Nodes: FullNode 56. Create a shielded transaction hash rpc GetShieldTransactionHash ( Transaction ) returns ( BytesMessage ) {} Nodes: FullNode 57. Create a signature for a shielded transaction rpc CreateSpendAuthSig ( SpendAuthSigParameters ) returns ( BytesMessage ) {} Nodes: FullNode 58. Create a shield nullifier rpc CreateShieldNullifier ( NfParameters ) returns ( BytesMessage ) {} Nodes: FullNode 59. Get new shielded address rpc GetNewShieldedAddress ( EmptyMessage ) returns ( ShieldedAddressInfo ){} Nodes: FullNode 60. Create shielded contract parameters rpc CreateShieldedContractParameters ( PrivateShieldedSRC20Parameters ) returns ( ShieldedSRC20Parameters ) {} Nodes: FullNode 61. Create shielded contract parameters without ask rpc CreateShieldedContractParametersWithoutAsk ( PrivateShieldedSRC20ParametersWithoutAsk ) returns ( ShieldedSRC20Parameters ) {} Nodes: FullNode 62. Scan shielded SRC20 notes by ivk rpc ScanShieldedSRC20NotesbyIvk ( IvkDecryptSRC20Parameters ) returns ( DecryptNotesSRC20 ) {} Nodes: FullNode, SolidityNode 63. Scan shielded SRC20 notes by ovk rpc ScanShieldedSRC20NotesbyOvk ( OvkDecryptSRC20Parameters ) returns ( DecryptNotesSRC20 ) {} Nodes: FullNode, SolidityNode 64. Get the status of shielded SRC20 note of spent or not rpc IsShieldedSRC20ContractNoteSpent ( NfSRC20Parameters ) returns ( NullifierResult ) {} Nodes: FullNode, SolidityNode 65. Get the trigger input for the shielded SRC20 rpc GetTriggerInputForShieldedSRC20Contract ( ShieldedSRC20TriggerContractParameters ) returns ( BytesMessage ) {} Nodes: FullNode 66. Create an market order Interface statement: rpc MarketSellAsset (MarketSellAssetContract) returns (TransactionExtention) {}; Nodes: FullNode 67. Cancel the order Interface statement: rpc MarketCancelOrder (MarketCancelOrderContract) returns (TransactionExtention) {}; Nodes: FullNode 68. Get all orders for the account Interface statement: rpc GetMarketOrderByAccount (BytesMessage) returns (MarketOrderList) {}; Nodes: FullNode 69. Get all trading pairs Interface statement: rpc GetMarketPairList (EmptyMessage) returns (MarketOrderPairList) {}; Nodes: FullNode 70. Get all orders for the trading pair Interface statement: rpc GetMarketOrderListByPair (MarketOrderPair) returns (MarketOrderList) {}; Nodes: FullNode 71. Get all prices for the trading pair Interface statement: rpc GetMarketPriceByPair (MarketOrderPair) returns (MarketPriceList) {}; Nodes: FullNode 72. Get order by id Interface statement: rpc GetMarketOrderById (BytesMessage) returns (MarketOrder) {}; Nodes: FullNode 73. perform a historical balance lookup Interface statement: rpc GetAccountBalance (AccountBalanceRequest) returns (AccountBalanceResponse){}; Nodes: FullNode 74. fetch all balance-changing transactions in a block Interface statement: rpc GetBlockBalanceTrace (BlockBalanceTrace.BlockIdentifier) returns (BlockBalanceTrace) {}; Nodes: FullNode 75. get the burn stb amount Interface statement: rpc GetBurnStb (EmptyMessage) returns (NumberMessage) {}; Nodes: FullNode and SolidityNode","title":"RPC List"},{"location":"architecture/database/","text":"The Database \u00b6 Use RocksDB \u00b6 Configuration \u00b6 Use RocksDB as the data storage engine, need to set db.engine to \"ROCKSDB\". Note: RocksDB only supports db.version=2 , yet does not supports db.version=1 The optimization parameters RocksDB support: Use RocksDB's data backup function \u00b6 Choose RocksDB to be the data storage engine, you can use its data backup function while running Note: FullNode can use data backup function.","title":"Database"},{"location":"architecture/database/#the-database","text":"","title":"The Database"},{"location":"architecture/database/#use-rocksdb","text":"","title":"Use RocksDB"},{"location":"architecture/database/#configuration","text":"Use RocksDB as the data storage engine, need to set db.engine to \"ROCKSDB\". Note: RocksDB only supports db.version=2 , yet does not supports db.version=1 The optimization parameters RocksDB support:","title":"Configuration"},{"location":"architecture/database/#use-rocksdbs-data-backup-function","text":"Choose RocksDB to be the data storage engine, you can use its data backup function while running Note: FullNode can use data backup function.","title":"Use RocksDB's data backup function"},{"location":"architecture/event/","text":"Stabila Event Subsystem \u00b6 Stabila eventsubscribe plugin \u00b6 This is an implementation of Stabila eventsubscribe model. api module defines IPluginEventListener, a protocol between Java-stabila and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from Java-stabila and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb. Setup/Build \u00b6 Clone the repo Go to eventplugin cd eventplugin run ./gradlew build This will produce one plugin zip, named plugin-kafka-1.0.0.zip , located in the eventplugin/build/plugins/ directory. Edit config.conf of Java-stabila, add the following fileds: \u00b6 event.subscribe = { path = \"\" // absolute path of plugin server = \"\" // target server address to receive event triggers dbconfig = \"\" // dbname|username|password topics = [ { triggerName = \"block\" // block trigger, the value can't be modified enable = false topic = \"block\" // plugin topic, the value could be modified }, { triggerName = \"transaction\" enable = false topic = \"transaction\" }, { triggerName = \"contractevent\" enable = true topic = \"contractevent\" }, { triggerName = \"contractlog\" enable = true topic = \"contractlog\" }, { triggerName = \"solidity\" // solidity block event trigger, the value can't be modified enable = true // the default value is true topic = \"solidity\" }, { triggerName = \"solidityevent\" enable = false topic = \"solidityevent\" }, { triggerName = \"soliditylog\" enable = false topic = \"soliditylog\" } ] filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } } path : is the absolute path of \"plugin-kafka-1.0.0.zip\" server : Kafka server address, the default port is 9092 topics : each event type maps to one Kafka topic, we support four event types subscribing, block, transaction, contractlog and contractevent. dbconfig : db configuration information for mongodb, if using kafka, delete this one; if using Mongodb, add like that dbname|username|password triggerName : the trigger type, the value can't be modified. enable : plugin can receive nothing if the value is false. topic : the value is the kafka topic to receive events. Make sure it has been created and Kafka process is running filter : filter condition for process trigger. note : if the server is not 127.0.0.1, pls set some properties in config/server.properties file remove comment and set listeners=PLAINTEXT://:9092 remove comment and set advertised.listeners to PLAINTEXT://host_ip:9092 Install Kafka \u00b6 On Mac : brew install kafka On Linux : cd /usr/local wget http://archive.apache.org/dist/kafka/0.10.2.2/kafka_2.10-0.10.2.2.tgz tar -xzvf kafka_2.10-0.10.2.2.tgz mv kafka_2.10-0.10.2.2 kafka add \"export PATH=$PATH:/usr/local/kafka/bin\" to end of /etc/profile source /etc/profile Note : make sure the version of Kafka is the same as the version set in build.gradle of eventplugin project.(kafka_2.10-0.10.2.2 kafka) Run Kafka \u00b6 On Mac : zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties & kafka-server-start /usr/local/etc/kafka/server.properties On Linux : zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties & Sleep about 3 seconds kafka-server-start.sh /usr/local/kafka/config/server.properties & Create topics to receive events, the topic is defined in config.conf \u00b6 On Mac : kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidity kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidityevent kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic soliditylog On Linux : kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidity kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidityevent kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic soliditylog Kafka consumer \u00b6 On Mac : kafka-console-consumer --bootstrap-server localhost:9092 --topic block kafka-console-consumer --bootstrap-server localhost:9092 --topic transaction kafka-console-consumer --bootstrap-server localhost:9092 --topic contractlog kafka-console-consumer --bootstrap-server localhost:9092 --topic contractevent kafka-console-consumer --bootstrap-server localhost:9092 --topic solidity kafka-console-consumer --bootstrap-server localhost:9092 --topic solidityevent kafka-console-consumer --bootstrap-server localhost:9092 --topic soliditylog On Linux : kafka-console-consumer.sh --zookeeper localhost:2181 --topic block kafka-console-consumer.sh --zookeeper localhost:2181 --topic transaction kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractlog kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractevent kafka-console-consumer.sh --zookeeper localhost:2181 --topic solidity kafka-console-consumer.sh --zookeeper localhost:2181 --topic solidityevent kafka-console-consumer.sh --zookeeper localhost:2181 --topic soliditylog Load plugin in Java-stabila \u00b6 add --es to command line, for example: java -jar FullNode.jar -c config.conf --es Event filter \u00b6 which is defined in config.conf, path: event.subscribe filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"TVkNuE1BYxECWq85d8UR9zsv6WppBns9iH\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"f0f1e23ddce8a520eaa7502e02fa767cb24152e9a86a4bf02529637c4e57504b\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] }","title":"Event Subsystem"},{"location":"architecture/event/#stabila-event-subsystem","text":"","title":"Stabila Event Subsystem"},{"location":"architecture/event/#stabila-eventsubscribe-plugin","text":"This is an implementation of Stabila eventsubscribe model. api module defines IPluginEventListener, a protocol between Java-stabila and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from Java-stabila and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb.","title":"Stabila eventsubscribe plugin"},{"location":"architecture/event/#setupbuild","text":"Clone the repo Go to eventplugin cd eventplugin run ./gradlew build This will produce one plugin zip, named plugin-kafka-1.0.0.zip , located in the eventplugin/build/plugins/ directory.","title":"Setup/Build"},{"location":"architecture/event/#edit-configconf-of-java-stabila-add-the-following-fileds","text":"event.subscribe = { path = \"\" // absolute path of plugin server = \"\" // target server address to receive event triggers dbconfig = \"\" // dbname|username|password topics = [ { triggerName = \"block\" // block trigger, the value can't be modified enable = false topic = \"block\" // plugin topic, the value could be modified }, { triggerName = \"transaction\" enable = false topic = \"transaction\" }, { triggerName = \"contractevent\" enable = true topic = \"contractevent\" }, { triggerName = \"contractlog\" enable = true topic = \"contractlog\" }, { triggerName = \"solidity\" // solidity block event trigger, the value can't be modified enable = true // the default value is true topic = \"solidity\" }, { triggerName = \"solidityevent\" enable = false topic = \"solidityevent\" }, { triggerName = \"soliditylog\" enable = false topic = \"soliditylog\" } ] filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } } path : is the absolute path of \"plugin-kafka-1.0.0.zip\" server : Kafka server address, the default port is 9092 topics : each event type maps to one Kafka topic, we support four event types subscribing, block, transaction, contractlog and contractevent. dbconfig : db configuration information for mongodb, if using kafka, delete this one; if using Mongodb, add like that dbname|username|password triggerName : the trigger type, the value can't be modified. enable : plugin can receive nothing if the value is false. topic : the value is the kafka topic to receive events. Make sure it has been created and Kafka process is running filter : filter condition for process trigger. note : if the server is not 127.0.0.1, pls set some properties in config/server.properties file remove comment and set listeners=PLAINTEXT://:9092 remove comment and set advertised.listeners to PLAINTEXT://host_ip:9092","title":"Edit config.conf of Java-stabila, add the following fileds:"},{"location":"architecture/event/#install-kafka","text":"On Mac : brew install kafka On Linux : cd /usr/local wget http://archive.apache.org/dist/kafka/0.10.2.2/kafka_2.10-0.10.2.2.tgz tar -xzvf kafka_2.10-0.10.2.2.tgz mv kafka_2.10-0.10.2.2 kafka add \"export PATH=$PATH:/usr/local/kafka/bin\" to end of /etc/profile source /etc/profile Note : make sure the version of Kafka is the same as the version set in build.gradle of eventplugin project.(kafka_2.10-0.10.2.2 kafka)","title":"Install Kafka"},{"location":"architecture/event/#run-kafka","text":"On Mac : zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties & kafka-server-start /usr/local/etc/kafka/server.properties On Linux : zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties & Sleep about 3 seconds kafka-server-start.sh /usr/local/kafka/config/server.properties &","title":"Run Kafka"},{"location":"architecture/event/#create-topics-to-receive-events-the-topic-is-defined-in-configconf","text":"On Mac : kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidity kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidityevent kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic soliditylog On Linux : kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidity kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic solidityevent kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic soliditylog","title":"Create topics to receive events, the topic is defined in config.conf"},{"location":"architecture/event/#kafka-consumer","text":"On Mac : kafka-console-consumer --bootstrap-server localhost:9092 --topic block kafka-console-consumer --bootstrap-server localhost:9092 --topic transaction kafka-console-consumer --bootstrap-server localhost:9092 --topic contractlog kafka-console-consumer --bootstrap-server localhost:9092 --topic contractevent kafka-console-consumer --bootstrap-server localhost:9092 --topic solidity kafka-console-consumer --bootstrap-server localhost:9092 --topic solidityevent kafka-console-consumer --bootstrap-server localhost:9092 --topic soliditylog On Linux : kafka-console-consumer.sh --zookeeper localhost:2181 --topic block kafka-console-consumer.sh --zookeeper localhost:2181 --topic transaction kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractlog kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractevent kafka-console-consumer.sh --zookeeper localhost:2181 --topic solidity kafka-console-consumer.sh --zookeeper localhost:2181 --topic solidityevent kafka-console-consumer.sh --zookeeper localhost:2181 --topic soliditylog","title":"Kafka consumer"},{"location":"architecture/event/#load-plugin-in-java-stabila","text":"add --es to command line, for example: java -jar FullNode.jar -c config.conf --es","title":"Load plugin in Java-stabila"},{"location":"architecture/event/#event-filter","text":"which is defined in config.conf, path: event.subscribe filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"TVkNuE1BYxECWq85d8UR9zsv6WppBns9iH\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"f0f1e23ddce8a520eaa7502e02fa767cb24152e9a86a4bf02529637c4e57504b\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] }","title":"Event filter"},{"location":"architecture/network/","text":"Stabila Network Instructure \u00b6 Stabila network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: Governor, FullNode, SolidityNode. Governor produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-stabila code can join Stabila network as a node. Governor \u00b6 Super Representative(abbr: SR) is the block producer in STABILA network, there are 21 SRs. They verify the transactions and write the transactions into the blocks in turn. The super Representatives' information is public to everyone in Stabila network. The best way to browse is using Stabilascan . Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 2T FullNode \u00b6 FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service. Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 32 cores RAM: > 48G, Bandwidth: > 500M, Disk: > 2T SolidityNode \u00b6 SolidityNode only synchronize solidified blocks data from the fullNode it specifies, It also provides api service. NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 32 cores RAM: > 48G, Bandwidth: > 500M, Disk: > 2T MainNet and PrivateNet \u00b6 MainNet and PrivateNet all use the same code, only the node start configuration varies. MainNet \u00b6 MainNet configuration: main_net_config.conf PrivateNet \u00b6 Preconditions \u00b6 at least two accounts generate an account at least one Governor to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions Governor and FullNode comprise the private network Deploy the Governor \u00b6 download private_net_config.conf ```console wget https://raw.githubusercontent.com/stabilaprotocol/stabila-deployment/master/private_net_config.conf ``` add your private key in localexecutive set genesis.block.executives as the private key's corresponding address set p2p.version , any positive integer except 11111 set for first SR needSyncCheck = false , others can be set true set node.discovery.enable = true run the following command ```text nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c private_net_config.conf /dev/null & command line parameters introduction: --executive: start executive function, i.e.: --executive YOUR_PRIVATE_KEY_IN_HEX --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf ``` The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: <logger name= \"net\" level= \"WARN\" /> The parameters in configuration file that need to modify: localexecutive: executives: version: enable: Deploy the FullNode \u00b6 Same as above except for: set seed.node.ip.list to SR's ip and port set needSyncCheck true modify listen.port , http.port and rpc.port if Governor and FullNode are deployed on the same server. do not need a private key in localexecutive The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable:","title":"Network"},{"location":"architecture/network/#stabila-network-instructure","text":"Stabila network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: Governor, FullNode, SolidityNode. Governor produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-stabila code can join Stabila network as a node.","title":"Stabila Network Instructure"},{"location":"architecture/network/#governor","text":"Super Representative(abbr: SR) is the block producer in STABILA network, there are 21 SRs. They verify the transactions and write the transactions into the blocks in turn. The super Representatives' information is public to everyone in Stabila network. The best way to browse is using Stabilascan . Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 2T","title":"Governor"},{"location":"architecture/network/#fullnode","text":"FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service. Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 32 cores RAM: > 48G, Bandwidth: > 500M, Disk: > 2T","title":"FullNode"},{"location":"architecture/network/#soliditynode","text":"SolidityNode only synchronize solidified blocks data from the fullNode it specifies, It also provides api service. NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 32 cores RAM: > 48G, Bandwidth: > 500M, Disk: > 2T","title":"SolidityNode"},{"location":"architecture/network/#mainnet-and-privatenet","text":"MainNet and PrivateNet all use the same code, only the node start configuration varies.","title":"MainNet and PrivateNet"},{"location":"architecture/network/#mainnet","text":"MainNet configuration: main_net_config.conf","title":"MainNet"},{"location":"architecture/network/#privatenet","text":"","title":"PrivateNet"},{"location":"architecture/network/#preconditions","text":"at least two accounts generate an account at least one Governor to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions Governor and FullNode comprise the private network","title":"Preconditions"},{"location":"architecture/network/#deploy-the-governor","text":"download private_net_config.conf ```console wget https://raw.githubusercontent.com/stabilaprotocol/stabila-deployment/master/private_net_config.conf ``` add your private key in localexecutive set genesis.block.executives as the private key's corresponding address set p2p.version , any positive integer except 11111 set for first SR needSyncCheck = false , others can be set true set node.discovery.enable = true run the following command ```text nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c private_net_config.conf /dev/null & command line parameters introduction: --executive: start executive function, i.e.: --executive YOUR_PRIVATE_KEY_IN_HEX --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf ``` The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: <logger name= \"net\" level= \"WARN\" /> The parameters in configuration file that need to modify: localexecutive: executives: version: enable:","title":"Deploy the Governor"},{"location":"architecture/network/#deploy-the-fullnode","text":"Same as above except for: set seed.node.ip.list to SR's ip and port set needSyncCheck true modify listen.port , http.port and rpc.port if Governor and FullNode are deployed on the same server. do not need a private key in localexecutive The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable:","title":"Deploy the FullNode"},{"location":"clients/wallet-cli/","text":"Wallet-cli \u00b6 Usage Guide \u00b6 Download wallet-cli \u00b6 git clone https://github.com/stabilaprotocol/wallet-cli.git Edit config.conf in src/main/resources \u00b6 net { type = mainnet } fullnode = { ip.list = [ \"fullnode ip : port\" ] } soliditynode = { // the IPs in this list can only be totally set to solidity or pBFT. ip.list = [ \"ip : solidity port\" // default solidity ] # ip.list = [ # \"ip : pBFT port\" // or pBFT # ] } // NOTE: solidity node is optional blockNumberStartToScan = 22690588 // NOTE: this field is optional Run a web wallet \u00b6 connect to fullNode Take a look at: java-stabila deployment NOTE: The wallet-cli node would consume a lot of memory and CPU. Please be aware if you do not use wallet, just kill them. - compile and run web wallet ```console $ cd wallet-cli $ ./gradlew build $ cd build/libs $ java -jar wallet-cli.jar ``` Connect to java-stabila \u00b6 Wallet-cli connect to java-stabila via gRPC protocol, which can be deployed locally or remotely. Check Run a web Wallet section. We can configure java-stabila node IP and port in src/main/resources/config.conf , so that wallet-cli server can successfully talk to java-stabila nodes. Wallet-cli supported command list \u00b6 Following is a list of Stabila Wallet-cli commands: For more information on a specific command, just type the command on terminal when you start your Wallet-cli. AddTransactionSign ApproveProposal AssetIssue BackupShieldedSRC20Wallet BackupWallet BackupWallet2Base64 BroadcastTransaction ChangePassword CreateProposal DeleteProposal DeployContract ExchangeCreate ExchangeInject ExchangeTransaction ExchangeWithdraw CdBalance GenerateAddress GenerateShieldedSRC20Address GetAccount GetAccountNet GetAccountResource GetAddress GetAkFromAsk GetAssetIssueByAccount GetAssetIssueById GetAssetIssueByName GetAssetIssueListByName GetBalance GetBlock GetBlockById GetBlockByLatestNum GetBlockByLimitNext GetBrokerage GetContract GetDelegatedResource GetDelegatedResourceAccountIndex GetDiversifier GetExpandedSpendingKey GetIncomingViewingKey GetMarketOrderByAccount GetMarketOrderById GetMarketOrderListByPair GetMarketPairList GetMarketPriceByPair GetNextMaintenanceTime GetNkFromNsk GetProposal GetShieldedPaymentAddress GetSpendingKey GetReward GetTransactionApprovedList GetTransactionById GetTransactionCountByBlockNum GetTransactionInfoByBlockNum GetTransactionInfoById GetTransactionSignWeight ImportShieldedSRC20Wallet ImportWallet ImportWalletByBase64 ListAssetIssue ListExchanges ListExchangesPaginated ListNodes ListShieldedSRC20Address ListShieldedSRC20Note ListProposals ListProposalsPaginated ListExecutives LoadShieldedSRC20Wallet Login MarketCancelOrder MarketSellAsset ParticipateAssetIssue RegisterWallet ResetShieldedSRC20Note ScanShieldedSRC20NoteByIvk ScanShieldedSRC20NoteByOvk SendCoin SendShieldedSRC20Coin SendShieldedSRC20CoinWithoutAsk SetShieldedSRC20ContractAddress ShowShieldedSRC20AddressInfo TransferAsset TriggerContract UncdAsset UncdBalance UpdateAsset UpdateBrokerage UpdateUcrLimit UpdateSetting UpdateAccountPermission VoteExecutive How to cd/uncd balance \u00b6 After the funds are cded, the corresponding number of shares and bandwidth will be obtained. Shares can be used for voting and bandwidth can be used for trading. The rules for the use and calculation of share and bandwidth are described later in this article. Cd operation is as follows: > cdBalance [ OwnerAddress ] cded_balance cded_duration [ ResourceCode:0 BANDWIDTH, 1 UCR ] [ receiverAddress ] OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. cded_balance The amount of cded funds, the unit is Unit. The minimum value is 1000000 Unit(1STB) . cded_duration Cd time, this value is currently only allowed for 3 days . For example: > cdBalance 100000000 3 1 address After the cd operation, cded funds will be transferred from Account Balance to Cded, You can view cded funds from your account information. After being uncded, it is transferred back to Balance by Cded, and the cded funds cannot be used for trading. When more share or bandwidth is needed temporarily, additional funds may be cded to obtain additional share and bandwidth. The uncded time is postponed until 3 days after the last cd operation After the freezing time expires, funds can be unfroze. Uncd operation is as follows: > uncdBalance [ OwnerAddress ] ResourceCode ( 0 BANDWIDTH, 1 CPU ) [ receiverAddress ] How to vote \u00b6 Voting requires share. Share can be obtained by freezing funds. The share calculation method is: 1 unit of share can be obtained for every 1STB cded. After unfreezing, previous vote will expire. You can avoid the invalidation of the vote by re-freezing and voting. NOTE The Stabila Network only records the status of your last vote, which means that each of your votes will overwrite all previous voting results. For example: > cdBalance 100000000 3 1 address # Cd 10STB and acquire 10 units of shares > voteexecutive 123455 executive1 4 executive2 6 # Cast 4 votes for executive1 and 6 votes for executive2 at the same time > voteexecutive 123455 executive1 10 # Voted 10 votes for executive1 The final result of the above command was 10 votes for executive1 and 0 vote for executive2. Brokerage \u00b6 After voting for the executive, you will receive the rewards. The executive has the right to decide the ratio of brokerage. The default ratio is 20%, and the executive can adjust it. By default, if a executive is rewarded, he will receive 20% of the whole rewards, and 80% of the rewards will be distributed to his voters. GetBrokerage \u00b6 View the ratio of brokerage of the executive. > getbrokerage OwnerAddress OwnerAddress The address of the executive's account, it is a base58check type address. GetReward \u00b6 Query unclaimed reward. > getreward OwnerAddress OwnerAddress The address of the voter's account, it is a base58check type address. UpdateBrokerage \u00b6 Update the ratio of brokerage, this command is usually used by a executive account. > updateBrokerage OwnerAddress brokerage OwnerAddress The address of the executive's account, it is a base58check type address. brokerage The ratio of brokerage you want to update to, the limit of it: 0-100. For example: > getbrokerage SZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h > getreward SNfu3u8jo1LDWerHGbzs2Pv88Biqd85wEY > updateBrokerage SZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h 30 How to calculate bandwidth \u00b6 The bandwidth calculation rule is: constant * CdedFunds * days Assuming cd 1STB\uff081_000_000 Unit), 3 days, bandwidth obtained = 1 * 1_000_000 * 3 = 3_000_000. All contracts consume bandwidth, including transferring, transferring of assets, voting, freezing, etc. Querying does not consume bandwidth. Each contract needs to consume 100_000 bandwidth . If a contract exceeds a certain time ( 10s ), this operation does not consume bandwidth. When the unfreezing operation occurs, the bandwidth is not cleared. The next time the cd is performed, the newly added bandwidth is accumulated. How to withdraw balance \u00b6 After each block is produced, the block award is sent to the account's allowance, and a withdraw operation is allowed every 24 hours from allowance to balance. The funds in allowance cannot be locked or traded. How to create executive \u00b6 Applying to become a executive account needs to consume 100_000STB . This part of the funds will be burned directly. How to create account \u00b6 It is not allowed to create accounts directly. You can only create accounts by transferring funds to non-existing accounts. Transferring to a non-existent account has minimum restriction amount of 1STB . Command line operation flow example \u00b6 $ cd wallet-cli $ ./gradlew build $ ./gradlew run > RegisterWallet 123456 ( password = 123456 ) > login 123456 > getAddress address = SRfwwLDpr4excH4V4QzghLEsdYwkapTxnm' # backup it! > BackupWallet 123456 priKey = 075725cf903fc1f6d6267b8076fc2c6adece0cfd18626c33427d9b2504ea3cef' # backup it!!! (BackupWallet2Base64 option) > getbalance Balance = 0 > AssetIssue TestSTB STB 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1 > getaccount SRfwwLDpr4excH4V4QzghLEsdYwkapTxnm (Print balance: 9999900000 \"assetV2\": [ { \"key\": \"1000001\", \"value\": 74999999999980000 } ],) # ( cost stb 1000 stb for assetIssue ) # ( You can query the stb balance and other asset balances for any account ) > TransferAsset SWzrEZYtwzkAxXJ8PatVrGuoSNsexejRiM 1000001 10000 How to issue a SRC10 token \u00b6 Each account can only issue ONE SRC10 token. Issue SRC10 tokens \u00b6 > AssetIssue [OwnerAddress] AssetName AbbrName TotalSupply StbNum AssetNum Precision StartDate EndDate Description Url FreeNetLimitPerAccount PublicFreeNetLimit CdedAmount0 CdedDays0 [...] CdedAmountN CdedDaysN OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. AssetName The name of the issued SRC10 token AbbrName The abbreviation of SRC10 token TotalSupply TotalSupply = Account Balance of Issuer + All Cded Token Amount TotalSupply: Total Issuing Amount Account Balance Of Issuer: At the time of issuance All Cded Token Amount: Before asset transfer and the issuance StbNum, AssetNum These two parameters determine the exchange rate when the token is issued. Exchange Rate = StbNum / AssetNum AssetNum: Unit in base unit of the issued token StbNum: Unit in UNIT (0.000001 STB) Precision Precision to how many decimal places FreeNetLimitPerAccount The maximum amount of bandwidth each account is allowed to use. Token issuers can cd STB to obtain bandwidth (TransferAssetContract only) PublicFreeNetLimit The maximum total amount of bandwidth which is allowed to use for all accounts. Token issuers can cd STB to obtain bandwidth (TransferAssetContract only) StartDate, EndDate The start and end date of token issuance. Within this period time, other users can participate in token issuance. CdedAmount0 CdedDays0 Amount and days of token cd. CdedAmount0: Must be bigger than 0 CdedDays0: Must between 1 and 3653. Example: > AssetIssue TestSTB STB 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1 > GetAssetIssueByAccount SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # View published information { \"assetIssue\": [ { \"owner_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"name\": \"TestSTB\", \"abbr\": \"STB\", \"total_supply\": 75000000000000000, \"cded_supply\": [ { \"cded_amount\": 10000, \"cded_days\": 1 }, { \"cded_amount\": 10000, \"cded_days\": 10 } ], \"stb_num\": 1, \"precision\": 2, \"num\": 1, \"start_time\": 1570000200000, \"end_time\": 1594396800000, \"description\": \"just for test121212\", \"url\": \"www.test.com\", \"free_asset_net_limit\": 100, \"public_free_asset_net_limit\": 100000, \"id\": \"1000001\" } ] } Update parameters of SRC10 token \u00b6 > UpdateAsset [OwnerAddress] newLimit newPublicLimit description url Specific meaning of the parameters is the same as that of AssetIssue. Example: > UpdateAsset 1000 1000000 \"change description\" www.changetest.com > GetAssetIssueByAccount SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # View the modified information { \"assetIssue\": [ { \"owner_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"name\": \"TestSTB\", \"abbr\": \"STB\", \"total_supply\": 75000000000000000, \"cded_supply\": [ { \"cded_amount\": 10000, \"cded_days\": 1 }, { \"cded_amount\": 10000, \"cded_days\": 10 } ], \"stb_num\": 1, \"precision\": 2, \"num\": 1, \"start_time\": 1570000200000, \"end_time\": 1594396800000, \"description\": \"change description\", \"url\": \"www.changetest.com\", \"free_asset_net_limit\": 1000, \"public_free_asset_net_limit\": 1000000, \"id\": \"1000001\" } ] } SRC10 token transfer \u00b6 > TransferAsset [OwnerAddress] ToAddress AssertID Amount OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. ToAddress Address of the target account AssertName SRC10 token ID Example: 1000001 Amount The number of SRC10 token to transfer Example: > TransferAsset SN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz 1000001 1000 > getaccount SN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz # View target account information after the transfer address: SN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 } Participating in the issue of SRC10 token \u00b6 > ParticipateAssetIssue [OwnerAddress] ToAddress AssetID Amount OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. ToAddress Account address of SRC10 issuers AssertName SRC10 token ID Example: 1000001 Amount The number of SRC10 token to transfers The participation process must happen during the release of SRC10, otherwise an error may occur. Example: > ParticipateAssetIssue SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 1000001 1000 > getaccount SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW # View remaining balance address: SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 } Uncd SRC10 token \u00b6 To uncd all SRC10 token which are supposed to be uncded after the freezing period. > uncdasset [OwnerAddress] How to obtain SRC10 token information \u00b6 ListAssetIssue Obtain all of the published SRC10 token information GetAssetIssueByAccount Obtain SRC10 token information based on issuing address GetAssetIssueById Obtain SRC10 token Information based on ID GetAssetIssueByName Obtain SRC10 token Information based on names GetAssetIssueListByName Obtain a list of SRC10 token information based on names How to operate with proposal \u00b6 Any proposal-related operations, except for viewing operations, must be performed by committee members. Initiate a proposal \u00b6 > createProposal [OwnerAddress] id0 value0 ... idN valueN OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. id0 The serial number of the parameter. Every parameter of STABILA network has a serial number. Please refer to \"http://stabilascan.org/#/sr/committee\" Value0 The modified value In the example, modification No.4 (modifying token issuance fee) costs 1000STB as follows: > createProposal 4 1000 > listproposals # View initiated proposal { \"proposals\": [ { \"proposal_id\": 1, \"proposer_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"parameters\": [ { \"key\": 4, \"value\": 1000 } ], \"expiration_time\": 1567498800000, \"create_time\": 1567498308000 } ] } The corresponding id is 1. Approve / Disapprove a proposal \u00b6 > approveProposal [OwnerAddress] id is_or_not_add_approval OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. id ID of the initiated proposal Example: 1 is_or_not_add_approval true for approve; false for disapprove Example: > ApproveProposal 1 true # in favor of the offer > ApproveProposal 1 false # Cancel the approved proposal Delete an existing proposal \u00b6 > deleteProposal [OwnerAddress] proposalId proposalId ID of the initiated proposal Example: 1 The proposal must be canceled by the supernode that initiated the proposal. Example\uff1a > DeleteProposal 1 Obtain proposal information \u00b6 ListProposals Obtain a list of initiated proposals ListProposalsPaginated Use the paging mode to obtain the initiated proposal GetProposal Obtain proposal information based on the proposal ID How to trade on the exchange \u00b6 The trading and price fluctuations of trading pairs are in accordance with the Bancor Agreement . Create a trading pair \u00b6 > exchangeCreate [OwnerAddress] first_token_id first_token_balance second_token_id second_token_balance OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. First_token_id, first_token_balance ID and amount of the first token second_token_id, second_token_balance ID and amount of the second token The ID is the ID of the issued SRC10 token. If it is STB, the ID is \"_\". The amount must be greater than 0, and less than 1,000,000,000,000,000. Example: > exchangeCreate 1000001 10000 _ 10000 # Create trading pairs with the IDs of 1000001 and STB, with amount 10000 for both. Capital injection \u00b6 > exchangeInject [OwnerAddress] exchange_id token_id quant OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. exchange_id The ID of the trading pair to be funded token_id, quant TokenId and quantity (unit in base unit) of capital injection When conducting a capital injection, depending on its quantity (quant), a proportion of each token in the trading pair will be withdrawn from the account, and injected into the trading pair. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary. Transactions \u00b6 > exchangeTransaction [OwnerAddress] exchange_id token_id quant expected OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. exchange_id ID of the trading pair token_id, quant The ID and quantity of tokens being exchanged, equivalent to selling expected Expected quantity of another token expected must be less than quant, or an error will be reported. Example\uff1a > ExchangeTransaction 1 1000001 100 80 It is expected to acquire the 80 STB by exchanging 1000001 from the trading pair ID of 1, and the amount is 100.(Equivalent to selling an amount of 100 tokenID - 1000001, at a price of 80 STB, in trading pair ID - 1). Capital Withdrawal \u00b6 > exchangeWithdraw [OwnerAddress] exchange_id token_id quant OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. Exchange_id The ID of the trading pair to be withdrawn Token_id, quant TokenId and quantity (unit in base unit) of capital withdrawal When conducting a capital withdrawal, depending on its quantity (quant), a proportion of each token in the transaction pair is withdrawn from the trading pair, and injected into the account. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary. Obtain information on trading pairs \u00b6 ListExchanges List trading pairs ListExchangesPaginated List trading pairs by page How to use the multi-signature feature of wallet-cli? \u00b6 Multi-signature allows other users to access the account in order to better manage it. There are three types of accesses: owner: access to the owner of account active: access to other features of accounts, and access that authorizes a certain feature. Block production authorization is not included if it's for executive purposes. executive: only for executive, block production authorization will be granted to one of the other users. The rest of the users will be granted > Updateaccountpermission SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ \\ { \"owner_permission\": { \"type\": 0, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [ { \"address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"executive_permission\": { \"type\": 1, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [ { \"address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"active_permissions\": [ { \"type\": 2, \"permission_name\": \"active12323\", \"threshold\": 2, \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", \"keys\": [ { \"address\": \"SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\", \"weight\": 1 }, { \"address\": \"SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\", \"weight\": 1 } ] } ] } The account SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ gives the owner access to itself, active access to SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR and TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP. Active access will need signatures from both accounts in order to take effect. If the account is not a executive, it's not necessary to set executive_permission, otherwise an error will occur. Signed transaction \u00b6 > SendCoin SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 10000000000000000 Will show \"Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction.\" This will require the transfer authorization of active access. Enter: 2 Then select accounts and put in local password, i.e. SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR needs a private key SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR to sign a transaction. Select another account and enter the local password. i.e. SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP will need a private key of SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP to sign a transaction. The weight of each account is 1, threshold of access is 2. When the requirements are met, users will be notified with \u201cSend 10000000000000000 Unit to SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW successful !!\u201d. This is how multiple accounts user multi-signature when using the same cli. Use the instruction addTransactionSign according to the obtained transaction hex string if signing at multiple cli. After signing, the users will need to broadcast final transactions manually. Obtain weight information according to transaction \u00b6 > getTransactionSignWeight 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 The information displays as follows: { \"result\" :{ \"code\" : \"PERMISSION_ERROR\" , \"message\" : \"Signature count is 2 more than key counts of permission : 1\" }, \"permission\" :{ \"operations\" : \"7fff1fc0033e0100000000000000000000000000000000000000000000000000\" , \"keys\" :[ { \"address\" : \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"weight\" : 1 } ], \"threshold\" : 1 , \"id\" : 2 , \"type\" : \"Active\" , \"permission_name\" : \"active\" }, \"transaction\" :{ \"result\" :{ \"result\" : true }, \"txid\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"transaction\" :{ \"signature\" :[ \"c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01\" , \"3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101\" ], \"txID\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"amount\" : 10000000000000000 , \"owner_address\" : \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"to_address\" : \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" }, \"type\" : \"TransferContract\" , \"Permission_id\" : 2 } ], \"ref_block_bytes\" : \"0318\" , \"ref_block_hash\" : \"60e195d3609c8661\" , \"expiration\" : 1554123306262 , \"timestamp\" : 1554101706260 }, \"raw_data_hex\" : \"0a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d\" } } } Get signature information according to transactions \u00b6 > getTransactionApprovedList 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 { \"result\" :{ }, \"approved_list\" :[ \"SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\" , \"SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\" ], \"transaction\" :{ \"result\" :{ \"result\" : true }, \"txid\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"transaction\" :{ \"signature\" :[ \"c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01\" , \"3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101\" ], \"txID\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"amount\" : 10000000000000000 , \"owner_address\" : \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"to_address\" : \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" }, \"type\" : \"TransferContract\" , \"Permission_id\" : 2 } ], \"ref_block_bytes\" : \"0318\" , \"ref_block_hash\" : \"60e195d3609c8661\" , \"expiration\" : 1554123306262 , \"timestamp\" : 1554101706260 }, \"raw_data_hex\" : \"0a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d\" } } } How to use smart contract \u00b6 deploy smart contracts \u00b6 > DeployContract [ownerAddress] contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent origin_ucr_limit value token_value token_id(e.g: STBTOKEN, use # if don't provided) <library:address,library:address,...> <lib_compiler_version(e.g:v5)> library:address,...> OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. contractName Name of smart contract ABI Compile generated ABI code byteCode Compile generated byte code constructor, params, isHex Define the format of the bytecode, which determines the way to parse byteCode from parameters fee_limit Transaction allows for the most consumed STB consume_user_resource_percent Percentage of user resource consumed, in the range [0, 100] origin_ucr_limit The most amount of developer Ucr consumed by trigger contract once value The amount of stb transferred to the contract account token_value Number of STB10 token_id STB10 Id Example: > deployContract normalcontract544 [{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\": \"findArgsByIndexTest\",\"outputs\":[{\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}] 608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029 # # false 1000000000 75 50000 0 0 # Get the result of the contract execution with the getTransactionInfoById command: > getTransactionInfoById 4978dc64ff746ca208e51780cce93237ee444f598b24d5e9ce0da885fb3a3eb9 { \"id\": \"8c1f57a5e53b15bb0a0a0a0d4740eda9c31fbdb6a63bc429ec2113a92e8ff361\", \"fee\": 6170500, \"blockNumber\": 1867, \"blockTimeStamp\": 1567499757000, \"contractResult\": [ \"6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\" ], \"contract_address\": \"SJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\", \"receipt\": { \"ucr_fee\": 6170500, \"ucr_usage_total\": 61705, \"net_usage\": 704, \"result\": \"SUCCESS\" } } trigger smart contarct \u00b6 > TriggerContract [ownerAddress] contractAddress method args isHex fee_limit value token_value token_id OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. contractAddress Smart contarct address method The name of function and parameters, please refer to the example args Parameter value, if you want to call receive , pass '#' instead isHex The format of the parameters method and args, is hex string or not fee_limit The most amount of stb allows for the consumption token_value Number of STB10 token_id SRC10 id, If not, use \u2018#\u2019 instead Example: > triggerContract SGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG findArgsByIndexTest ( uint256 ) 0 false 1000000000 0 0 # # Get the result of the contract execution with the getTransactionInfoById command > getTransactionInfoById 7d9c4e765ea53cf6749d8a89ac07d577141b93f83adc4015f0b266d8f5c2dec4 { \"id\": \"de289f255aa2cdda95fbd430caf8fde3f9c989c544c4917cf1285a088115d0e8\", \"fee\": 8500, \"blockNumber\": 2076, \"blockTimeStamp\": 1567500396000, \"contractResult\": [ \"\" ], \"contract_address\": \"SJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\", \"receipt\": { \"ucr_fee\": 8500, \"ucr_usage_total\": 85, \"net_usage\": 314, \"result\": \"REVERT\" }, \"result\": \"FAILED\", \"resMessage\": \"REVERT opcode executed\" } get details of a smart contract \u00b6 > GetContract contractAddress contractAddress smart contract address Example: > GetContract SGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG { \"origin_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"contract_address\": \"SJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\", \"abi\": { \"entrys\": [ { \"name\": \"findArgsByIndexTest\", \"inputs\": [ { \"name\": \"i\", \"type\": \"uint256\" } ], \"outputs\": [ { \"name\": \"z\", \"type\": \"uint256\" } ], \"type\": \"Function\", \"stateMutability\": \"Nonpayable\" } ] }, \"bytecode\": \"608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\", \"consume_user_resource_percent\": 75, \"name\": \"normalcontract544\", \"origin_ucr_limit\": 50000, \"code_hash\": \"23423cece3b4866263c15357b358e5ac261c218693b862bcdb90fa792d5714e6\" } update smart contract parameters \u00b6 > UpdateUcrLimit [ownerAddress] contract_address ucr_limit # Update parameter ucr_limit > UpdateSetting [ownerAddress] contract_address consume_user_resource_percent # Update parameter consume_user_resource_percent How to delegate resource \u00b6 delegate resource \u00b6 > cdBalance [OwnerAddress] cded_balance cded_duration [ResourceCode:0 BANDWIDTH, 1 UCR] [receiverAddress] The latter two parameters are optional parameters. If not set, the STB is cded to obtain resources for its own use; if it is not empty, the acquired resources are used by receiverAddress. OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. cded_balance The amount of cded STB, the unit is the smallest unit (Unit), the minimum is 1000000unit. cded_duration frezen duration, 3 days ResourceCode 0 BANDWIDTH;1 UCR receiverAddress target account address uncd delegated resource \u00b6 > uncdBalance [OwnerAddress] ResourceCode(0 BANDWIDTH, 1 CPU) [receiverAddress] The latter two parameters are optional. If they are not set, the BANDWIDTH resource is uncd by default; when the receiverAddress is set, the delegate resources are uncdd. get resource delegation information \u00b6 getDelegatedResource fromAddress toAddress get the information from the fromAddress to the toAddress resource delegate getDelegatedResourceAccountIndex address get the information that address is delegated to other account resources Wallet related commands \u00b6 RegisterWallet Register your wallet, you need to set the wallet password and generate the address and private key. BackupWallet Back up your wallet, you need to enter your wallet password and export the private key.hex string format, such as: 721d63b074f18d41c147e04c952ec93467777a30b6f16745bc47a8eae5076545 BackupWallet2Base64 Back up your wallet, you need to enter your wallet password and export the private key.base64 format, such as: ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU= ChangePassword Modify the password of an account ImportWallet Import wallet, you need to set a password, hex String format ImportWalletByBase64 Import wallet, you need to set a password, base64 fromat Account related commands \u00b6 GenerateAddress Generate an address and print out the public and private keys GetAccount Get account information based on address GetAccountNet The usage of bandwidth GetAccountResource The usage of bandwidth and ucr GetAddress Get the address of the current login account GetBalance Get the balance of the current login account How to get transaction information \u00b6 GetTransactionById Get transaction information based on transaction id GetTransactionCountByBlockNum Get the number of transactions in the block based on the block height GetTransactionInfoById Get transaction-info based on transaction id, generally used to check the result of a smart contract trigger GetTransactionInfoByBlockNum Get the list of transaction information in the block based on the block height How to get block information \u00b6 GetBlock Get the block according to the block number; if you do not pass the parameter, get the latest block GetBlockById Get block based on blockID GetBlockByLatestNum n Get the latest n blocks, where 0 < n < 100 GetBlockByLimitNext startBlockId endBlockId Get the block in the range [startBlockId, endBlockId) Some others \u00b6 GetNextMaintenanceTime Get the start time of the next maintain period ListNodes Get other peer information ListExecutives Get all miner node information BroadcastTransaction Broadcast the transaction, where the transaction is in hex string format. How to transfer shielded SRC20 token \u00b6 If you want to try to transfer shielded SRC20 token, you'd better set the blockNumberStartToScan field in config.conf file. This field is used to set the starting block that the wallet needs to scan. If you ignore this field, or set it to 0, the notes you receive will probably take a long time to show up in the wallet. It is recommended that this field is set to the block number in which the earliest relevant shielded contract was created. If the exact number is not known, this field can be set as follows. If used in mainnet, please set 22690588. If used in Nile testnet, please set 6380000. Otherwise, please set 0. When you begin to transfer SRC20 token to shielded address, you must have a shielded address. The following commands help to generate shielded account. GetSpendingKey \u00b6 Generate a sk Example: > GetSpendingKey 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb5f6a GetExpandedSpendingKey \u00b6 > GetExpandedSpendingKey sk Generate ask, nsk, ovk from sk Example: > GetExpandedSpendingKey 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb5f6a ask:252a0f6f6f0bac114a13e1e663d51943f1df9309649400218437586dea78260e nsk:5cd2bc8d9468dbad26ea37c5335a0cd25f110eaf533248c59a3310dcbc03e503 ovk:892a10c1d3e8ea22242849e13f177d69e1180d1d5bba118c586765241ba2d3d6 GetAkFromAsk \u00b6 > GetAkFromAsk ask Generate ak from ask Example: > GetAkFromAsk 252a0f6f6f0bac114a13e1e663d51943f1df9309649400218437586dea78260e ak:f1b843147150027daa5b522dd8d0757ec5c8c146defd8e01b62b34cf917299f1 GetNkFromNsk \u00b6 > GetNkFromNsk nsk Generate nk from nsk Example: > GetNkFromNsk 5cd2bc8d9468dbad26ea37c5335a0cd25f110eaf533248c59a3310dcbc03e503 nk:ed3dc885049f0a716a4de8c08c6cabcad0da3c437202341aa3d9248d8eb2b74a GetIncomingViewingKey \u00b6 > GetIncomingViewingKey ak [ 64 ] nk [ 64 ] Generate ivk from ak and nk Example: > Getincomingviewingkey f1b843147150027daa5b522dd8d0757ec5c8c146defd8e01b62b34cf917299f1 ed3dc885049f0a716a4de8c08c6cabcad0da3c437202341aa3d9248d8eb2b74a ivk:148cf9e91f1e6656a41dc9b6c6ee4e52ff7a25b25c2d4a3a3182d0a2cd851205 GetDiversifier \u00b6 Generate a diversifier Example: > GetDiversifier 11db4baf6bd5d5afd3a8b5 GetShieldedPaymentAddress \u00b6 > GetShieldedPaymentAddress ivk [ 64 ] d [ 22 ] Generate a shielded address from ivk and d Example: > GetShieldedPaymentAddress 148cf9e91f1e6656a41dc9b6c6ee4e52ff7a25b25c2d4a3a3182d0a2cd851205 11db4baf6bd5d5afd3a8b5 pkd:65c11642115d386ed716b9cc06a3498e86e303d7f20d0869c9de90e31322ac15 shieldedAddress:zstabila1z8d5htmt6h26l5agk4juz9jzz9wnsmkhz6uucp4rfx8gdccr6leq6zrfe80fpccny2kp2cray8z SetShieldedSRC20ContractAddress \u00b6 > SetShieldedSRC20ContractAddress SRC20ContractAddress ShieldedContractAddress SRC20ContractAddress SRC20 contract address ShieldedContractAddress Shielded contract address Set SRC20 contract address and shielded contract address. Please execute this command before you perform all the following operations related to the shielded transaction of SRC20 token except ScanShieldedSRC20NoteByIvk and ScanShieldedSRC20NoteByOvk . When you execute this command, the Scaling Factor will be shown. The Scaling Factor is set in the shielded contract. Example: > SetShieldedSRC20ContractAddress SLDxNTzNvEPd4gHox8V1zK2w82LFnideKE SKERuAmhJh8vZi1dzJtx8926xeCT74747e scalingFactor():ed3437f8 SetShieldedSRC20ContractAddress succeed! The Scaling Factor is 1000 That means: No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 LoadShieldedSRC20Wallet \u00b6 Load SRC20 shielded address, shielded note and start to scan by ivk. Example: > LoadShieldedSRC20Wallet Please input your password for shieldedSRC20 wallet. > ******* LoadShieldedSRC20Wallet successful !!! GenerateShieldedSRC20Address \u00b6 > GenerateShieldedSRC20Address number number The number of SRC20 shielded addresses, the default is 1. Generate SRC20 shielded addresses. Example: > GenerateShieldedSRC20Address 3 ShieldedSRC20Address list: zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq GenerateShieldedSRC20Address successful !!! ListShieldedSRC20Address \u00b6 Display cached local SRC20 shielded address list. Example: > ListShieldedSRC20Address ShieldedSRC20Address : zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 SendShieldedSRC20Coin \u00b6 SendShieldedSRC20Coin fromAmount shieldedInputNum input1 input2 ... publicToAddress toAmount shieldedOutputNum shieldedAddress1 amount1 memo1 shieldedAddress2 amount2 memo2 .... Shielded transfer, support three types: MINT: transfer from one public address to one shielded address, fromAmount should be equal to the shielded output amount. When you MINT, you need to enter password twice as prompted, one time is for triggering approve method of SRC20 contract that allows the shielded contract can transfer form your account, and other one is for triggering mint method of shielded contract that executes MINT. It's important to remember that you must use the same public address to trigger these two methods. TRANSFER: transfer from one or two shielded address(es) to one or two shielded address(es), the sum of shielded input amount should be equal to the sum of shielded output amount. When you TRANSFER, you need to enter password of public account as prompted, and this is used to trigger 'transfer' method of shielded contract that executes TRANSFER. BURN: transfer from one shielded address to one public address and one optional shielded address. If there is no shielded output, toAmount should be equal to the shielded input amount , otherwise, the sum of toAmount and shielded output amount should be equal to the shielded input amount. When you BURN, you need to enter password of public account as prompted, and this is used to trigger 'burn' method of shielded contract that executes BURN. It's better to use different accounts to trigger BURN, TRANSFER and MINT. fromAmount The amount transfer from public address. If the transfer type is MINT, this variable must be equal to the shielded output amount, otherwise it must be 0. shieldedInputNum The number of shielded input note, should be 0, 1 or 2. If the transfer type is MINT, this variable must be 0; if BURN, it must be 1. input1/input2 The index of shielded input note, get from executing command ListShieldedSRC20Note. If shieldedInputNum set to 0, no need to set. publicToAddress Public to address. If the transfer type is BURN, this variable must be a valid address, otherwise it should be set null. toAmount The amount transfer to public address. If the transfer type is BURN, this variable must be equal to the shielded input amount, otherwise it should be 0. shieldedOutputNum The amount of shielded output note. That is the number of (shieldedAddress amount memo) pairs, should be 0, 1 or 2. shieldedAddress1/shieldedAddress2 Output shielded address amount1/amount2 The amount transfer to shieldedAddress1/shieldedAddress2 memo1/memo2 The memo of this note, up to 512 bytes, can be set to null if not needed. Example: In this example, the scalingFactor is 1000. MINT In this mode, some variables must be set as follows, shieldedInputNum = 0, publicToAddress = null, toAmount = 0. ```console > SendShieldedSRC20Coin 1000000000000 0 null 0 1 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 null ``` TRANSFER In this mode, some variables must be set as follows, fromAmount = 0, publicToAddress = null,toAmount = 0. Transfer from one shielded address to one shielded address. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 9 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 2000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 1 UnSpend 8 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 0 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 1 8 null 0 1 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 null ``` Transfer from one shielded address to two shielded addresses. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 9 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 2000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 1 UnSpend 10 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 81a06080f2be3f795c506826e066b9bb5327ca234eb31a0ef2446e11339a3935 0 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 1 9 null 0 2 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1500000000000 test1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 null ``` Transfer from two shielded addresses to one shielded address. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 11 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 0 UnSpend test1 10 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 81a06080f2be3f795c506826e066b9bb5327ca234eb31a0ef2446e11339a3935 0 UnSpend 12 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 1 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 2 10 11 null 0 1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2500000000000 null ``` Transfer from two shielded addresses to two shielded addresses. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 13 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2500000000000 6ec74435e32261a6dfe10f9498b3ab5a5cfede7c4e31299752b449b9506efc11 0 UnSpend 12 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 1 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 2 12 13 null 0 2 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1300000000000 null zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 null ``` BURN In this mode, some variables must be set as follows, fromAmount = 0, shieldedInputNum = 1. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 15 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 1 UnSpend 14 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1300000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 0 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 1 14 SDVr15jvAx6maR28tP7RRpxuKZ38tgsyNE 1300000000000000 0 > SendShieldedSRC20Coin 0 1 14 SDVr15jvAx6maR28tP7RRpxuKZ38tgsyNE 300000000000000 1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 1000000000000000 null ``` SendShieldedSRC20CoinWithoutAsk \u00b6 Usage and parameters are consistent with the command SendShieldedSRC20Coin, the only difference is that SendShieldedSRC20Coin uses ask for signature, but SendShieldedSRC20CoinWithoutAsk uses ak. ListShieldedSRC20Note \u00b6 > ListShieldedSRC20Note type type Shows the type of note. If the variable is omitted or set to 0, it shows all unspent notes; For other values, it shows all the notes, including spent notes and unspent notes. List the note scanned by the local cache address, and the Scaling Factor . NOTE When you load shielded wallet, the wallet will scan blocks to find the notes others send to you in the backend. This will take a long time, so when you run ListShieldedSRC20Note , your notes will not be displayed immediately. Example: > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 15 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 1 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > ListShieldedSRC20Note 1 All notes are shown below: zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 1 15 UnSpent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 dc02678b0cf1c93c557dc805edb776fe79201c77f210f08f60cea5d687b14f2e 0 0 Spent zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 1000000000000 e4d35d147762020078d7d197c98fffde181250e4a637d4bdd9ca809116d74131 0 2 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 1594e1ee06c8420a4f1d80670000cd9268a2ff4e97e3f630909feeb51a9de993 0 3 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 2000000000000 3f035e966b3ef636ae9c0a0f64bff781b1d1a8b52bab5d8124c0f9162f71f68f 0 1 Spent zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 300000000000 6929757cb86cb6cf3e89df19f3212c3e62070b12d8b36de48e663fed214a4082 0 4 Spent test1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2000000000000 e39a1e1d5af7dcbab0d55a63a0c62ec9cc7c0aaf8ce98733802674c3ec1f3a06 0 6 Spent zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq 700000000000 6929757cb86cb6cf3e89df19f3212c3e62070b12d8b36de48e663fed214a4082 1 5 Spent zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq 2300000000000 4ce1ce9f6377ee3cd936757b696ac43ecc39ee6e8a0eab1b8f8ef093e15010f8 0 7 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 0 8 Spent zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 2000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 1 9 Spent zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 81a06080f2be3f795c506826e066b9bb5327ca234eb31a0ef2446e11339a3935 0 10 Spent zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 0 11 Spent test1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 1 12 Spent zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2500000000000 6ec74435e32261a6dfe10f9498b3ab5a5cfede7c4e31299752b449b9506efc11 0 13 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1300000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 0 14 Spent The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 ResetShieldedSRC20Note \u00b6 Clean all the notes scanned, and rescan all blocks. Generally used when there is a problem with the notes or when switching environments. ScanShieldedSRC20NoteByIvk \u00b6 > ScanShieldedSRC20NoteByIvk shieldedSRC20ContractAddress ivk ak nk startNum endNum [ event1 ] [ event2 ] ... shieldedSRC20ContractAddress The address of shielded contract ivk The ivk of shielded address ak The ak of shielded address. Please set this field to null, if you don't care whether the notes are spent or not. nk The nk of shielded address. Please set this field to null, if you don't care whether the notes are spent or not. startNum The starting block number of the scan endNum The end block number of the scan event1/event2 The events you want to scan. These events must be compatible with standard events, that is, MintNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]), TransferNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]) and BurnNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]). If you ignore this field, the command will scan the standard events. In most cases, you can ignore these parameters. Scan notes by ivk, ak and nk. Example: > ScanShieldedSRC20NoteByIvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu fed8fa4714e6a19511760f9b8ed33388f14c626adff26034f4a21557cb928f01 faf63a2d959df05d4441c0fd42262e0a53629c532e8d29501fe94f9d86c51313 66458c23d737a30146533374d7c5c78f3e05f8f158192e8855493cc55cf8953f 5000 5400 [ { note: { value: 100000 payment_address: zstabila12dq4ktrydrxzxrsgpmusp4pe0xawqyz4qfxzsgjdauw99n4n3efnw4kmrptlw8jcrrydx5694mw rcm: a45878a4e0d53f5cac79370fea1bf4aa82c67d3b2f647ac89c2b1e7061ea740a memo: without ask 2v1 } position: 10 is_spent: true tx_id: 5891fd3a8e860b336b7f7d31f64ec52ec5dc76f81b9bb4e4d0fa8a5756a61dd6 } ] > ScanShieldedSRC20NoteByIvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu fed8fa4714e6a19511760f9b8ed33388f14c626adff26034f4a21557cb928f01 faf63a2d959df05d4441c0fd42262e0a53629c532e8d29501fe94f9d86c51313 66458c23d737a30146533374d7c5c78f3e05f8f158192e8855493cc55cf8953f 5000 6000 MintNewLeaf ( uint256,bytes32,bytes32,bytes32,bytes32 [ 21 ]) [ { note: { value: 100000 payment_address: zstabila1z8d5htmt6h26l5agk4ywv86xv3shuv4gjc2rzufyz4s2g5x0035nwrcqmxj4a49n2dy5sq28s5p rcm: 07604b4a8018d353c08f93044df0fc04ef988c2f65f9222eacc8d41f0e095404 memo: mint } position: 16 is_spent: false tx_id: 38d759216f62503c2b8bf7fc9777e6e25f5f77ec22dd760cc03057c4704277a2 } ] > ScanShieldedSRC20NoteByIvk TVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu fed8fa4714e6a19511760f9b8ed33388f14c626adff26034f4a21557cb928f01 faf63a2d959df05d4441c0fd42262e0a53629c532e8d29501fe94f9d86c51313 66458c23d737a30146533374d7c5c78f3e05f8f158192e8855493cc55cf8953f 5000 5400 BurnNewLeaf ( uint256,bytes32,bytes32,bytes32,bytes32 [ 21 ]) [ { note: { value: 100000 payment_address: zstabila12dq4ktrydrxzxrsgpmusp4pe0xawqyz4qfxzsgjdauw99n4n3efnw4kmrptlw8jcrrydx5694mw rcm: a45878a4e0d53f5cac79370fea1bf4aa82c67d3b2f647ac89c2b1e7061ea740a memo: without ask 2v1 } position: 10 is_spent: true tx_id: 5891fd3a8e860b336b7f7d31f64ec52ec5dc76f81b9bb4e4d0fa8a5756a61dd6 } ] ScanShieldedSRC20NoteByOvk \u00b6 > ScanShieldedSRC20NoteByOvk shieldedSRC20ContractAddress ovk startNum endNum [ event1 ] [ event2 ] ... shieldedSRC20ContractAddress The address of shielded contract ovk the ovk of shielded address startNum The starting block number of the scan endNum The end block number of the scan event1/event2 The event you want to scan. These events must be compatible with standard events, that is, MintNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]), TransferNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]), BurnNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]) and TokenBurn(address,uint256,bytes32[3]). If you ignore this field, the command will scan the standard events. Scan notes by ovk Example: > ScanShieldedSRC20NoteByOvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu 4b33fc947a53a5e2a1d1636b323f7f6cecff8c34c9fc511ccc7cfaf0dd6f4c03 5000 6000 [ { note: { value: 60000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 50698dc3c97fb4d2c818b62de2265a271eb9a58b5dd65074122ddf4d794c6b03 memo: 1 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { note: { value: 40000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 94afb02c6fd4b19ada89b6b85e2cc23f2fb76c5188ede646c5046b2539a3bf00 memo: 2 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { transparent_to_address: SV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32 transparent_amount: 130000 tx_id: d45da3394be6c15220d31ac17c13e02130aab0c3edf97750620538f4efae366b } ] > ScanShieldedSRC20NoteByOvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu 4b33fc947a53a5e2a1d1636b323f7f6cecff8c34c9fc511ccc7cfaf0dd6f4c03 5000 6000 BurnNewLeaf ( uint256,bytes32,bytes32,bytes32,bytes32 [ 21 ]) TokenBurn ( address,uint256,bytes32 [ 3 ]) [ { note: { value: 60000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 50698dc3c97fb4d2c818b62de2265a271eb9a58b5dd65074122ddf4d794c6b03 memo: 1 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { note: { value: 40000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 94afb02c6fd4b19ada89b6b85e2cc23f2fb76c5188ede646c5046b2539a3bf00 memo: 2 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { transparent_to_address: SV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32 transparent_amount: 130000 tx_id: d45da3394be6c15220d31ac17c13e02130aab0c3edf97750620538f4efae366b } ] BackupShieldedSRC20Wallet \u00b6 Back up one shielded address. Example: > BackupShieldedSRC20Wallet Please input your password for shieldedSRC20 wallet. password: The 1th shieldedSRC20 address is zstabila1mf0a0cy86j8rmn4l7dcdsnhyj2k46rem4qxwjqh4z0x26utlddtmmr5fk5dchzt2hpujyvgk69z The 2th shieldedSRC20 address is zstabila1mnkdjl0802dqha9ufh4m80f2ua9cff2hct8geeh77llrz4ywgtu0ct8ygy6k5xavdkd278jyttj The 3th shieldedSRC20 address is zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 Please choose between 1 and 3 1 sk:01ef2d71f8eef668e12db7aef1267c7d6a8f43c84dffa66fc09e2c749464190e d :da5fd7e087d48e3dcebff3 BackupShieldedSRC20Wallet successful !!! ImportShieldedSRC20Wallet \u00b6 Import one shielded address to local wallet. Example: > ImportShieldedSRC20Wallet ShieldedSRC20 wallet does not exist, will build it. Please input password. password: Please input password again. password: Please input shieldedSRC20 wallet hex string. such as 'sk d',Max retry time:3 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb000a 11db4baf6bd5d5afd3a8b5 Import shieldedSRC20 wallet hex string is : sk:0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb000a d :11db4baf6bd5d5afd3a8b5 Import new shieldedSRC20 wallet address is: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 ImportShieldedSRC20Wallet successfully !!! ShowShieldedSRC20AddressInfo \u00b6 > ShowShieldedSRC20AddressInfo address Display information about shielded addresses. If this address is not in the wallet, it will only display d and pkd Example: > ListShieldedSRC20Address ShieldedSRC20Address : zstabila1mf0a0cy86j8rmn4l7dcdsnhyj2k46rem4qxwjqh4z0x26utlddtmmr5fk5dchzt2hpujyvgk69z zstabila1mnkdjl0802dqha9ufh4m80f2ua9cff2hct8geeh77llrz4ywgtu0ct8ygy6k5xavdkd278jyttj zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 > ShowShieldedSRC20AddressInfo zstabila1mf0a0cy86j8rmn4l7dcdsnhyj2k46rem4qxwjqh4z0x26utlddtmmr5fk5dchzt2hpujyvgk69z The following variables are secret information, please don't show to other people!!! sk :01ef2d71f8eef668e12db7aef1267c7d6a8f43c84dffa66fc09e2c749464190e ivk:7d2e9c14ff1d82843f39cb69e8bcc228370e4ea8750669bba79e90c485d94c03 ovk:2c3d164fffa63b41a34f495e0c9d8af79d595cfb07db1539545ddcecf046d66e pkd:70d84ee492ad5d0f3ba80ce902f513ccad717f6b57bd8e89b51b8b896ab87922 d :da5fd7e087d48e3dcebff3 > ShowShieldedSRC20AddressInfo zstabila1z8d5htmt6h26l5agk8r7wxw9pyhc0a78hl5thva4k9kcn7fsqvygchyt3n2ncy0r4xv4j5mywnu pkd:c7e719c5092f87f7c7bfe8bbb3b5b16d89f93003088c5c8b8cd53c11e3a99959 d :11db4baf6bd5d5afd3a8b1 How to use stabila-dex to sell asset \u00b6 MarketSellAsset \u00b6 Create an order to sell asset MarketSellAsset owner_address sell_token_id sell_token_quantity buy_token_id buy_token_quantity ownerAddress The address of the account that initiated the transaction sell_token_id, sell_token_quantity ID and amount of the token want to sell buy_token_id, buy_token_quantity ID and amount of the token want to buy Example: MarketSellAsset SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 1000001 200 _ 100 Get the result of the contract execution with the getTransactionInfoById command: getTransactionInfoById 10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374 { \"id\": \"10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374\", \"blockNumber\": 669, \"blockTimeStamp\": 1578983493000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 264 } } GetMarketOrderByAccount \u00b6 Get the order created by account(just include active status) GetMarketOrderByAccount ownerAddress ownerAddress The address of the account that created market order Example: GetMarketOrderByAccount SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW { \"orders\": [ { \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\", \"owner_address\": \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"create_time\": 1578983490000, \"sell_token_id\": \"_\", \"sell_token_quantity\": 100, \"buy_token_id\": \"1000001\", \"buy_token_quantity\": 200, \"sell_token_quantity_remain\": 100 } ] } GetMarketOrderById \u00b6 Get the specific order by order_id GetMarketOrderById orderId Example: GetMarketOrderById fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 { \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\", \"owner_address\": \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"create_time\": 1578983490000, \"sell_token_id\": \"_\", \"sell_token_quantity\": 100, \"buy_token_id\": \"1000001\", \"buy_token_quantity\": 200, } GetMarketPairList \u00b6 Get market pair list Example: GetMarketPairList { \"orderPair\": [ { \"sell_token_id\": \"_\", \"buy_token_id\": \"1000001\" } ] } GetMarketOrderListByPair \u00b6 Get order list by pair GetMarketOrderListByPair sell_token_id buy_token_id sell_token_id ID of the token want to sell buy_token_id ID of the token want to buy Example: GetMarketOrderListByPair _ 1000001 { \"orders\": [ { \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\", \"owner_address\": \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"create_time\": 1578983490000, \"sell_token_id\": \"_\", \"sell_token_quantity\": 100, \"buy_token_id\": \"1000001\", \"buy_token_quantity\": 200, \"sell_token_quantity_remain\": 100 } ] } GetMarketPriceByPair \u00b6 Get market price by pair GetMarketPriceByPair sell_token_id buy_token_id sell_token_id ID of the token want to sell buy_token_id ID of the token want to buy Example: GetMarketPriceByPair _ 1000001 { \"sell_token_id\": \"_\", \"buy_token_id\": \"1000001\", \"prices\": [ { \"sell_token_quantity\": 100, \"buy_token_quantity\": 200 } ] } MarketCancelOrder \u00b6 Cancel the order MarketCancelOrder owner_address order_id owner_address the account address who have created the order order_id the order id which want to cancel Example: MarketCancelOrder SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 Get the result of the contract execution with the getTransactionInfoById command: getTransactionInfoById b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27 { \"id\": \"b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27\", \"blockNumber\": 1582, \"blockTimeStamp\": 1578986232000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 283 } } Suggestions, Feedback & Issues \u00b6 If you have a suggestion for improvement, feedback about a specific feature or any issue please contact us at info@stabilascan.org","title":"Wallet-cli"},{"location":"clients/wallet-cli/#wallet-cli","text":"","title":"Wallet-cli"},{"location":"clients/wallet-cli/#usage-guide","text":"","title":"Usage Guide"},{"location":"clients/wallet-cli/#download-wallet-cli","text":"git clone https://github.com/stabilaprotocol/wallet-cli.git","title":"Download wallet-cli"},{"location":"clients/wallet-cli/#edit-configconf-in-srcmainresources","text":"net { type = mainnet } fullnode = { ip.list = [ \"fullnode ip : port\" ] } soliditynode = { // the IPs in this list can only be totally set to solidity or pBFT. ip.list = [ \"ip : solidity port\" // default solidity ] # ip.list = [ # \"ip : pBFT port\" // or pBFT # ] } // NOTE: solidity node is optional blockNumberStartToScan = 22690588 // NOTE: this field is optional","title":"Edit config.conf in src/main/resources"},{"location":"clients/wallet-cli/#run-a-web-wallet","text":"connect to fullNode Take a look at: java-stabila deployment NOTE: The wallet-cli node would consume a lot of memory and CPU. Please be aware if you do not use wallet, just kill them. - compile and run web wallet ```console $ cd wallet-cli $ ./gradlew build $ cd build/libs $ java -jar wallet-cli.jar ```","title":"Run a web wallet"},{"location":"clients/wallet-cli/#connect-to-java-stabila","text":"Wallet-cli connect to java-stabila via gRPC protocol, which can be deployed locally or remotely. Check Run a web Wallet section. We can configure java-stabila node IP and port in src/main/resources/config.conf , so that wallet-cli server can successfully talk to java-stabila nodes.","title":"Connect to java-stabila"},{"location":"clients/wallet-cli/#wallet-cli-supported-command-list","text":"Following is a list of Stabila Wallet-cli commands: For more information on a specific command, just type the command on terminal when you start your Wallet-cli. AddTransactionSign ApproveProposal AssetIssue BackupShieldedSRC20Wallet BackupWallet BackupWallet2Base64 BroadcastTransaction ChangePassword CreateProposal DeleteProposal DeployContract ExchangeCreate ExchangeInject ExchangeTransaction ExchangeWithdraw CdBalance GenerateAddress GenerateShieldedSRC20Address GetAccount GetAccountNet GetAccountResource GetAddress GetAkFromAsk GetAssetIssueByAccount GetAssetIssueById GetAssetIssueByName GetAssetIssueListByName GetBalance GetBlock GetBlockById GetBlockByLatestNum GetBlockByLimitNext GetBrokerage GetContract GetDelegatedResource GetDelegatedResourceAccountIndex GetDiversifier GetExpandedSpendingKey GetIncomingViewingKey GetMarketOrderByAccount GetMarketOrderById GetMarketOrderListByPair GetMarketPairList GetMarketPriceByPair GetNextMaintenanceTime GetNkFromNsk GetProposal GetShieldedPaymentAddress GetSpendingKey GetReward GetTransactionApprovedList GetTransactionById GetTransactionCountByBlockNum GetTransactionInfoByBlockNum GetTransactionInfoById GetTransactionSignWeight ImportShieldedSRC20Wallet ImportWallet ImportWalletByBase64 ListAssetIssue ListExchanges ListExchangesPaginated ListNodes ListShieldedSRC20Address ListShieldedSRC20Note ListProposals ListProposalsPaginated ListExecutives LoadShieldedSRC20Wallet Login MarketCancelOrder MarketSellAsset ParticipateAssetIssue RegisterWallet ResetShieldedSRC20Note ScanShieldedSRC20NoteByIvk ScanShieldedSRC20NoteByOvk SendCoin SendShieldedSRC20Coin SendShieldedSRC20CoinWithoutAsk SetShieldedSRC20ContractAddress ShowShieldedSRC20AddressInfo TransferAsset TriggerContract UncdAsset UncdBalance UpdateAsset UpdateBrokerage UpdateUcrLimit UpdateSetting UpdateAccountPermission VoteExecutive","title":"Wallet-cli supported command list"},{"location":"clients/wallet-cli/#how-to-cduncd-balance","text":"After the funds are cded, the corresponding number of shares and bandwidth will be obtained. Shares can be used for voting and bandwidth can be used for trading. The rules for the use and calculation of share and bandwidth are described later in this article. Cd operation is as follows: > cdBalance [ OwnerAddress ] cded_balance cded_duration [ ResourceCode:0 BANDWIDTH, 1 UCR ] [ receiverAddress ] OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. cded_balance The amount of cded funds, the unit is Unit. The minimum value is 1000000 Unit(1STB) . cded_duration Cd time, this value is currently only allowed for 3 days . For example: > cdBalance 100000000 3 1 address After the cd operation, cded funds will be transferred from Account Balance to Cded, You can view cded funds from your account information. After being uncded, it is transferred back to Balance by Cded, and the cded funds cannot be used for trading. When more share or bandwidth is needed temporarily, additional funds may be cded to obtain additional share and bandwidth. The uncded time is postponed until 3 days after the last cd operation After the freezing time expires, funds can be unfroze. Uncd operation is as follows: > uncdBalance [ OwnerAddress ] ResourceCode ( 0 BANDWIDTH, 1 CPU ) [ receiverAddress ]","title":"How to cd/uncd balance"},{"location":"clients/wallet-cli/#how-to-vote","text":"Voting requires share. Share can be obtained by freezing funds. The share calculation method is: 1 unit of share can be obtained for every 1STB cded. After unfreezing, previous vote will expire. You can avoid the invalidation of the vote by re-freezing and voting. NOTE The Stabila Network only records the status of your last vote, which means that each of your votes will overwrite all previous voting results. For example: > cdBalance 100000000 3 1 address # Cd 10STB and acquire 10 units of shares > voteexecutive 123455 executive1 4 executive2 6 # Cast 4 votes for executive1 and 6 votes for executive2 at the same time > voteexecutive 123455 executive1 10 # Voted 10 votes for executive1 The final result of the above command was 10 votes for executive1 and 0 vote for executive2.","title":"How to vote"},{"location":"clients/wallet-cli/#brokerage","text":"After voting for the executive, you will receive the rewards. The executive has the right to decide the ratio of brokerage. The default ratio is 20%, and the executive can adjust it. By default, if a executive is rewarded, he will receive 20% of the whole rewards, and 80% of the rewards will be distributed to his voters.","title":"Brokerage"},{"location":"clients/wallet-cli/#getbrokerage","text":"View the ratio of brokerage of the executive. > getbrokerage OwnerAddress OwnerAddress The address of the executive's account, it is a base58check type address.","title":"GetBrokerage"},{"location":"clients/wallet-cli/#getreward","text":"Query unclaimed reward. > getreward OwnerAddress OwnerAddress The address of the voter's account, it is a base58check type address.","title":"GetReward"},{"location":"clients/wallet-cli/#updatebrokerage","text":"Update the ratio of brokerage, this command is usually used by a executive account. > updateBrokerage OwnerAddress brokerage OwnerAddress The address of the executive's account, it is a base58check type address. brokerage The ratio of brokerage you want to update to, the limit of it: 0-100. For example: > getbrokerage SZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h > getreward SNfu3u8jo1LDWerHGbzs2Pv88Biqd85wEY > updateBrokerage SZ7U1WVBRLZ2umjizxqz3XfearEHhXKX7h 30","title":"UpdateBrokerage"},{"location":"clients/wallet-cli/#how-to-calculate-bandwidth","text":"The bandwidth calculation rule is: constant * CdedFunds * days Assuming cd 1STB\uff081_000_000 Unit), 3 days, bandwidth obtained = 1 * 1_000_000 * 3 = 3_000_000. All contracts consume bandwidth, including transferring, transferring of assets, voting, freezing, etc. Querying does not consume bandwidth. Each contract needs to consume 100_000 bandwidth . If a contract exceeds a certain time ( 10s ), this operation does not consume bandwidth. When the unfreezing operation occurs, the bandwidth is not cleared. The next time the cd is performed, the newly added bandwidth is accumulated.","title":"How to calculate bandwidth"},{"location":"clients/wallet-cli/#how-to-withdraw-balance","text":"After each block is produced, the block award is sent to the account's allowance, and a withdraw operation is allowed every 24 hours from allowance to balance. The funds in allowance cannot be locked or traded.","title":"How to withdraw balance"},{"location":"clients/wallet-cli/#how-to-create-executive","text":"Applying to become a executive account needs to consume 100_000STB . This part of the funds will be burned directly.","title":"How to create executive"},{"location":"clients/wallet-cli/#how-to-create-account","text":"It is not allowed to create accounts directly. You can only create accounts by transferring funds to non-existing accounts. Transferring to a non-existent account has minimum restriction amount of 1STB .","title":"How to create account"},{"location":"clients/wallet-cli/#command-line-operation-flow-example","text":"$ cd wallet-cli $ ./gradlew build $ ./gradlew run > RegisterWallet 123456 ( password = 123456 ) > login 123456 > getAddress address = SRfwwLDpr4excH4V4QzghLEsdYwkapTxnm' # backup it! > BackupWallet 123456 priKey = 075725cf903fc1f6d6267b8076fc2c6adece0cfd18626c33427d9b2504ea3cef' # backup it!!! (BackupWallet2Base64 option) > getbalance Balance = 0 > AssetIssue TestSTB STB 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1 > getaccount SRfwwLDpr4excH4V4QzghLEsdYwkapTxnm (Print balance: 9999900000 \"assetV2\": [ { \"key\": \"1000001\", \"value\": 74999999999980000 } ],) # ( cost stb 1000 stb for assetIssue ) # ( You can query the stb balance and other asset balances for any account ) > TransferAsset SWzrEZYtwzkAxXJ8PatVrGuoSNsexejRiM 1000001 10000","title":"Command line operation flow example"},{"location":"clients/wallet-cli/#how-to-issue-a-src10-token","text":"Each account can only issue ONE SRC10 token.","title":"How to issue a SRC10 token"},{"location":"clients/wallet-cli/#issue-src10-tokens","text":"> AssetIssue [OwnerAddress] AssetName AbbrName TotalSupply StbNum AssetNum Precision StartDate EndDate Description Url FreeNetLimitPerAccount PublicFreeNetLimit CdedAmount0 CdedDays0 [...] CdedAmountN CdedDaysN OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. AssetName The name of the issued SRC10 token AbbrName The abbreviation of SRC10 token TotalSupply TotalSupply = Account Balance of Issuer + All Cded Token Amount TotalSupply: Total Issuing Amount Account Balance Of Issuer: At the time of issuance All Cded Token Amount: Before asset transfer and the issuance StbNum, AssetNum These two parameters determine the exchange rate when the token is issued. Exchange Rate = StbNum / AssetNum AssetNum: Unit in base unit of the issued token StbNum: Unit in UNIT (0.000001 STB) Precision Precision to how many decimal places FreeNetLimitPerAccount The maximum amount of bandwidth each account is allowed to use. Token issuers can cd STB to obtain bandwidth (TransferAssetContract only) PublicFreeNetLimit The maximum total amount of bandwidth which is allowed to use for all accounts. Token issuers can cd STB to obtain bandwidth (TransferAssetContract only) StartDate, EndDate The start and end date of token issuance. Within this period time, other users can participate in token issuance. CdedAmount0 CdedDays0 Amount and days of token cd. CdedAmount0: Must be bigger than 0 CdedDays0: Must between 1 and 3653. Example: > AssetIssue TestSTB STB 75000000000000000 1 1 2 \"2019-10-02 15:10:00\" \"2020-07-11\" \"just for test121212\" www.test.com 100 100000 10000 10 10000 1 > GetAssetIssueByAccount SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # View published information { \"assetIssue\": [ { \"owner_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"name\": \"TestSTB\", \"abbr\": \"STB\", \"total_supply\": 75000000000000000, \"cded_supply\": [ { \"cded_amount\": 10000, \"cded_days\": 1 }, { \"cded_amount\": 10000, \"cded_days\": 10 } ], \"stb_num\": 1, \"precision\": 2, \"num\": 1, \"start_time\": 1570000200000, \"end_time\": 1594396800000, \"description\": \"just for test121212\", \"url\": \"www.test.com\", \"free_asset_net_limit\": 100, \"public_free_asset_net_limit\": 100000, \"id\": \"1000001\" } ] }","title":"Issue SRC10 tokens"},{"location":"clients/wallet-cli/#update-parameters-of-src10-token","text":"> UpdateAsset [OwnerAddress] newLimit newPublicLimit description url Specific meaning of the parameters is the same as that of AssetIssue. Example: > UpdateAsset 1000 1000000 \"change description\" www.changetest.com > GetAssetIssueByAccount SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ # View the modified information { \"assetIssue\": [ { \"owner_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"name\": \"TestSTB\", \"abbr\": \"STB\", \"total_supply\": 75000000000000000, \"cded_supply\": [ { \"cded_amount\": 10000, \"cded_days\": 1 }, { \"cded_amount\": 10000, \"cded_days\": 10 } ], \"stb_num\": 1, \"precision\": 2, \"num\": 1, \"start_time\": 1570000200000, \"end_time\": 1594396800000, \"description\": \"change description\", \"url\": \"www.changetest.com\", \"free_asset_net_limit\": 1000, \"public_free_asset_net_limit\": 1000000, \"id\": \"1000001\" } ] }","title":"Update parameters of SRC10 token"},{"location":"clients/wallet-cli/#src10-token-transfer","text":"> TransferAsset [OwnerAddress] ToAddress AssertID Amount OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. ToAddress Address of the target account AssertName SRC10 token ID Example: 1000001 Amount The number of SRC10 token to transfer Example: > TransferAsset SN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz 1000001 1000 > getaccount SN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz # View target account information after the transfer address: SN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 }","title":"SRC10 token transfer"},{"location":"clients/wallet-cli/#participating-in-the-issue-of-src10-token","text":"> ParticipateAssetIssue [OwnerAddress] ToAddress AssetID Amount OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. ToAddress Account address of SRC10 issuers AssertName SRC10 token ID Example: 1000001 Amount The number of SRC10 token to transfers The participation process must happen during the release of SRC10, otherwise an error may occur. Example: > ParticipateAssetIssue SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 1000001 1000 > getaccount SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW # View remaining balance address: SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 }","title":"Participating in the issue of SRC10 token"},{"location":"clients/wallet-cli/#uncd-src10-token","text":"To uncd all SRC10 token which are supposed to be uncded after the freezing period. > uncdasset [OwnerAddress]","title":"Uncd SRC10 token"},{"location":"clients/wallet-cli/#how-to-obtain-src10-token-information","text":"ListAssetIssue Obtain all of the published SRC10 token information GetAssetIssueByAccount Obtain SRC10 token information based on issuing address GetAssetIssueById Obtain SRC10 token Information based on ID GetAssetIssueByName Obtain SRC10 token Information based on names GetAssetIssueListByName Obtain a list of SRC10 token information based on names","title":"How to obtain SRC10 token information"},{"location":"clients/wallet-cli/#how-to-operate-with-proposal","text":"Any proposal-related operations, except for viewing operations, must be performed by committee members.","title":"How to operate with proposal"},{"location":"clients/wallet-cli/#initiate-a-proposal","text":"> createProposal [OwnerAddress] id0 value0 ... idN valueN OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. id0 The serial number of the parameter. Every parameter of STABILA network has a serial number. Please refer to \"http://stabilascan.org/#/sr/committee\" Value0 The modified value In the example, modification No.4 (modifying token issuance fee) costs 1000STB as follows: > createProposal 4 1000 > listproposals # View initiated proposal { \"proposals\": [ { \"proposal_id\": 1, \"proposer_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"parameters\": [ { \"key\": 4, \"value\": 1000 } ], \"expiration_time\": 1567498800000, \"create_time\": 1567498308000 } ] } The corresponding id is 1.","title":"Initiate a proposal"},{"location":"clients/wallet-cli/#approve-disapprove-a-proposal","text":"> approveProposal [OwnerAddress] id is_or_not_add_approval OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. id ID of the initiated proposal Example: 1 is_or_not_add_approval true for approve; false for disapprove Example: > ApproveProposal 1 true # in favor of the offer > ApproveProposal 1 false # Cancel the approved proposal","title":"Approve / Disapprove a proposal"},{"location":"clients/wallet-cli/#delete-an-existing-proposal","text":"> deleteProposal [OwnerAddress] proposalId proposalId ID of the initiated proposal Example: 1 The proposal must be canceled by the supernode that initiated the proposal. Example\uff1a > DeleteProposal 1","title":"Delete an existing proposal"},{"location":"clients/wallet-cli/#obtain-proposal-information","text":"ListProposals Obtain a list of initiated proposals ListProposalsPaginated Use the paging mode to obtain the initiated proposal GetProposal Obtain proposal information based on the proposal ID","title":"Obtain proposal information"},{"location":"clients/wallet-cli/#how-to-trade-on-the-exchange","text":"The trading and price fluctuations of trading pairs are in accordance with the Bancor Agreement .","title":"How to trade on the exchange"},{"location":"clients/wallet-cli/#create-a-trading-pair","text":"> exchangeCreate [OwnerAddress] first_token_id first_token_balance second_token_id second_token_balance OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. First_token_id, first_token_balance ID and amount of the first token second_token_id, second_token_balance ID and amount of the second token The ID is the ID of the issued SRC10 token. If it is STB, the ID is \"_\". The amount must be greater than 0, and less than 1,000,000,000,000,000. Example: > exchangeCreate 1000001 10000 _ 10000 # Create trading pairs with the IDs of 1000001 and STB, with amount 10000 for both.","title":"Create a trading pair"},{"location":"clients/wallet-cli/#capital-injection","text":"> exchangeInject [OwnerAddress] exchange_id token_id quant OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. exchange_id The ID of the trading pair to be funded token_id, quant TokenId and quantity (unit in base unit) of capital injection When conducting a capital injection, depending on its quantity (quant), a proportion of each token in the trading pair will be withdrawn from the account, and injected into the trading pair. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary.","title":"Capital injection"},{"location":"clients/wallet-cli/#transactions","text":"> exchangeTransaction [OwnerAddress] exchange_id token_id quant expected OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. exchange_id ID of the trading pair token_id, quant The ID and quantity of tokens being exchanged, equivalent to selling expected Expected quantity of another token expected must be less than quant, or an error will be reported. Example\uff1a > ExchangeTransaction 1 1000001 100 80 It is expected to acquire the 80 STB by exchanging 1000001 from the trading pair ID of 1, and the amount is 100.(Equivalent to selling an amount of 100 tokenID - 1000001, at a price of 80 STB, in trading pair ID - 1).","title":"Transactions"},{"location":"clients/wallet-cli/#capital-withdrawal","text":"> exchangeWithdraw [OwnerAddress] exchange_id token_id quant OwnerAddress (optional) The address of the account which initiated the transaction. Default: the address of the login account. Exchange_id The ID of the trading pair to be withdrawn Token_id, quant TokenId and quantity (unit in base unit) of capital withdrawal When conducting a capital withdrawal, depending on its quantity (quant), a proportion of each token in the transaction pair is withdrawn from the trading pair, and injected into the account. Depending on the difference in the balance of the transaction, the same amount of money for the same token would vary.","title":"Capital Withdrawal"},{"location":"clients/wallet-cli/#obtain-information-on-trading-pairs","text":"ListExchanges List trading pairs ListExchangesPaginated List trading pairs by page","title":"Obtain information on trading pairs"},{"location":"clients/wallet-cli/#how-to-use-the-multi-signature-feature-of-wallet-cli","text":"Multi-signature allows other users to access the account in order to better manage it. There are three types of accesses: owner: access to the owner of account active: access to other features of accounts, and access that authorizes a certain feature. Block production authorization is not included if it's for executive purposes. executive: only for executive, block production authorization will be granted to one of the other users. The rest of the users will be granted > Updateaccountpermission SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ \\ { \"owner_permission\": { \"type\": 0, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [ { \"address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"executive_permission\": { \"type\": 1, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [ { \"address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"active_permissions\": [ { \"type\": 2, \"permission_name\": \"active12323\", \"threshold\": 2, \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", \"keys\": [ { \"address\": \"SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\", \"weight\": 1 }, { \"address\": \"SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\", \"weight\": 1 } ] } ] } The account SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ gives the owner access to itself, active access to SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR and TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP. Active access will need signatures from both accounts in order to take effect. If the account is not a executive, it's not necessary to set executive_permission, otherwise an error will occur.","title":"How to use the multi-signature feature of wallet-cli?"},{"location":"clients/wallet-cli/#signed-transaction","text":"> SendCoin SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 10000000000000000 Will show \"Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancel transaction.\" This will require the transfer authorization of active access. Enter: 2 Then select accounts and put in local password, i.e. SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR needs a private key SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR to sign a transaction. Select another account and enter the local password. i.e. SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP will need a private key of SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP to sign a transaction. The weight of each account is 1, threshold of access is 2. When the requirements are met, users will be notified with \u201cSend 10000000000000000 Unit to SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW successful !!\u201d. This is how multiple accounts user multi-signature when using the same cli. Use the instruction addTransactionSign according to the obtained transaction hex string if signing at multiple cli. After signing, the users will need to broadcast final transactions manually.","title":"Signed transaction"},{"location":"clients/wallet-cli/#obtain-weight-information-according-to-transaction","text":"> getTransactionSignWeight 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 The information displays as follows: { \"result\" :{ \"code\" : \"PERMISSION_ERROR\" , \"message\" : \"Signature count is 2 more than key counts of permission : 1\" }, \"permission\" :{ \"operations\" : \"7fff1fc0033e0100000000000000000000000000000000000000000000000000\" , \"keys\" :[ { \"address\" : \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"weight\" : 1 } ], \"threshold\" : 1 , \"id\" : 2 , \"type\" : \"Active\" , \"permission_name\" : \"active\" }, \"transaction\" :{ \"result\" :{ \"result\" : true }, \"txid\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"transaction\" :{ \"signature\" :[ \"c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01\" , \"3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101\" ], \"txID\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"amount\" : 10000000000000000 , \"owner_address\" : \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"to_address\" : \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" }, \"type\" : \"TransferContract\" , \"Permission_id\" : 2 } ], \"ref_block_bytes\" : \"0318\" , \"ref_block_hash\" : \"60e195d3609c8661\" , \"expiration\" : 1554123306262 , \"timestamp\" : 1554101706260 }, \"raw_data_hex\" : \"0a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d\" } } }","title":"Obtain weight information according to transaction"},{"location":"clients/wallet-cli/#get-signature-information-according-to-transactions","text":"> getTransactionApprovedList 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 { \"result\" :{ }, \"approved_list\" :[ \"SKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\" , \"SNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\" ], \"transaction\" :{ \"result\" :{ \"result\" : true }, \"txid\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"transaction\" :{ \"signature\" :[ \"c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01\" , \"3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101\" ], \"txID\" : \"7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"amount\" : 10000000000000000 , \"owner_address\" : \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\" , \"to_address\" : \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\" : \"type.googleapis.com/protocol.TransferContract\" }, \"type\" : \"TransferContract\" , \"Permission_id\" : 2 } ], \"ref_block_bytes\" : \"0318\" , \"ref_block_hash\" : \"60e195d3609c8661\" , \"expiration\" : 1554123306262 , \"timestamp\" : 1554101706260 }, \"raw_data_hex\" : \"0a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d\" } } }","title":"Get signature information according to transactions"},{"location":"clients/wallet-cli/#how-to-use-smart-contract","text":"","title":"How to use smart contract"},{"location":"clients/wallet-cli/#deploy-smart-contracts","text":"> DeployContract [ownerAddress] contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent origin_ucr_limit value token_value token_id(e.g: STBTOKEN, use # if don't provided) <library:address,library:address,...> <lib_compiler_version(e.g:v5)> library:address,...> OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. contractName Name of smart contract ABI Compile generated ABI code byteCode Compile generated byte code constructor, params, isHex Define the format of the bytecode, which determines the way to parse byteCode from parameters fee_limit Transaction allows for the most consumed STB consume_user_resource_percent Percentage of user resource consumed, in the range [0, 100] origin_ucr_limit The most amount of developer Ucr consumed by trigger contract once value The amount of stb transferred to the contract account token_value Number of STB10 token_id STB10 Id Example: > deployContract normalcontract544 [{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\": \"findArgsByIndexTest\",\"outputs\":[{\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}] 608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029 # # false 1000000000 75 50000 0 0 # Get the result of the contract execution with the getTransactionInfoById command: > getTransactionInfoById 4978dc64ff746ca208e51780cce93237ee444f598b24d5e9ce0da885fb3a3eb9 { \"id\": \"8c1f57a5e53b15bb0a0a0a0d4740eda9c31fbdb6a63bc429ec2113a92e8ff361\", \"fee\": 6170500, \"blockNumber\": 1867, \"blockTimeStamp\": 1567499757000, \"contractResult\": [ \"6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\" ], \"contract_address\": \"SJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\", \"receipt\": { \"ucr_fee\": 6170500, \"ucr_usage_total\": 61705, \"net_usage\": 704, \"result\": \"SUCCESS\" } }","title":"deploy smart contracts"},{"location":"clients/wallet-cli/#trigger-smart-contarct","text":"> TriggerContract [ownerAddress] contractAddress method args isHex fee_limit value token_value token_id OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. contractAddress Smart contarct address method The name of function and parameters, please refer to the example args Parameter value, if you want to call receive , pass '#' instead isHex The format of the parameters method and args, is hex string or not fee_limit The most amount of stb allows for the consumption token_value Number of STB10 token_id SRC10 id, If not, use \u2018#\u2019 instead Example: > triggerContract SGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG findArgsByIndexTest ( uint256 ) 0 false 1000000000 0 0 # # Get the result of the contract execution with the getTransactionInfoById command > getTransactionInfoById 7d9c4e765ea53cf6749d8a89ac07d577141b93f83adc4015f0b266d8f5c2dec4 { \"id\": \"de289f255aa2cdda95fbd430caf8fde3f9c989c544c4917cf1285a088115d0e8\", \"fee\": 8500, \"blockNumber\": 2076, \"blockTimeStamp\": 1567500396000, \"contractResult\": [ \"\" ], \"contract_address\": \"SJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\", \"receipt\": { \"ucr_fee\": 8500, \"ucr_usage_total\": 85, \"net_usage\": 314, \"result\": \"REVERT\" }, \"result\": \"FAILED\", \"resMessage\": \"REVERT opcode executed\" }","title":"trigger smart contarct"},{"location":"clients/wallet-cli/#get-details-of-a-smart-contract","text":"> GetContract contractAddress contractAddress smart contract address Example: > GetContract SGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG { \"origin_address\": \"SRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"contract_address\": \"SJMKWmC6mwF1QVax8Sy2AcgT6MqaXmHEds\", \"abi\": { \"entrys\": [ { \"name\": \"findArgsByIndexTest\", \"inputs\": [ { \"name\": \"i\", \"type\": \"uint256\" } ], \"outputs\": [ { \"name\": \"z\", \"type\": \"uint256\" } ], \"type\": \"Function\", \"stateMutability\": \"Nonpayable\" } ] }, \"bytecode\": \"608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029\", \"consume_user_resource_percent\": 75, \"name\": \"normalcontract544\", \"origin_ucr_limit\": 50000, \"code_hash\": \"23423cece3b4866263c15357b358e5ac261c218693b862bcdb90fa792d5714e6\" }","title":"get details of a smart contract"},{"location":"clients/wallet-cli/#update-smart-contract-parameters","text":"> UpdateUcrLimit [ownerAddress] contract_address ucr_limit # Update parameter ucr_limit > UpdateSetting [ownerAddress] contract_address consume_user_resource_percent # Update parameter consume_user_resource_percent","title":"update smart contract parameters"},{"location":"clients/wallet-cli/#how-to-delegate-resource","text":"","title":"How to delegate resource"},{"location":"clients/wallet-cli/#delegate-resource","text":"> cdBalance [OwnerAddress] cded_balance cded_duration [ResourceCode:0 BANDWIDTH, 1 UCR] [receiverAddress] The latter two parameters are optional parameters. If not set, the STB is cded to obtain resources for its own use; if it is not empty, the acquired resources are used by receiverAddress. OwnerAddress The address of the account that initiated the transaction, optional, default is the address of the login account. cded_balance The amount of cded STB, the unit is the smallest unit (Unit), the minimum is 1000000unit. cded_duration frezen duration, 3 days ResourceCode 0 BANDWIDTH;1 UCR receiverAddress target account address","title":"delegate resource"},{"location":"clients/wallet-cli/#uncd-delegated-resource","text":"> uncdBalance [OwnerAddress] ResourceCode(0 BANDWIDTH, 1 CPU) [receiverAddress] The latter two parameters are optional. If they are not set, the BANDWIDTH resource is uncd by default; when the receiverAddress is set, the delegate resources are uncdd.","title":"uncd delegated resource"},{"location":"clients/wallet-cli/#get-resource-delegation-information","text":"getDelegatedResource fromAddress toAddress get the information from the fromAddress to the toAddress resource delegate getDelegatedResourceAccountIndex address get the information that address is delegated to other account resources","title":"get resource delegation information"},{"location":"clients/wallet-cli/#wallet-related-commands","text":"RegisterWallet Register your wallet, you need to set the wallet password and generate the address and private key. BackupWallet Back up your wallet, you need to enter your wallet password and export the private key.hex string format, such as: 721d63b074f18d41c147e04c952ec93467777a30b6f16745bc47a8eae5076545 BackupWallet2Base64 Back up your wallet, you need to enter your wallet password and export the private key.base64 format, such as: ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU= ChangePassword Modify the password of an account ImportWallet Import wallet, you need to set a password, hex String format ImportWalletByBase64 Import wallet, you need to set a password, base64 fromat","title":"Wallet related commands"},{"location":"clients/wallet-cli/#account-related-commands","text":"GenerateAddress Generate an address and print out the public and private keys GetAccount Get account information based on address GetAccountNet The usage of bandwidth GetAccountResource The usage of bandwidth and ucr GetAddress Get the address of the current login account GetBalance Get the balance of the current login account","title":"Account related commands"},{"location":"clients/wallet-cli/#how-to-get-transaction-information","text":"GetTransactionById Get transaction information based on transaction id GetTransactionCountByBlockNum Get the number of transactions in the block based on the block height GetTransactionInfoById Get transaction-info based on transaction id, generally used to check the result of a smart contract trigger GetTransactionInfoByBlockNum Get the list of transaction information in the block based on the block height","title":"How to get transaction information"},{"location":"clients/wallet-cli/#how-to-get-block-information","text":"GetBlock Get the block according to the block number; if you do not pass the parameter, get the latest block GetBlockById Get block based on blockID GetBlockByLatestNum n Get the latest n blocks, where 0 < n < 100 GetBlockByLimitNext startBlockId endBlockId Get the block in the range [startBlockId, endBlockId)","title":"How to get block information"},{"location":"clients/wallet-cli/#some-others","text":"GetNextMaintenanceTime Get the start time of the next maintain period ListNodes Get other peer information ListExecutives Get all miner node information BroadcastTransaction Broadcast the transaction, where the transaction is in hex string format.","title":"Some others"},{"location":"clients/wallet-cli/#how-to-transfer-shielded-src20-token","text":"If you want to try to transfer shielded SRC20 token, you'd better set the blockNumberStartToScan field in config.conf file. This field is used to set the starting block that the wallet needs to scan. If you ignore this field, or set it to 0, the notes you receive will probably take a long time to show up in the wallet. It is recommended that this field is set to the block number in which the earliest relevant shielded contract was created. If the exact number is not known, this field can be set as follows. If used in mainnet, please set 22690588. If used in Nile testnet, please set 6380000. Otherwise, please set 0. When you begin to transfer SRC20 token to shielded address, you must have a shielded address. The following commands help to generate shielded account.","title":"How to transfer shielded SRC20 token"},{"location":"clients/wallet-cli/#getspendingkey","text":"Generate a sk Example: > GetSpendingKey 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb5f6a","title":"GetSpendingKey"},{"location":"clients/wallet-cli/#getexpandedspendingkey","text":"> GetExpandedSpendingKey sk Generate ask, nsk, ovk from sk Example: > GetExpandedSpendingKey 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb5f6a ask:252a0f6f6f0bac114a13e1e663d51943f1df9309649400218437586dea78260e nsk:5cd2bc8d9468dbad26ea37c5335a0cd25f110eaf533248c59a3310dcbc03e503 ovk:892a10c1d3e8ea22242849e13f177d69e1180d1d5bba118c586765241ba2d3d6","title":"GetExpandedSpendingKey"},{"location":"clients/wallet-cli/#getakfromask","text":"> GetAkFromAsk ask Generate ak from ask Example: > GetAkFromAsk 252a0f6f6f0bac114a13e1e663d51943f1df9309649400218437586dea78260e ak:f1b843147150027daa5b522dd8d0757ec5c8c146defd8e01b62b34cf917299f1","title":"GetAkFromAsk"},{"location":"clients/wallet-cli/#getnkfromnsk","text":"> GetNkFromNsk nsk Generate nk from nsk Example: > GetNkFromNsk 5cd2bc8d9468dbad26ea37c5335a0cd25f110eaf533248c59a3310dcbc03e503 nk:ed3dc885049f0a716a4de8c08c6cabcad0da3c437202341aa3d9248d8eb2b74a","title":"GetNkFromNsk"},{"location":"clients/wallet-cli/#getincomingviewingkey","text":"> GetIncomingViewingKey ak [ 64 ] nk [ 64 ] Generate ivk from ak and nk Example: > Getincomingviewingkey f1b843147150027daa5b522dd8d0757ec5c8c146defd8e01b62b34cf917299f1 ed3dc885049f0a716a4de8c08c6cabcad0da3c437202341aa3d9248d8eb2b74a ivk:148cf9e91f1e6656a41dc9b6c6ee4e52ff7a25b25c2d4a3a3182d0a2cd851205","title":"GetIncomingViewingKey"},{"location":"clients/wallet-cli/#getdiversifier","text":"Generate a diversifier Example: > GetDiversifier 11db4baf6bd5d5afd3a8b5","title":"GetDiversifier"},{"location":"clients/wallet-cli/#getshieldedpaymentaddress","text":"> GetShieldedPaymentAddress ivk [ 64 ] d [ 22 ] Generate a shielded address from ivk and d Example: > GetShieldedPaymentAddress 148cf9e91f1e6656a41dc9b6c6ee4e52ff7a25b25c2d4a3a3182d0a2cd851205 11db4baf6bd5d5afd3a8b5 pkd:65c11642115d386ed716b9cc06a3498e86e303d7f20d0869c9de90e31322ac15 shieldedAddress:zstabila1z8d5htmt6h26l5agk4juz9jzz9wnsmkhz6uucp4rfx8gdccr6leq6zrfe80fpccny2kp2cray8z","title":"GetShieldedPaymentAddress"},{"location":"clients/wallet-cli/#setshieldedsrc20contractaddress","text":"> SetShieldedSRC20ContractAddress SRC20ContractAddress ShieldedContractAddress SRC20ContractAddress SRC20 contract address ShieldedContractAddress Shielded contract address Set SRC20 contract address and shielded contract address. Please execute this command before you perform all the following operations related to the shielded transaction of SRC20 token except ScanShieldedSRC20NoteByIvk and ScanShieldedSRC20NoteByOvk . When you execute this command, the Scaling Factor will be shown. The Scaling Factor is set in the shielded contract. Example: > SetShieldedSRC20ContractAddress SLDxNTzNvEPd4gHox8V1zK2w82LFnideKE SKERuAmhJh8vZi1dzJtx8926xeCT74747e scalingFactor():ed3437f8 SetShieldedSRC20ContractAddress succeed! The Scaling Factor is 1000 That means: No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000","title":"SetShieldedSRC20ContractAddress"},{"location":"clients/wallet-cli/#loadshieldedsrc20wallet","text":"Load SRC20 shielded address, shielded note and start to scan by ivk. Example: > LoadShieldedSRC20Wallet Please input your password for shieldedSRC20 wallet. > ******* LoadShieldedSRC20Wallet successful !!!","title":"LoadShieldedSRC20Wallet"},{"location":"clients/wallet-cli/#generateshieldedsrc20address","text":"> GenerateShieldedSRC20Address number number The number of SRC20 shielded addresses, the default is 1. Generate SRC20 shielded addresses. Example: > GenerateShieldedSRC20Address 3 ShieldedSRC20Address list: zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq GenerateShieldedSRC20Address successful !!!","title":"GenerateShieldedSRC20Address"},{"location":"clients/wallet-cli/#listshieldedsrc20address","text":"Display cached local SRC20 shielded address list. Example: > ListShieldedSRC20Address ShieldedSRC20Address : zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46","title":"ListShieldedSRC20Address"},{"location":"clients/wallet-cli/#sendshieldedsrc20coin","text":"SendShieldedSRC20Coin fromAmount shieldedInputNum input1 input2 ... publicToAddress toAmount shieldedOutputNum shieldedAddress1 amount1 memo1 shieldedAddress2 amount2 memo2 .... Shielded transfer, support three types: MINT: transfer from one public address to one shielded address, fromAmount should be equal to the shielded output amount. When you MINT, you need to enter password twice as prompted, one time is for triggering approve method of SRC20 contract that allows the shielded contract can transfer form your account, and other one is for triggering mint method of shielded contract that executes MINT. It's important to remember that you must use the same public address to trigger these two methods. TRANSFER: transfer from one or two shielded address(es) to one or two shielded address(es), the sum of shielded input amount should be equal to the sum of shielded output amount. When you TRANSFER, you need to enter password of public account as prompted, and this is used to trigger 'transfer' method of shielded contract that executes TRANSFER. BURN: transfer from one shielded address to one public address and one optional shielded address. If there is no shielded output, toAmount should be equal to the shielded input amount , otherwise, the sum of toAmount and shielded output amount should be equal to the shielded input amount. When you BURN, you need to enter password of public account as prompted, and this is used to trigger 'burn' method of shielded contract that executes BURN. It's better to use different accounts to trigger BURN, TRANSFER and MINT. fromAmount The amount transfer from public address. If the transfer type is MINT, this variable must be equal to the shielded output amount, otherwise it must be 0. shieldedInputNum The number of shielded input note, should be 0, 1 or 2. If the transfer type is MINT, this variable must be 0; if BURN, it must be 1. input1/input2 The index of shielded input note, get from executing command ListShieldedSRC20Note. If shieldedInputNum set to 0, no need to set. publicToAddress Public to address. If the transfer type is BURN, this variable must be a valid address, otherwise it should be set null. toAmount The amount transfer to public address. If the transfer type is BURN, this variable must be equal to the shielded input amount, otherwise it should be 0. shieldedOutputNum The amount of shielded output note. That is the number of (shieldedAddress amount memo) pairs, should be 0, 1 or 2. shieldedAddress1/shieldedAddress2 Output shielded address amount1/amount2 The amount transfer to shieldedAddress1/shieldedAddress2 memo1/memo2 The memo of this note, up to 512 bytes, can be set to null if not needed. Example: In this example, the scalingFactor is 1000. MINT In this mode, some variables must be set as follows, shieldedInputNum = 0, publicToAddress = null, toAmount = 0. ```console > SendShieldedSRC20Coin 1000000000000 0 null 0 1 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 null ``` TRANSFER In this mode, some variables must be set as follows, fromAmount = 0, publicToAddress = null,toAmount = 0. Transfer from one shielded address to one shielded address. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 9 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 2000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 1 UnSpend 8 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 0 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 1 8 null 0 1 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 null ``` Transfer from one shielded address to two shielded addresses. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 9 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 2000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 1 UnSpend 10 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 81a06080f2be3f795c506826e066b9bb5327ca234eb31a0ef2446e11339a3935 0 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 1 9 null 0 2 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1500000000000 test1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 null ``` Transfer from two shielded addresses to one shielded address. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 11 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 0 UnSpend test1 10 zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 81a06080f2be3f795c506826e066b9bb5327ca234eb31a0ef2446e11339a3935 0 UnSpend 12 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 1 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 2 10 11 null 0 1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2500000000000 null ``` Transfer from two shielded addresses to two shielded addresses. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 13 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2500000000000 6ec74435e32261a6dfe10f9498b3ab5a5cfede7c4e31299752b449b9506efc11 0 UnSpend 12 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 1 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 2 12 13 null 0 2 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1300000000000 null zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 null ``` BURN In this mode, some variables must be set as follows, fromAmount = 0, shieldedInputNum = 1. ```console > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 15 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 1 UnSpend 14 zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1300000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 0 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > SendShieldedSRC20Coin 0 1 14 SDVr15jvAx6maR28tP7RRpxuKZ38tgsyNE 1300000000000000 0 > SendShieldedSRC20Coin 0 1 14 SDVr15jvAx6maR28tP7RRpxuKZ38tgsyNE 300000000000000 1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 1000000000000000 null ```","title":"SendShieldedSRC20Coin"},{"location":"clients/wallet-cli/#sendshieldedsrc20coinwithoutask","text":"Usage and parameters are consistent with the command SendShieldedSRC20Coin, the only difference is that SendShieldedSRC20Coin uses ask for signature, but SendShieldedSRC20CoinWithoutAsk uses ak.","title":"SendShieldedSRC20CoinWithoutAsk"},{"location":"clients/wallet-cli/#listshieldedsrc20note","text":"> ListShieldedSRC20Note type type Shows the type of note. If the variable is omitted or set to 0, it shows all unspent notes; For other values, it shows all the notes, including spent notes and unspent notes. List the note scanned by the local cache address, and the Scaling Factor . NOTE When you load shielded wallet, the wallet will scan blocks to find the notes others send to you in the backend. This will take a long time, so when you run ListShieldedSRC20Note , your notes will not be displayed immediately. Example: > ListShieldedSRC20Note This command will show all the unspent notes. If you want to display all notes, including spent notes and unspent notes, please use command ListShieldedSRC20Note 1 The unspent note list is shown below: 15 zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 1 UnSpend The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000 > ListShieldedSRC20Note 1 All notes are shown below: zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 1700000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 1 15 UnSpent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 dc02678b0cf1c93c557dc805edb776fe79201c77f210f08f60cea5d687b14f2e 0 0 Spent zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 1000000000000 e4d35d147762020078d7d197c98fffde181250e4a637d4bdd9ca809116d74131 0 2 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 1594e1ee06c8420a4f1d80670000cd9268a2ff4e97e3f630909feeb51a9de993 0 3 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 2000000000000 3f035e966b3ef636ae9c0a0f64bff781b1d1a8b52bab5d8124c0f9162f71f68f 0 1 Spent zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 300000000000 6929757cb86cb6cf3e89df19f3212c3e62070b12d8b36de48e663fed214a4082 0 4 Spent test1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2000000000000 e39a1e1d5af7dcbab0d55a63a0c62ec9cc7c0aaf8ce98733802674c3ec1f3a06 0 6 Spent zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq 700000000000 6929757cb86cb6cf3e89df19f3212c3e62070b12d8b36de48e663fed214a4082 1 5 Spent zstabila109r3w5gpm0qcf67r67a9ftjt3zy9wmzux4fqgtgcql8gwhcmauv5dm6t9t9x9ht7h3lvs8shxhq 2300000000000 4ce1ce9f6377ee3cd936757b696ac43ecc39ee6e8a0eab1b8f8ef093e15010f8 0 7 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 0 8 Spent zstabila1tjgkfk9hgrl0u6d07w3hq0s9jtgq9q64vek3e5l447dmnzhe27yy0ftpee45h07sa092wkrgrjl 2000000000000 23f171f6552680b553707715bead8de807a70255c0b091f7e788bf3b59fe3bea 1 9 Spent zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1000000000000 81a06080f2be3f795c506826e066b9bb5327ca234eb31a0ef2446e11339a3935 0 10 Spent zstabila1da9rnkmnzl89kqq87gzh534xmkdhq9cnm0j39lackskrhflfe9d26chnq3adl86es0jm2098hzc 1500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 0 11 Spent test1 zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 500000000000 35901973a96369618e5e3f7f4dcede2b5ddb5bc99bf6feac29f2706420ea99c0 1 12 Spent zstabila1mm20lkcpj6tx6jfd6ek5fxkgmpk9f2hda6vxdtkwlzr45ez32wa7dt8uka9xwfqamr7zyk7jpzf 2500000000000 6ec74435e32261a6dfe10f9498b3ab5a5cfede7c4e31299752b449b9506efc11 0 13 Spent zstabila15t3c27a5ve43ssflqepa8dke36vzvccxrren4ma2lghu3hle8rtwltufnvvzrm76w042s9p5f46 1300000000000 7291b2c58cafb4dede626388f12e846470441f9bb05581221fd742bdd8909a24 0 14 Spent The Scaling Factor is 1000 No matter you MINT, TRANSFER or BURN, the value must be an integer multiple of 1000","title":"ListShieldedSRC20Note"},{"location":"clients/wallet-cli/#resetshieldedsrc20note","text":"Clean all the notes scanned, and rescan all blocks. Generally used when there is a problem with the notes or when switching environments.","title":"ResetShieldedSRC20Note"},{"location":"clients/wallet-cli/#scanshieldedsrc20notebyivk","text":"> ScanShieldedSRC20NoteByIvk shieldedSRC20ContractAddress ivk ak nk startNum endNum [ event1 ] [ event2 ] ... shieldedSRC20ContractAddress The address of shielded contract ivk The ivk of shielded address ak The ak of shielded address. Please set this field to null, if you don't care whether the notes are spent or not. nk The nk of shielded address. Please set this field to null, if you don't care whether the notes are spent or not. startNum The starting block number of the scan endNum The end block number of the scan event1/event2 The events you want to scan. These events must be compatible with standard events, that is, MintNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]), TransferNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]) and BurnNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]). If you ignore this field, the command will scan the standard events. In most cases, you can ignore these parameters. Scan notes by ivk, ak and nk. Example: > ScanShieldedSRC20NoteByIvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu fed8fa4714e6a19511760f9b8ed33388f14c626adff26034f4a21557cb928f01 faf63a2d959df05d4441c0fd42262e0a53629c532e8d29501fe94f9d86c51313 66458c23d737a30146533374d7c5c78f3e05f8f158192e8855493cc55cf8953f 5000 5400 [ { note: { value: 100000 payment_address: zstabila12dq4ktrydrxzxrsgpmusp4pe0xawqyz4qfxzsgjdauw99n4n3efnw4kmrptlw8jcrrydx5694mw rcm: a45878a4e0d53f5cac79370fea1bf4aa82c67d3b2f647ac89c2b1e7061ea740a memo: without ask 2v1 } position: 10 is_spent: true tx_id: 5891fd3a8e860b336b7f7d31f64ec52ec5dc76f81b9bb4e4d0fa8a5756a61dd6 } ] > ScanShieldedSRC20NoteByIvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu fed8fa4714e6a19511760f9b8ed33388f14c626adff26034f4a21557cb928f01 faf63a2d959df05d4441c0fd42262e0a53629c532e8d29501fe94f9d86c51313 66458c23d737a30146533374d7c5c78f3e05f8f158192e8855493cc55cf8953f 5000 6000 MintNewLeaf ( uint256,bytes32,bytes32,bytes32,bytes32 [ 21 ]) [ { note: { value: 100000 payment_address: zstabila1z8d5htmt6h26l5agk4ywv86xv3shuv4gjc2rzufyz4s2g5x0035nwrcqmxj4a49n2dy5sq28s5p rcm: 07604b4a8018d353c08f93044df0fc04ef988c2f65f9222eacc8d41f0e095404 memo: mint } position: 16 is_spent: false tx_id: 38d759216f62503c2b8bf7fc9777e6e25f5f77ec22dd760cc03057c4704277a2 } ] > ScanShieldedSRC20NoteByIvk TVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu fed8fa4714e6a19511760f9b8ed33388f14c626adff26034f4a21557cb928f01 faf63a2d959df05d4441c0fd42262e0a53629c532e8d29501fe94f9d86c51313 66458c23d737a30146533374d7c5c78f3e05f8f158192e8855493cc55cf8953f 5000 5400 BurnNewLeaf ( uint256,bytes32,bytes32,bytes32,bytes32 [ 21 ]) [ { note: { value: 100000 payment_address: zstabila12dq4ktrydrxzxrsgpmusp4pe0xawqyz4qfxzsgjdauw99n4n3efnw4kmrptlw8jcrrydx5694mw rcm: a45878a4e0d53f5cac79370fea1bf4aa82c67d3b2f647ac89c2b1e7061ea740a memo: without ask 2v1 } position: 10 is_spent: true tx_id: 5891fd3a8e860b336b7f7d31f64ec52ec5dc76f81b9bb4e4d0fa8a5756a61dd6 } ]","title":"ScanShieldedSRC20NoteByIvk"},{"location":"clients/wallet-cli/#scanshieldedsrc20notebyovk","text":"> ScanShieldedSRC20NoteByOvk shieldedSRC20ContractAddress ovk startNum endNum [ event1 ] [ event2 ] ... shieldedSRC20ContractAddress The address of shielded contract ovk the ovk of shielded address startNum The starting block number of the scan endNum The end block number of the scan event1/event2 The event you want to scan. These events must be compatible with standard events, that is, MintNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]), TransferNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]), BurnNewLeaf(uint256,bytes32,bytes32,bytes32,bytes32[21]) and TokenBurn(address,uint256,bytes32[3]). If you ignore this field, the command will scan the standard events. Scan notes by ovk Example: > ScanShieldedSRC20NoteByOvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu 4b33fc947a53a5e2a1d1636b323f7f6cecff8c34c9fc511ccc7cfaf0dd6f4c03 5000 6000 [ { note: { value: 60000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 50698dc3c97fb4d2c818b62de2265a271eb9a58b5dd65074122ddf4d794c6b03 memo: 1 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { note: { value: 40000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 94afb02c6fd4b19ada89b6b85e2cc23f2fb76c5188ede646c5046b2539a3bf00 memo: 2 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { transparent_to_address: SV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32 transparent_amount: 130000 tx_id: d45da3394be6c15220d31ac17c13e02130aab0c3edf97750620538f4efae366b } ] > ScanShieldedSRC20NoteByOvk SVqa39sqP8ZJNTWjtKrDRifGdVmA4Ycsxu 4b33fc947a53a5e2a1d1636b323f7f6cecff8c34c9fc511ccc7cfaf0dd6f4c03 5000 6000 BurnNewLeaf ( uint256,bytes32,bytes32,bytes32,bytes32 [ 21 ]) TokenBurn ( address,uint256,bytes32 [ 3 ]) [ { note: { value: 60000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 50698dc3c97fb4d2c818b62de2265a271eb9a58b5dd65074122ddf4d794c6b03 memo: 1 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { note: { value: 40000 payment_address: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 rcm: 94afb02c6fd4b19ada89b6b85e2cc23f2fb76c5188ede646c5046b2539a3bf00 memo: 2 } tx_id: 19c8aaa244dbcdf30a4b2a02b9b17054dc5d8ebf41d1f82daea044e65dff29d5 } { transparent_to_address: SV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32 transparent_amount: 130000 tx_id: d45da3394be6c15220d31ac17c13e02130aab0c3edf97750620538f4efae366b } ]","title":"ScanShieldedSRC20NoteByOvk"},{"location":"clients/wallet-cli/#backupshieldedsrc20wallet","text":"Back up one shielded address. Example: > BackupShieldedSRC20Wallet Please input your password for shieldedSRC20 wallet. password: The 1th shieldedSRC20 address is zstabila1mf0a0cy86j8rmn4l7dcdsnhyj2k46rem4qxwjqh4z0x26utlddtmmr5fk5dchzt2hpujyvgk69z The 2th shieldedSRC20 address is zstabila1mnkdjl0802dqha9ufh4m80f2ua9cff2hct8geeh77llrz4ywgtu0ct8ygy6k5xavdkd278jyttj The 3th shieldedSRC20 address is zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 Please choose between 1 and 3 1 sk:01ef2d71f8eef668e12db7aef1267c7d6a8f43c84dffa66fc09e2c749464190e d :da5fd7e087d48e3dcebff3 BackupShieldedSRC20Wallet successful !!!","title":"BackupShieldedSRC20Wallet"},{"location":"clients/wallet-cli/#importshieldedsrc20wallet","text":"Import one shielded address to local wallet. Example: > ImportShieldedSRC20Wallet ShieldedSRC20 wallet does not exist, will build it. Please input password. password: Please input password again. password: Please input shieldedSRC20 wallet hex string. such as 'sk d',Max retry time:3 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb000a 11db4baf6bd5d5afd3a8b5 Import shieldedSRC20 wallet hex string is : sk:0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb000a d :11db4baf6bd5d5afd3a8b5 Import new shieldedSRC20 wallet address is: zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 ImportShieldedSRC20Wallet successfully !!!","title":"ImportShieldedSRC20Wallet"},{"location":"clients/wallet-cli/#showshieldedsrc20addressinfo","text":"> ShowShieldedSRC20AddressInfo address Display information about shielded addresses. If this address is not in the wallet, it will only display d and pkd Example: > ListShieldedSRC20Address ShieldedSRC20Address : zstabila1mf0a0cy86j8rmn4l7dcdsnhyj2k46rem4qxwjqh4z0x26utlddtmmr5fk5dchzt2hpujyvgk69z zstabila1mnkdjl0802dqha9ufh4m80f2ua9cff2hct8geeh77llrz4ywgtu0ct8ygy6k5xavdkd278jyttj zstabila1z8d5htmt6h26l5agk5nlxdlz66fahhcp8vwhyydrwfdajc5yalftew5uhwn6wjz4pwrxu0msu34 > ShowShieldedSRC20AddressInfo zstabila1mf0a0cy86j8rmn4l7dcdsnhyj2k46rem4qxwjqh4z0x26utlddtmmr5fk5dchzt2hpujyvgk69z The following variables are secret information, please don't show to other people!!! sk :01ef2d71f8eef668e12db7aef1267c7d6a8f43c84dffa66fc09e2c749464190e ivk:7d2e9c14ff1d82843f39cb69e8bcc228370e4ea8750669bba79e90c485d94c03 ovk:2c3d164fffa63b41a34f495e0c9d8af79d595cfb07db1539545ddcecf046d66e pkd:70d84ee492ad5d0f3ba80ce902f513ccad717f6b57bd8e89b51b8b896ab87922 d :da5fd7e087d48e3dcebff3 > ShowShieldedSRC20AddressInfo zstabila1z8d5htmt6h26l5agk8r7wxw9pyhc0a78hl5thva4k9kcn7fsqvygchyt3n2ncy0r4xv4j5mywnu pkd:c7e719c5092f87f7c7bfe8bbb3b5b16d89f93003088c5c8b8cd53c11e3a99959 d :11db4baf6bd5d5afd3a8b1","title":"ShowShieldedSRC20AddressInfo"},{"location":"clients/wallet-cli/#how-to-use-stabila-dex-to-sell-asset","text":"","title":"How to use stabila-dex to sell asset"},{"location":"clients/wallet-cli/#marketsellasset","text":"Create an order to sell asset MarketSellAsset owner_address sell_token_id sell_token_quantity buy_token_id buy_token_quantity ownerAddress The address of the account that initiated the transaction sell_token_id, sell_token_quantity ID and amount of the token want to sell buy_token_id, buy_token_quantity ID and amount of the token want to buy Example: MarketSellAsset SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 1000001 200 _ 100 Get the result of the contract execution with the getTransactionInfoById command: getTransactionInfoById 10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374 { \"id\": \"10040f993cd9452b25bf367f38edadf11176355802baf61f3c49b96b4480d374\", \"blockNumber\": 669, \"blockTimeStamp\": 1578983493000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 264 } }","title":"MarketSellAsset"},{"location":"clients/wallet-cli/#getmarketorderbyaccount","text":"Get the order created by account(just include active status) GetMarketOrderByAccount ownerAddress ownerAddress The address of the account that created market order Example: GetMarketOrderByAccount SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW { \"orders\": [ { \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\", \"owner_address\": \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"create_time\": 1578983490000, \"sell_token_id\": \"_\", \"sell_token_quantity\": 100, \"buy_token_id\": \"1000001\", \"buy_token_quantity\": 200, \"sell_token_quantity_remain\": 100 } ] }","title":"GetMarketOrderByAccount"},{"location":"clients/wallet-cli/#getmarketorderbyid","text":"Get the specific order by order_id GetMarketOrderById orderId Example: GetMarketOrderById fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 { \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\", \"owner_address\": \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"create_time\": 1578983490000, \"sell_token_id\": \"_\", \"sell_token_quantity\": 100, \"buy_token_id\": \"1000001\", \"buy_token_quantity\": 200, }","title":"GetMarketOrderById"},{"location":"clients/wallet-cli/#getmarketpairlist","text":"Get market pair list Example: GetMarketPairList { \"orderPair\": [ { \"sell_token_id\": \"_\", \"buy_token_id\": \"1000001\" } ] }","title":"GetMarketPairList"},{"location":"clients/wallet-cli/#getmarketorderlistbypair","text":"Get order list by pair GetMarketOrderListByPair sell_token_id buy_token_id sell_token_id ID of the token want to sell buy_token_id ID of the token want to buy Example: GetMarketOrderListByPair _ 1000001 { \"orders\": [ { \"order_id\": \"fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0\", \"owner_address\": \"SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"create_time\": 1578983490000, \"sell_token_id\": \"_\", \"sell_token_quantity\": 100, \"buy_token_id\": \"1000001\", \"buy_token_quantity\": 200, \"sell_token_quantity_remain\": 100 } ] }","title":"GetMarketOrderListByPair"},{"location":"clients/wallet-cli/#getmarketpricebypair","text":"Get market price by pair GetMarketPriceByPair sell_token_id buy_token_id sell_token_id ID of the token want to sell buy_token_id ID of the token want to buy Example: GetMarketPriceByPair _ 1000001 { \"sell_token_id\": \"_\", \"buy_token_id\": \"1000001\", \"prices\": [ { \"sell_token_quantity\": 100, \"buy_token_quantity\": 200 } ] }","title":"GetMarketPriceByPair"},{"location":"clients/wallet-cli/#marketcancelorder","text":"Cancel the order MarketCancelOrder owner_address order_id owner_address the account address who have created the order order_id the order id which want to cancel Example: MarketCancelOrder SJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW fc9c64dfd48ae58952e85f05ecb8ec87f55e19402493bb2df501ae9d2da75db0 Get the result of the contract execution with the getTransactionInfoById command: getTransactionInfoById b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27 { \"id\": \"b375787a098498623403c755b1399e82910385251b643811936d914c9f37bd27\", \"blockNumber\": 1582, \"blockTimeStamp\": 1578986232000, \"contractResult\": [ \"\" ], \"receipt\": { \"net_usage\": 283 } }","title":"MarketCancelOrder"},{"location":"clients/wallet-cli/#suggestions-feedback-issues","text":"If you have a suggestion for improvement, feedback about a specific feature or any issue please contact us at info@stabilascan.org","title":"Suggestions, Feedback &amp; Issues"},{"location":"contracts/compiler/","text":"Compiler \u00b6 Tools \u00b6 Build and install the Solidity compiler Instructions about how to build and install the Solidity compiler can be found at https://github.com/stabilaprotocol/solidity Write your first smart contract pragma solidity ^0.4.0; contract DataStore { mapping(uint256 => uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Compile smart contract shell cd solidity/build/solc ./solc --bin --abi -o {outputFolder} {contractFileName} # example ./solc --bin --abi -o /home/user/solidity/build/solc/dataStore DataStore.sol If it is compiled successfully /test folder will contain DataStore.api and DataStore.bin files. Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/stabila.log Using Wallet-cli to Deploy Download Wallet-Cli and build shell # download source code git clone https://github.com/stabilaprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf, details can be found at https://github.com/stabilaprotocol/wallet-cli start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI generated by Solidity compiler bytecode: ByteCode generated by Solidity compiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The STB consumption limit for the deployment, unit is UNIT(1 UNIT = 10^-6 STB) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of STB transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The STB consumption limit for the trigger, unit is UNIT(1 UNIT = 10^-6 STB) value: The amount of STB transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract.","title":"Compiler"},{"location":"contracts/compiler/#compiler","text":"","title":"Compiler"},{"location":"contracts/compiler/#tools","text":"Build and install the Solidity compiler Instructions about how to build and install the Solidity compiler can be found at https://github.com/stabilaprotocol/solidity Write your first smart contract pragma solidity ^0.4.0; contract DataStore { mapping(uint256 => uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Compile smart contract shell cd solidity/build/solc ./solc --bin --abi -o {outputFolder} {contractFileName} # example ./solc --bin --abi -o /home/user/solidity/build/solc/dataStore DataStore.sol If it is compiled successfully /test folder will contain DataStore.api and DataStore.bin files. Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/stabila.log Using Wallet-cli to Deploy Download Wallet-Cli and build shell # download source code git clone https://github.com/stabilaprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf, details can be found at https://github.com/stabilaprotocol/wallet-cli start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI generated by Solidity compiler bytecode: ByteCode generated by Solidity compiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The STB consumption limit for the deployment, unit is UNIT(1 UNIT = 10^-6 STB) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of STB transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The STB consumption limit for the trigger, unit is UNIT(1 UNIT = 10^-6 STB) value: The amount of STB transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract.","title":"Tools"},{"location":"contracts/contract/","text":"Contract \u00b6 Smart Contract Introduction \u00b6 Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can run in the way it is designed. STABILA smart contract support Solidity language (from Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to STABILA network. When the smart contract is triggered, the corresponding function will be executed automatically. Smart Contract Features \u00b6 STABILA virtual machine is based on Ethereum solidity language, it also has STABILA's own features. 1. Smart Contract \u00b6 STABILA VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; Receive = 5; Error = 6; } message Param { bool indexed = 1; string name = 2; string type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7; int64 origin_ucr_limit = 8; bytes code_hash = 9; bytes stb_hash = 10; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: STB transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_ucr_limit: ucr consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateUcrLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contract. 2. The Usage of the Function of Smart Contract \u00b6 constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while be called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. message calls Message calls can call the functions of other contracts, also can transfer STB to the accounts of contract and none-contract. Like the common STABILA triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining ucr in the internal message call. If it comes with OutOfUcrException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if ucr is not specified in call.value(ucr), all the remaining ucr will be used. delegate call/call code/libary There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically loadcode from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated STABILA address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the defination of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. built-in function and built-in function attribute (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 1)SVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: STABILA's smart contract is different from STABILA's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accouts vote for Governor (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 3)Governor gets all the reward (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 4)Governor approves or disappoves the proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 5)Governor proposes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 6)Governor deletes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 7)STABILA byte address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 8)STABILA string address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of STABILA is a hash result based on STABILA's sha256, not an accurate Ethereum RIPEMD160. 3. Contract Address Using in Solidity Language \u00b6 Ethereum VM address is 20 bytes, but STABILA's VM address is 21 bytes. address conversion Need to convert STABILA's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) stabila address to solidity address type * @param stabilaAddress uint256 stabilaAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromStabilaInt(uint256 stabilaAddress) public view returns(address){ return address(stabilaAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address stabilaAddress) public view returns (uint256){ // if (stabilaAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (stabilaAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use STABILA address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8).","title":"Contract"},{"location":"contracts/contract/#contract","text":"","title":"Contract"},{"location":"contracts/contract/#smart-contract-introduction","text":"Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can run in the way it is designed. STABILA smart contract support Solidity language (from Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to STABILA network. When the smart contract is triggered, the corresponding function will be executed automatically.","title":"Smart Contract Introduction"},{"location":"contracts/contract/#smart-contract-features","text":"STABILA virtual machine is based on Ethereum solidity language, it also has STABILA's own features.","title":"Smart Contract Features"},{"location":"contracts/contract/#1-smart-contract","text":"STABILA VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; Receive = 5; Error = 6; } message Param { bool indexed = 1; string name = 2; string type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7; int64 origin_ucr_limit = 8; bytes code_hash = 9; bytes stb_hash = 10; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: STB transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_ucr_limit: ucr consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateUcrLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contract.","title":"1. Smart Contract"},{"location":"contracts/contract/#2-the-usage-of-the-function-of-smart-contract","text":"constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while be called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. message calls Message calls can call the functions of other contracts, also can transfer STB to the accounts of contract and none-contract. Like the common STABILA triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining ucr in the internal message call. If it comes with OutOfUcrException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if ucr is not specified in call.value(ucr), all the remaining ucr will be used. delegate call/call code/libary There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically loadcode from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated STABILA address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the defination of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. built-in function and built-in function attribute (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 1)SVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: STABILA's smart contract is different from STABILA's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accouts vote for Governor (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 3)Governor gets all the reward (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 4)Governor approves or disappoves the proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 5)Governor proposes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 6)Governor deletes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 7)STABILA byte address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 8)STABILA string address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of STABILA is a hash result based on STABILA's sha256, not an accurate Ethereum RIPEMD160.","title":"2. The Usage of the Function of Smart Contract"},{"location":"contracts/contract/#3-contract-address-using-in-solidity-language","text":"Ethereum VM address is 20 bytes, but STABILA's VM address is 21 bytes. address conversion Need to convert STABILA's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) stabila address to solidity address type * @param stabilaAddress uint256 stabilaAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromStabilaInt(uint256 stabilaAddress) public view returns(address){ return address(stabilaAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address stabilaAddress) public view returns (uint256){ // if (stabilaAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (stabilaAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use STABILA address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8).","title":"3. Contract Address Using in Solidity Language"},{"location":"contracts/svm/","text":"STABILA Virtual Machine (SVM) \u00b6 STABILA Virtual Machine (SVM) is a lightweight, Turing complete virtual machine developed for the STABILA's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. SVM can connect seamlessly with existing development ecosystem and supports DPoS. SVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a (Ethereum) Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to STABILA\u2019s mainnet, it will be executed on the SVM of the SR node to be isolated from external connections. Furthermore, SVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on SVM are free, with no tokens consumed. Technically, executable computation capacity on SVM is not restricted by total holding of tokens. Features of SVM \u00b6 1. Lightweight SVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, SVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not STB, which exempts STABILA from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, SVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on SVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to SVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. SVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in Stabila Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts. How SVM Works \u00b6 The above flowchart shows how SVM works: Compilation of Stabila smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, SVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on SVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + SVM accesses blockchain data and invoke External Data Interface through the Interoperation layer. Future Development of SVM \u00b6 1. More developer-friendly debugging tools Stabila will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on SVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of SVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, Stabila is planning to further optimize its SVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, SVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios. The above is an introduction of Stabila Virtual Machine and a guide to deployment. We welcome everyone to check out SVM and give us your thoughts and suggestions. We will continue to perfect and update SVM for optimal performance on STABILA mainnet.","title":"SVM"},{"location":"contracts/svm/#stabila-virtual-machine-svm","text":"STABILA Virtual Machine (SVM) is a lightweight, Turing complete virtual machine developed for the STABILA's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. SVM can connect seamlessly with existing development ecosystem and supports DPoS. SVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a (Ethereum) Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to STABILA\u2019s mainnet, it will be executed on the SVM of the SR node to be isolated from external connections. Furthermore, SVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on SVM are free, with no tokens consumed. Technically, executable computation capacity on SVM is not restricted by total holding of tokens.","title":"STABILA Virtual Machine (SVM)"},{"location":"contracts/svm/#features-of-svm","text":"1. Lightweight SVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, SVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not STB, which exempts STABILA from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, SVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on SVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to SVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. SVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in Stabila Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts.","title":"Features of SVM"},{"location":"contracts/svm/#how-svm-works","text":"The above flowchart shows how SVM works: Compilation of Stabila smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, SVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on SVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + SVM accesses blockchain data and invoke External Data Interface through the Interoperation layer.","title":"How SVM Works"},{"location":"contracts/svm/#future-development-of-svm","text":"1. More developer-friendly debugging tools Stabila will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on SVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of SVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, Stabila is planning to further optimize its SVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, SVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios. The above is an introduction of Stabila Virtual Machine and a guide to deployment. We welcome everyone to check out SVM and give us your thoughts and suggestions. We will continue to perfect and update SVM for optimal performance on STABILA mainnet.","title":"Future Development of SVM"},{"location":"contracts/trc20/","text":"SRC-20 \u00b6 SRC\u200c-20 is a technical standard used for smart contracts on the STABILA blockchain for implementing tokens with the STABILA Virtual Machine (SVM). It is fully compatible to ERC\u200c-20. Implementation Rules \u00b6 3 Optional Items Token Name string public constant name = \u201cSTABILAEuropeRewardCoin\u201d; Token Abbreviation string public constant symbol = \u201cTERC\u201d; Token Precision uint8 public constant decimals = 6; 6 Required Items contract SRC20 { function totalSupply() constant returns (uint theTotalSupply); function balanceOf(address _owner) constant returns (uint balance); function transfer(address _to, uint _value) returns (bool success); function transferFrom(address _from, address _to, uint _value) returns (bool success); function approve(address _spender, uint _value) returns (bool success); function allowance(address _owner, address _spender) constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); } totalSupply() This function returns the total supply of the token. balanceOf() This function returns the token balance of the specific account. transfer() This function is used to transfer an amount of tokens from the smart contract to a specific address. approve() This function is used to authorize the third party (like a DAPP smart contract) to transfer token from the token owner\u2019s account. transferFrom() This function is used to allow the third party to transfer token from an owner account to a receiver account. The owner account must be approved to be called by the third party. allowance() This function is used to query the remaining amount of tokens the third party can transfer. 2 Event Functions When token is successfully transferred, it has to trigger Transfer Event. event Transfer(address indexed _from, address indexed _to, uint256 _value) When approval() is successfully called, it has to trigger Approval Event. event Approval(address indexed _owner, address indexed _spender, uint256 _value) Example \u00b6 pragma solidity ^0.4.16; interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; } contract TokenSRC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the sstabilagly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenSRC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] >= _value); // Check for overflows require(balanceOf[_to] + _value >= balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; emit Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply emit Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); // Check if the targeted balance is enough require(_value <= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply emit Burn(_from, _value); return true; } }","title":"TRC-20"},{"location":"contracts/trc20/#src-20","text":"SRC\u200c-20 is a technical standard used for smart contracts on the STABILA blockchain for implementing tokens with the STABILA Virtual Machine (SVM). It is fully compatible to ERC\u200c-20.","title":"SRC-20"},{"location":"contracts/trc20/#implementation-rules","text":"3 Optional Items Token Name string public constant name = \u201cSTABILAEuropeRewardCoin\u201d; Token Abbreviation string public constant symbol = \u201cTERC\u201d; Token Precision uint8 public constant decimals = 6; 6 Required Items contract SRC20 { function totalSupply() constant returns (uint theTotalSupply); function balanceOf(address _owner) constant returns (uint balance); function transfer(address _to, uint _value) returns (bool success); function transferFrom(address _from, address _to, uint _value) returns (bool success); function approve(address _spender, uint _value) returns (bool success); function allowance(address _owner, address _spender) constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); } totalSupply() This function returns the total supply of the token. balanceOf() This function returns the token balance of the specific account. transfer() This function is used to transfer an amount of tokens from the smart contract to a specific address. approve() This function is used to authorize the third party (like a DAPP smart contract) to transfer token from the token owner\u2019s account. transferFrom() This function is used to allow the third party to transfer token from an owner account to a receiver account. The owner account must be approved to be called by the third party. allowance() This function is used to query the remaining amount of tokens the third party can transfer. 2 Event Functions When token is successfully transferred, it has to trigger Transfer Event. event Transfer(address indexed _from, address indexed _to, uint256 _value) When approval() is successfully called, it has to trigger Approval Event. event Approval(address indexed _owner, address indexed _spender, uint256 _value)","title":"Implementation Rules"},{"location":"contracts/trc20/#example","text":"pragma solidity ^0.4.16; interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; } contract TokenSRC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the sstabilagly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenSRC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] >= _value); // Check for overflows require(balanceOf[_to] + _value >= balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; emit Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply emit Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); // Check if the targeted balance is enough require(_value <= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply emit Burn(_from, _value); return true; } }","title":"Example"},{"location":"developers/advanced-configuration/","text":"Advanced Configurations \u00b6 we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default. LevelDB \u00b6 You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = \"database\", index.directory = \"index\", # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, executive, executive_schedule. # Otherwise, db configs will remain defualt and data will be stored in # the path of \"output-directory\" or which is set by \"-d\" (\"--output-directory\"). # Attention: name is a required field that must be set !!! properties = [ { name = \"account\", path = \"/path/to/accout\", // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database accout will be stored in the path of /path/to/accout/database while the index be stored in /path/to/accout/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options. gRPC \u00b6 You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } } backup \u00b6 You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one which with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ \"192.168.0.101\" ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ \"192.168.0.100\" ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"Advanced Configuration"},{"location":"developers/advanced-configuration/#advanced-configurations","text":"we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default.","title":"Advanced Configurations"},{"location":"developers/advanced-configuration/#leveldb","text":"You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = \"database\", index.directory = \"index\", # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, executive, executive_schedule. # Otherwise, db configs will remain defualt and data will be stored in # the path of \"output-directory\" or which is set by \"-d\" (\"--output-directory\"). # Attention: name is a required field that must be set !!! properties = [ { name = \"account\", path = \"/path/to/accout\", // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database accout will be stored in the path of /path/to/accout/database while the index be stored in /path/to/accout/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options.","title":"LevelDB"},{"location":"developers/advanced-configuration/#grpc","text":"You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } }","title":"gRPC"},{"location":"developers/advanced-configuration/#backup","text":"You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one which with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ \"192.168.0.101\" ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ \"192.168.0.100\" ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"backup"},{"location":"developers/contribution/","text":"How to contribute \u00b6 java-stabila is an open source project. It is the work of contributors. We appreciate your help! Here are instructions to get you started. They are not perfect, so please let us know if anything feels wrong or incomplete. Contribution guidelines \u00b6 First of all, java-stabila follows GitFlow, the branches description in the java-stabila project are listed as follow: master branch: This branch contains the latest code released to the production environment. It can only be merged, and can not be modified directly in this branch. develop branch: This branch is the main development branch. It contains the complete code that is going to release. It can only be merged, and can not be modified directly in this branch. feature branch: This branch is used to develop new features. It is created based on develop branch. Once the development is finished, it should be merged into develop branch, and then delete the branch. release branch: This is the branch that is going to be released. It is created based on develop branch. In this branch, small fix and modification of final version of metadata is allowed. When the code is released, this branch should be merged into master branch (tag needed) and develop branch. The final test before release uses this branch. hotfix branch: This branch is used to fix a bug when an online bug is found. It is created based on master branch. When bug fix is done, it should be merged into master branch(as a new release) and develop and then delete the branch. branch. Pull requests \u00b6 If you'd like to contribute to java-stabila, you should follow the steps below: - Fork a repository from stabilaprotocol/java-stabila allows you to freely experiment with changes without affecting the original project - Fix some code and Commit your modified code. - Send a Pull Request\uff08PR\uff09for the maintainers to review and merge into the main code base. notice \uff1aWhen you create a new PR\uff0cplease choose the stabilaprotocol/java-stabila as the base repository and choose your fork/java-stabila as the head repository. And you must choose develop as the base repository branch, which means we will merge the PR into our develop branch when reviewed and approved. Additionally, if you are writing a new feature, please ensure you add appropriate test cases under /src/test . After the PR is checked by our Sonar check procedure and Travis CI continuous-integration check procedure automaticly, we maintainers will review the code changed and give some advices for modifying if necessary.Once approved, we will close the PR and merge into the protocol/java-stabila's develop branch. We are always happy to receive pull requests, and do our best to review them as fast as possible. Not sure if that typo is worth a pull request? Do it! We would appreciate it. If your pull request is not accepted on the first try, don't be discouraged as it can be a possible oversight. Please explain your code as detailed as possible to make it easier for us to understand. Please make sure your contributions adhere to our coding guidelines: Code must be documented adhering to the Google Style Code must pass Sonar detection. Pull requests need to be based on and opened against the develop branch. Commit messages should be started with verb, and the first letter should be a lowercase.The length of commit message must be limited in 50 words. Create issues \u00b6 Any significant improvement should be documented as a GitHub issue before anyone starts working on it. When filing an issue, make sure to answer these three questions: What did you do? What did you expect to see? What did you see instead? Please check existing issues and docs first! \u00b6 Please take a moment to check that your bug report or improvement proposal doesn't already exist. If it does, please add a quick \"+1\" or \"I have this problem too\". This will help prioritize the most common problems and requests. Community Developers Incentives Programme \u00b6 Bonus point applies in STABILA incentives programme. Developers can earn points by contributing to STABILA. You can find your points ranking at Stabilascan . The Top 5 scored developers (for every month, quarter and year) can win a cash reward. Writing Documentation \u00b6 Documentation repository located at: documentation-en is the English version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder.","title":"Contribution"},{"location":"developers/contribution/#how-to-contribute","text":"java-stabila is an open source project. It is the work of contributors. We appreciate your help! Here are instructions to get you started. They are not perfect, so please let us know if anything feels wrong or incomplete.","title":"How to contribute"},{"location":"developers/contribution/#contribution-guidelines","text":"First of all, java-stabila follows GitFlow, the branches description in the java-stabila project are listed as follow: master branch: This branch contains the latest code released to the production environment. It can only be merged, and can not be modified directly in this branch. develop branch: This branch is the main development branch. It contains the complete code that is going to release. It can only be merged, and can not be modified directly in this branch. feature branch: This branch is used to develop new features. It is created based on develop branch. Once the development is finished, it should be merged into develop branch, and then delete the branch. release branch: This is the branch that is going to be released. It is created based on develop branch. In this branch, small fix and modification of final version of metadata is allowed. When the code is released, this branch should be merged into master branch (tag needed) and develop branch. The final test before release uses this branch. hotfix branch: This branch is used to fix a bug when an online bug is found. It is created based on master branch. When bug fix is done, it should be merged into master branch(as a new release) and develop and then delete the branch. branch.","title":"Contribution guidelines"},{"location":"developers/contribution/#pull-requests","text":"If you'd like to contribute to java-stabila, you should follow the steps below: - Fork a repository from stabilaprotocol/java-stabila allows you to freely experiment with changes without affecting the original project - Fix some code and Commit your modified code. - Send a Pull Request\uff08PR\uff09for the maintainers to review and merge into the main code base. notice \uff1aWhen you create a new PR\uff0cplease choose the stabilaprotocol/java-stabila as the base repository and choose your fork/java-stabila as the head repository. And you must choose develop as the base repository branch, which means we will merge the PR into our develop branch when reviewed and approved. Additionally, if you are writing a new feature, please ensure you add appropriate test cases under /src/test . After the PR is checked by our Sonar check procedure and Travis CI continuous-integration check procedure automaticly, we maintainers will review the code changed and give some advices for modifying if necessary.Once approved, we will close the PR and merge into the protocol/java-stabila's develop branch. We are always happy to receive pull requests, and do our best to review them as fast as possible. Not sure if that typo is worth a pull request? Do it! We would appreciate it. If your pull request is not accepted on the first try, don't be discouraged as it can be a possible oversight. Please explain your code as detailed as possible to make it easier for us to understand. Please make sure your contributions adhere to our coding guidelines: Code must be documented adhering to the Google Style Code must pass Sonar detection. Pull requests need to be based on and opened against the develop branch. Commit messages should be started with verb, and the first letter should be a lowercase.The length of commit message must be limited in 50 words.","title":"Pull requests"},{"location":"developers/contribution/#create-issues","text":"Any significant improvement should be documented as a GitHub issue before anyone starts working on it. When filing an issue, make sure to answer these three questions: What did you do? What did you expect to see? What did you see instead?","title":"Create issues"},{"location":"developers/contribution/#please-check-existing-issues-and-docs-first","text":"Please take a moment to check that your bug report or improvement proposal doesn't already exist. If it does, please add a quick \"+1\" or \"I have this problem too\". This will help prioritize the most common problems and requests.","title":"Please check existing issues and docs first!"},{"location":"developers/contribution/#community-developers-incentives-programme","text":"Bonus point applies in STABILA incentives programme. Developers can earn points by contributing to STABILA. You can find your points ranking at Stabilascan . The Top 5 scored developers (for every month, quarter and year) can win a cash reward.","title":"Community Developers Incentives Programme"},{"location":"developers/contribution/#writing-documentation","text":"Documentation repository located at: documentation-en is the English version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder.","title":"Writing Documentation"},{"location":"developers/deployment/","text":"Deployment \u00b6 Premise \u00b6 Create separate directories for fullnode and soliditynode NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/stabilaprotocol/java-stabila and extract it to /deploy/java-stabila Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get \"Build Failed\" result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores Deployment Guide \u00b6 1. Build the java-stabila project cd /deploy/java-stabila ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/stabilaprotocol/stabila-deployment. main_net_config.conf is the configuration for MainNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/stabilaprotocol/stabila-deployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/stabilaprotocol/stabila-deployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --executive -c your config.conf(Example\uff1a/data/java-stabila/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --executive -c /data/java-stabila/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by STABILA. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.executives with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --executive -c your config.conf (Example\uff1a/data/java-stabila/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --executive -c /data/java-stabila/config.conf Logging and Network Connection Verification \u00b6 Logs for both nodes are located in /deploy/\\*/logs/stabila.log . Use tail -f /logs/stabila.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823 Stop Node Gracefully \u00b6 Create file stop.sh\uff0cuse kill -15 to close FullNode.jar(or SolidityNode.jar). You need to modify pid= ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-stabila process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-stabila killed successfully!\" break fi done FullNode and SolidityNode Fast Deployment \u00b6 Download fast deployment script, run the script according to different types of node. Scope of use This script could be used on Linux/MacOS, but not on Windows. Just Support FullNode and SolidityNode. Download and run script wget https://github.com/stabilaprotocol/stabila-deployment/blob/master/deploy_stabila.sh -O deploy_stabila.sh Parameter Illustration bash deploy_stabila.sh --app [ FullNode | SolidityNode ] --net [ mainnet | testnet | privatenet ] --db [ keep | remove | backup ] --heap-size <heapsize> --app Optional, Running application. The default node is Fullnode and it could be FullNode or SolidityNode. --net Optional, Connecting network. The default network is mainnet and it could be mainnet, testnet. --db Optional, The way of data processing could be keep, remove and backup. Default is keep. If you launch two different networks, like from mainnet to testnet or from testnet to mainnet, you need to delete database. --trust-node Optional, It only works when deploying SolidityNode. Default is 127 .0.0.1:50051. The specified gRPC service of Fullnode, like 127 .0.0.1:50051 or 13 .125.249.129:50051. --rpc-port Optional, Port of grpc. Default is 50051 . If you deploy SolidityNode and FullNode on the same host\uff0cyou need to configure different ports. --commit Optional, commitid of project. --branch Optional, branch of project. Mainnet default is latest release and Testnet default is master. --heap-size Optional, jvm option: Xmx. The default heap-size is 0 .8 * memory size. --work_space Optional, default is current directory. Deployment of FullNode on the one host wget https://raw.githubusercontent.com/stabilaprotocol/StabilaDeployment/master/deploy_stabila.sh -O deploy_stabila.sh bash deploy_stabila.sh Deployment of SolidityNode on the one host wget https://raw.githubusercontent.com/stabilaprotocol/StabilaDeployment/master/deploy_stabila.sh -O deploy_stabila.sh # User can self-configure the IP and Port of GRPC service in the trust-node field of SolidityNode. trust-node is the fullnode you just deploy. bash deploy_stabila.sh --app SolidityNode --trust-node <grpc-ip:grpc-port> Deployment of FullNode and SolidityNode on the same host # You need to configure different gRPC ports on the same host because gRPC port is available on SolidityNode and FullNodeConfigure and it cannot be set as default value 50051. In this case the default value of rpc port is set as 50041. wget https://raw.githubusercontent.com/stabilaprotocol/StabilaDeployment/master/deploy_stabila.sh -O deploy_stabila.sh bash deploy_stabila.sh --app FullNode bash deploy_stabila.sh --app SolidityNode --rpc-port 50041 Grpc Gateway Deployment \u00b6 Summary This script helps you download the code from https://github.com/stabilaprotocol/grpc-gateway and deploy the code on your environment. Pre-requests Please follow the guide on https://github.com/stabilaprotocol/grpc-gateway Install Golang, Protoc, and set $GOPATH environment variable according to your requirement. Download and run script wget https://github.com/stabilaprotocol/stabila-deployment/blob/master/deploy_grpc_gateway.sh -O deploy_grpc_gateway.sh Parameter Illustration bash deploy_grpc_gateway.sh --rpchost [ rpc host ip ] --rpcport [ rpc port number ] --httpport [ http port number ] --rpchost The fullnode or soliditynode IP where the grpc service is provided. Default value is \"localhost\" . --rpcport The fullnode or soliditynode port number grpc service is consuming. Default value is 50051 . --httpport The port intends to provide http service provided by grpc gateway. Default value is 18890 . Example Use default configuration\uff1a bash deploy_grpc_gateway.sh Use customized configuration\uff1a bash deploy_grpc_gateway.sh --rpchost 127 .0.0.1 --rpcport 50052 --httpport 18891 Event Subscribe plugin Deployment \u00b6 This is an implementation of Stabila eventsubscribe model. api module defines IPluginEventListener, a protocol between Java-stabila and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from Java-stabila and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb. Setup/Build Clone the repo git clone https://github.com/stabilaprotocol/event-plugin.git Go to eventplugin cd event-plugin run ./gradlew build This will produce one plugin zip, named plugin-kafka-1.0.0.zip , located in the event-plugin/build/plugins/ directory. Edit **config.conf** of Java-stabila\uff0c add the following fileds: event.subscribe = { path = \"\" // absolute path of plugin server = \"\" // target server address to receive event triggers dbconfig=\"\" // dbname|username|password topics = [ { triggerName = \"block\" // block trigger, the value can't be modified enable = false topic = \"block\" // plugin topic, the value could be modified }, { triggerName = \"transaction\" enable = false topic = \"transaction\" }, { triggerName = \"contractevent\" enable = true topic = \"contractevent\" }, { triggerName = \"contractlog\" enable = true topic = \"contractlog\" } ] filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } } path : is the absolute path of \"plugin-kafka-1.0.0.zip\" server : Kafka server address topics : each event type maps to one Kafka topic, we support four event types subscribing, block, transaction, contractlog and contractevent. dbconfig : db configuration information for mongodb, if using kafka, delete this one; if using Mongodb, add like that dbname|username|password triggerName : the trigger type, the value can't be modified. enable : plugin can receive nothing if the value is false. topic : the value is the kafka topic to receive events. Make sure it has been created and Kafka process is running filter : filter condition for process trigger. note : if the server is not 127.0.0.1, pls set some properties in config/server.properties file remove comment and set listeners=PLAINTEXT://:9092 remove comment and set advertised.listeners to PLAINTEXT://host_ip:9092 Install Kafka On Mac : brew install kafka On Linux : cd /usr/local wget http://archive.apache.org/dist/kafka/0.10.2.2/kafka_2.10-0.10.2.2.tgz tar -xzvf kafka_2.10-0.10.2.2.tgz mv kafka_2.10-0.10.2.2 kafka add \"export PATH=$PATH:/usr/local/kafka/bin\" to end of /etc/profile source /etc/profile kafka-server-start.sh /usr/local/kafka/config/server.properties & Note : make sure the version of Kafka is the same as the version set in build.gradle of eventplugin project.(kafka_2.10-0.10.2.2 kafka) Run Kafka On Mac : zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties & kafka-server-start /usr/local/etc/kafka/server.properties On Linux : zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties & Sleep about 3 seconds kafka-server-start.sh /usr/local/kafka/config/server.properties & Create topics to receive events, the topic is defined in config.conf On Mac : kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent On Linux : kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent Kafka consumer On Mac : kafka-console-consumer --bootstrap-server localhost:9092 --topic block kafka-console-consumer --bootstrap-server localhost:9092 --topic transaction kafka-console-consumer --bootstrap-server localhost:9092 --topic contractlog kafka-console-consumer --bootstrap-server localhost:9092 --topic contractevent On Linux : kafka-console-consumer.sh --zookeeper localhost:2181 --topic block kafka-console-consumer.sh --zookeeper localhost:2181 --topic transaction kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractlog kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractevent Load plugin in Java-stabila add --es to command line, for example: java -jar FullNode.jar -p privatekey -c config.conf --es Event filter which is defined in config.conf, path: event.subscribe filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"TVkNuE1BYxECWq85d8UR9zsv6WppBns9iH\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"f0f1e23ddce8a520eaa7502e02fa767cb24152e9a86a4bf02529637c4e57504b\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } Download and install MongoDB Suggested Configuration CPU/ RAM: 16Core / 32G DISK: 500G System: CentOS 64 The version of MongoDB is 4.0.4 , below is the command: cd /home/java-stabila curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.4.tgz tar zxvf mongodb-linux-x86_64-4.0.4.tgz mv mongodb-linux-x86_64-4.0.4 mongodb Set environment - export MONGOPATH=/home/java-stabila/mongodb/ - export PATH=$PATH:$MONGOPATH/bin Create mongodb config The path is : /etc/mongodb/mgdb.conf cd /etc/mongodb touch mgdb.conf Create data&log folder for mongodb Create data, log subfolder in mongodb directory, and add their absolute path to mgdb.conf Example: dbpath=/home/java-stabila/mongodb/data logpath=/home/java-stabila/mongodb/log/mongodb.log port=27017 logappend=true fork=true bind_ip=0.0.0.0 auth=true wiredTigerCacheSizeGB=2 Note: - bind_ip must be configured to 0.0.0.0\uff0cotherwise remote connection will be refused. - wiredTigerCacheSizeGB, must be configured to prevent OOM Launch MongoDB - mongod --config /etc/mongodb/mgdb.conf Create admin account: - mongo - use admin - db.createUser({user:\"root\",pwd:\"admin\",roles:[{role:\"root\",db:\"admin\"}]}) Create eventlog and its owner account db.auth(\"root\", \"admin\") use eventlog db.createUser({user:\"stabila\",pwd:\"123456\",roles:[{role:\"dbOwner\",db:\"eventlog\"}]}) database: eventlog, username: stabila, password: 123456 Firewall rule: - iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT Remote connection via mongo: mongo 47.90.245.68:27017 use eventlog db.auth(\"stabila\", \"123456\") show collections db.block.find() Query block trigger data: db.block.find({blockNumber: {$lt: 1000}}); // return records whose blockNumber less than1000 Set database index to speedup query: cd /{projectPath} sh insertIndex.sh Advanced Configurations \u00b6 Read the Advanced Configuration","title":"Deployment"},{"location":"developers/deployment/#deployment","text":"","title":"Deployment"},{"location":"developers/deployment/#premise","text":"Create separate directories for fullnode and soliditynode NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/stabilaprotocol/java-stabila and extract it to /deploy/java-stabila Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get \"Build Failed\" result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores","title":"Premise"},{"location":"developers/deployment/#deployment-guide","text":"1. Build the java-stabila project cd /deploy/java-stabila ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/stabilaprotocol/stabila-deployment. main_net_config.conf is the configuration for MainNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/stabilaprotocol/stabila-deployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/stabilaprotocol/stabila-deployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --executive -c your config.conf(Example\uff1a/data/java-stabila/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --executive -c /data/java-stabila/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by STABILA. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.executives with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --executive -c your config.conf (Example\uff1a/data/java-stabila/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --executive -c /data/java-stabila/config.conf","title":"Deployment Guide"},{"location":"developers/deployment/#logging-and-network-connection-verification","text":"Logs for both nodes are located in /deploy/\\*/logs/stabila.log . Use tail -f /logs/stabila.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823","title":"Logging and Network Connection Verification"},{"location":"developers/deployment/#stop-node-gracefully","text":"Create file stop.sh\uff0cuse kill -15 to close FullNode.jar(or SolidityNode.jar). You need to modify pid= ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep FullNode.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-stabila process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-stabila killed successfully!\" break fi done","title":"Stop Node Gracefully"},{"location":"developers/deployment/#fullnode-and-soliditynode-fast-deployment","text":"Download fast deployment script, run the script according to different types of node.","title":"FullNode and SolidityNode Fast Deployment"},{"location":"developers/deployment/#grpc-gateway-deployment","text":"","title":"Grpc Gateway Deployment"},{"location":"developers/deployment/#event-subscribe-plugin-deployment","text":"This is an implementation of Stabila eventsubscribe model. api module defines IPluginEventListener, a protocol between Java-stabila and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from Java-stabila and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb.","title":"Event Subscribe plugin Deployment"},{"location":"developers/deployment/#advanced-configurations","text":"Read the Advanced Configuration","title":"Advanced Configurations"},{"location":"developers/gpg/","text":"This file contains the PGP keys of official support. Users: pgp < KEYS or gpg --import KEYS or gpg --keyserver hkp://keys.gnupg.net --search-keys support@stabila.network pub rsa3072 2020-10-20 [SC] fingerprint = C07A AC17 C98D 205F 0CE3 0BF9 7F0A F58B 65C7 EEF4 uid Stabila-Support support@stabila.network sub rsa3072 2020-10-20 [E] -----BEGIN PGP PUBLIC KEY BLOCK----- mQGNBF+O4sMBDADTV2ymtGL+iZOAqc+U+jG8SLJRZlrw3k0Yc9aPeMvVvikAC7Sl j+3vTU5JjCYWPmcRqkHo1RyNImZg2GoikMB+y4/kAu/IHYyIbKlXQiC/XDPQ0Gpk 0mq74Df/24DFXBjYm9lpvisavaaVnQOxxwvLdVxBMdKZoZALcmy3dSBHVuqOfqrV znD5zE6fSpGonCiCZSx34VRCe5rNTBj0DnTjmBo3WzroxkjMqVeXpt8hWmfwUPGb EjvkopzGk+RtHfZvJrLrDsd3XF0M1iDzHSpBpVTs2kIoEMN2wK6YbMdYJk6mQDs4 3IH1uEiwNNd+npUDSPX2mUuPDmcZgO2msiXC/SuSSxZ3tEWQQ/g9Uzf5gv494em5 DNGmoS5EUDnWjv1CtmHsBclxmb1VS72CsxQobnUcQ4LosKJ1eCK6cgOCTbPAtwGf VitXUZRubwfUmPKEQOaoUoYtdOR50V0aSHfDFnNO3yhyZESUZBtNK9J7JdBTaGdo Z/TXxUbpNF5ZHrcAEQEAAbQjVHJvbi1TdXBwb3J0IDxzdXBwb3J0QHRyb24ubmV0 d29yaz6JAc4EEwEIADgWIQTAeqwXyY0gXwzjC/l/CvWLZcfu9AUCX47iwwIbAwUL CQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRB/CvWLZcfu9GtCDACRsKze6Bk9TJik bz5IkdUfCBY9I8wCgcjqqO1knC47vwAwSt9GckEMu9LYTrrTzbedgBH0PF3FHFxy DpnQf9UgQ1AGOLm8H2ZN0W7ZF9wHtDJKjvV4GKIOmIi9tJ57LqqLAaPGbO01DAx4 0PoEM4257fbKGYnAUUgKZxRJBAMhE8DdlsnQ1qqPeVVxmBFYD8zEjvW0ROfV59FI OfReFJoCvJoX9LpMGLi1HwichJkcItXwtNAdFbNLJSYc8ZatcmDkkHTwRn2wRHBc aJOFGjZma2xjkCXB+4QFwjI2ng9Y2HpufwquP0ptUepq7kf1WeFdzChXlIOx+35y pK67EQxr/ExpIl8Sti2Oe4pPzhOoRVs05y+9ghVQ9rN7/16y7/w3GAZelrvEucM8 KYPBPIBILu7atuXHDhgeCDfbUIR3npAkFZJpW702BUg8jP/opwGlPvB7+A3+7r0e zLlwVyfKXTq1SbeaMgUyQ44vJpXBTiz2cqQZ5LC/OJuumw6NgBW5AY0EX47iwwEM AJjdQnztPlnTydbRf/XgAbNX5dFDE2+T86LW03ke/oHMFWTg3iWoQs/dAh3ucPw7 imU05mJr4+FrVFmU1NULLfG5T7dEPzPkZYN/pKa7EwBV2alLN6tab7gpS3ABYtnq GFZSOAGa9dwwhpAmItSG+2nBL76+7fdGmxzUsoGtjbM/m2nrMtuj/04y/aGD6xC8 6Ncup+syJtjhN2i+98PqNwhlAd9wYrzed8fzUH/84tXAIdKLZS7wdQA6fWyj78nW I9wMlS5h/QDBsDXDd9/Bv4FgUfIFgLR+K6M6gx6Hl4AyWN1JvWIlvuqPLqcEv3b5 bZlOCRB5NsuEzLBdEaydN8oEcL9G578o0sAp6qbdza/Mtbq+n1y9FSItuYJxHtZC RpeICwKgOS48YeLRjvBYhogTT2GqPaoT/a6iMKT4c+MgbvgD487SjagYlf0CJ6PD ENnjIZfERXgwAFq528CWJjYwF9acjEGQkcJzH5+R3Ev5d/YdlQLFtdUirB4rc/5T JQARAQABiQG2BBgBCAAgFiEEwHqsF8mNIF8M4wv5fwr1i2XH7vQFAl+O4sMCGwwA CgkQfwr1i2XH7vSfaQv/f8kcLDn+wCN7egSqt4XXKOpDLyKIB/cczGfRWQG4pZns 3rFjnvqKnYMTkm6vnf0JW8jUgW5V2PxNxVOKC0/KhbYX3QikUqO1wcjr7a4JsOtH PNZd8SXCRvLLifyw6QkK5FnFNLBA8oV5bej73gpEaSqF0kXZI9UP9dfvCp0R22Zw 48TxEbhj9i8x6pWZ4hckbojGVYqeo3LdSVMA75FXVfFzVoRJgvow0lEXqTKTPASU PuWejMXfqdN1Vu20IJvCgij7l0RTwK7ushX6a6mX5QAGIb4Qa3UkHGtEgwOJ/QVF WzjNwu0praNGHqIqirxpBT6ze/Oz47IsSGY727+4Edanz73upPwkt54Rb6wimxKf MTSixi+cpzJgsVBiJY4VRIuGSq3ITXZjaEoM7Zu6+0KIb19r6PcuP+wMZJPkup0/ 8nrS3HspazsZUq5kz3fFy2MkXv7dXduQN3iqKEtmedcCDCnglnzi0O/Ryl2niqWw iCwhvZAEFCYiEkUJdk+A =G5T7 -----END PGP PUBLIC KEY BLOCK-----","title":"Contact Us (GPG Key)"},{"location":"developers/java-stabila/","text":"Java-stabila \u00b6 The java-stabila repository is: https://github.com/stabilaprotocol/java-stabila Branch Introduction master branch: This branch contains the latest code released to the production environment. It can only be merged, and can not be modified directly in this branch. develop branch: This branch is the main development branch. It contains the complete code that is going to release. It can only be merged, and can not be modified directly in this branch. feature branch: This branch is used to develop new features. It is created based on develop branch. Once the development is finished, it should be merged into develop branch, and then delete the branch. release branch: This is the branch that is going to be released. It is created based on develop branch. In this branch, small fix and modification of final version of metadata is allowed. When the code is released, this branch should be merged into master branch(tag needed) and develop branch. The final test before release uses this branch. hotfix branch: This branch is used to fix a bug when an online bug is found. It is created based on master branch. When bug fix is done, it should be merged into master branch(as a new release) and develop and then delete the branch. branch. Writing a new feature When you start to develop a new feature, please create a feature branch from develop branch under origin/feature . $ git checkout -b feature/my-feature develop # switch to 'feature/my-feature' When you finish the development, the new feature should be merged into develop branch. $ git commit -m \"description\" # submit the code $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout feature/my-feature # switch to 'feature/my-feature' $ git merge develop # merge 'develop', need to fix the conflict $ git push # submit to GitHub # make a Pull Request to wait the core developers to check $ git branch -d feature/my-feature # once it is merged, delete 'feature/my-feature' Fixing online bugs: When you start to fix an online bug, please create a hotfix branch from master branch under origin/hotfix . $ git checkout -b hotfix/my-hotfix master # switch to 'hotfix/my-hotfix' $ git commit -a -m \"Bumped version number to 3.1.4\" # submit and modify the version number When you finish the fix, it should be merged into master branch and develop branch. $ git commit -m \"description\" # submit the code $ git checkout master # switch to 'master' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge master # merge 'master', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check # tag 'master' $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge develop # merge 'develop', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check $ git branch -d hotfix/my-hotfix # once it is merged, delete 'my-hotfix' Your commit messages should detail why you made your change in addition to what you did (unless it is a tiny change). Finally, please make a PR. Additionally, if you are writing a new feature, please ensure you add appropriate test cases under /src/test .","title":"Java-Stabila"},{"location":"developers/java-stabila/#java-stabila","text":"The java-stabila repository is: https://github.com/stabilaprotocol/java-stabila","title":"Java-stabila"},{"location":"developers/litefullnode/","text":"Lite FullNode Tool \u00b6 Introduction \u00b6 Lite FullNode Tool is used to split the database of a FullNode into a Snapshot dataset and a History dataset . Snapshot dataset : the minimum dataset for quick startup of the Lite FullNode. History dataset : the archive dataset that used for historical data queries. Remember stop the FullNode process before any operation. This tool provides the ability to specify which dataset to split. The two datasets are split by the latest_block_number . Lite FullNode that startup by Snapshot dataset does not support query the historical data behind the latest_block_number , this tool also provides a merge function that can merge History dataset into the database of Lite FullNode. For more API details: HTTP&GRPC APIs Usage \u00b6 Options \u00b6 This tool provides independent cutting of Snapshot Dataset and History Dataset and a merge function. --operation | -o : [ split | merge ] specifies the operation as either to split or to merge --type | -t : [ snapshot | history ] is used only with split to specify the type of the dataset to be split; snapshot refers to Snapshot Dataset and history refers to History Dataset. --fn-data-path : FullNode database directory --dataset-path : dataset directory, when operation is split , dataset-path is the path that store the Snapshot Dataset or History Dataset , otherwise dataset-path should be the History Dataset path. Example \u00b6 Start a new FullNode using the default config, then an output-directory will be produced in the current directory. output-directory contains a sub-directory named database which is the database to be split. Split and get a Snapshot \u00b6 First, stop the FullNode and execute: // just for simplify, locate the snapshot into `/tmp` directory, java -jar LiteFullNodeTool.jar -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp then a snapshot directory will be generated in /tmp , pack this directory and copy it to somewhere that is ready to run a Lite Fullnode. Do not forget rename the directory from snapshot to database . (the default value of the storage.db.directory is database , make sure rename the snapshot to the specified value) Split a History \u00b6 If historical data query is needed, History dataset should be generated and merged into Lite FullNode. // just for simplify, locate the history into `/tmp` directory, java -jar LiteFullNodeTool.jar -o split -t history --fn-data-path output-directory/database --dataset-path /tmp A history directory will be generated in /tmp , pack this directory and copy it to a Lite Fullnode. History dataset always take a large storage, make sure the disk has enough volume to store the History dataset . Merge \u00b6 Both History Dataset and Snapshot Dataset have an info.properties file to identify the block height from which they are segmented. Make sure that the split_block_num in History Dataset is not less than the corresponding value in the Snapshot Dataset . After getting the History dataset , the Lite FullNode can merge the History dataset and become a real FullNode. // just for simplify, assume `History dataset` is locate in /tmp java -jar LiteFullNodeTool.jar -o merge --fn-data-path output-directory/database --dataset-path /tmp/history HTTP&GRPC APIs \u00b6 Some APIs are not supported on lite fullnode, here is the list: Http \u00b6 wallet/ walletsolidity/ getblockbyid getblockbyid getblockbylatestnum getblockbylatestnum getblockbylimitnext getblockbylimitnext getblockbynum getblockbynum getmerkletreevoucherinfo getmerkletreevoucherinfo gettransactionbyid gettransactionbyid gettransactioncountbyblocknum gettransactioncountbyblocknum gettransactioninfobyid gettransactioninfobyid gettransactionreceiptbyid isspend isspend scanandmarknotebyivk scanandmarknotebyivk scannotebyivk scannotebyivk scannotebyovk scannotebyovk totaltransaction GRPC \u00b6 protocol.Wallet protocol.WalletSolidity protocol.Database GetBlockById GetBlockByLatestNum GetBlockByLatestNum2 GetBlockByLimitNext GetBlockByLimitNext2 GetBlockByNum GetBlockByNum GetBlockByNum GetBlockByNum2 GetBlockByNum2 GetMerkleTreeVoucherInfo GetMerkleTreeVoucherInfo GetTransactionById GetTransactionById GetTransactionCountByBlockNum GetTransactionCountByBlockNum GetTransactionInfoById GetTransactionInfoById IsSpend IsSpend ScanAndMarkNoteByIvk ScanAndMarkNoteByIvk ScanNoteByIvk ScanNoteByIvk ScanNoteByOvk ScanNoteByOvk TotalTransaction These APIs can open forcibly by set openHistoryQueryWhenLiteFN = true, but not recommended.","title":"Run Lite FullNode"},{"location":"developers/litefullnode/#lite-fullnode-tool","text":"","title":"Lite FullNode Tool"},{"location":"developers/litefullnode/#introduction","text":"Lite FullNode Tool is used to split the database of a FullNode into a Snapshot dataset and a History dataset . Snapshot dataset : the minimum dataset for quick startup of the Lite FullNode. History dataset : the archive dataset that used for historical data queries. Remember stop the FullNode process before any operation. This tool provides the ability to specify which dataset to split. The two datasets are split by the latest_block_number . Lite FullNode that startup by Snapshot dataset does not support query the historical data behind the latest_block_number , this tool also provides a merge function that can merge History dataset into the database of Lite FullNode. For more API details: HTTP&GRPC APIs","title":"Introduction"},{"location":"developers/litefullnode/#usage","text":"","title":"Usage"},{"location":"developers/litefullnode/#options","text":"This tool provides independent cutting of Snapshot Dataset and History Dataset and a merge function. --operation | -o : [ split | merge ] specifies the operation as either to split or to merge --type | -t : [ snapshot | history ] is used only with split to specify the type of the dataset to be split; snapshot refers to Snapshot Dataset and history refers to History Dataset. --fn-data-path : FullNode database directory --dataset-path : dataset directory, when operation is split , dataset-path is the path that store the Snapshot Dataset or History Dataset , otherwise dataset-path should be the History Dataset path.","title":"Options"},{"location":"developers/litefullnode/#example","text":"Start a new FullNode using the default config, then an output-directory will be produced in the current directory. output-directory contains a sub-directory named database which is the database to be split.","title":"Example"},{"location":"developers/litefullnode/#split-and-get-a-snapshot","text":"First, stop the FullNode and execute: // just for simplify, locate the snapshot into `/tmp` directory, java -jar LiteFullNodeTool.jar -o split -t snapshot --fn-data-path output-directory/database --dataset-path /tmp then a snapshot directory will be generated in /tmp , pack this directory and copy it to somewhere that is ready to run a Lite Fullnode. Do not forget rename the directory from snapshot to database . (the default value of the storage.db.directory is database , make sure rename the snapshot to the specified value)","title":"Split and get a Snapshot"},{"location":"developers/litefullnode/#split-a-history","text":"If historical data query is needed, History dataset should be generated and merged into Lite FullNode. // just for simplify, locate the history into `/tmp` directory, java -jar LiteFullNodeTool.jar -o split -t history --fn-data-path output-directory/database --dataset-path /tmp A history directory will be generated in /tmp , pack this directory and copy it to a Lite Fullnode. History dataset always take a large storage, make sure the disk has enough volume to store the History dataset .","title":"Split a History"},{"location":"developers/litefullnode/#merge","text":"Both History Dataset and Snapshot Dataset have an info.properties file to identify the block height from which they are segmented. Make sure that the split_block_num in History Dataset is not less than the corresponding value in the Snapshot Dataset . After getting the History dataset , the Lite FullNode can merge the History dataset and become a real FullNode. // just for simplify, assume `History dataset` is locate in /tmp java -jar LiteFullNodeTool.jar -o merge --fn-data-path output-directory/database --dataset-path /tmp/history","title":"Merge"},{"location":"developers/litefullnode/#httpgrpc-apis","text":"Some APIs are not supported on lite fullnode, here is the list:","title":"HTTP&amp;GRPC APIs"},{"location":"developers/litefullnode/#http","text":"wallet/ walletsolidity/ getblockbyid getblockbyid getblockbylatestnum getblockbylatestnum getblockbylimitnext getblockbylimitnext getblockbynum getblockbynum getmerkletreevoucherinfo getmerkletreevoucherinfo gettransactionbyid gettransactionbyid gettransactioncountbyblocknum gettransactioncountbyblocknum gettransactioninfobyid gettransactioninfobyid gettransactionreceiptbyid isspend isspend scanandmarknotebyivk scanandmarknotebyivk scannotebyivk scannotebyivk scannotebyovk scannotebyovk totaltransaction","title":"Http"},{"location":"developers/litefullnode/#grpc","text":"protocol.Wallet protocol.WalletSolidity protocol.Database GetBlockById GetBlockByLatestNum GetBlockByLatestNum2 GetBlockByLimitNext GetBlockByLimitNext2 GetBlockByNum GetBlockByNum GetBlockByNum GetBlockByNum2 GetBlockByNum2 GetMerkleTreeVoucherInfo GetMerkleTreeVoucherInfo GetTransactionById GetTransactionById GetTransactionCountByBlockNum GetTransactionCountByBlockNum GetTransactionInfoById GetTransactionInfoById IsSpend IsSpend ScanAndMarkNoteByIvk ScanAndMarkNoteByIvk ScanNoteByIvk ScanNoteByIvk ScanNoteByOvk ScanNoteByOvk TotalTransaction These APIs can open forcibly by set openHistoryQueryWhenLiteFN = true, but not recommended.","title":"GRPC"},{"location":"developers/official-public-nodes/","text":"Official Public Nodes \u00b6 FullNodes \u00b6 gRPC port: 50051/tcp P2P network port: 18888/udp, 18888/tcp HTTP API port : 8090/tcp 3.225.171.164 52.53.189.99 18.196.99.16 34.253.187.192 18.133.82.227 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 15.207.144.3 13.124.62.58 35.182.229.162 18.209.42.127 3.218.137.187 34.237.210.82 47.241.20.47 161.117.85.97 161.117.224.116 161.117.83.38 SolidityNodes(deprecated) \u00b6 gRPC port: 50051/tcp HTTP API port : 8091/tcp 3.225.171.164 52.53.189.99 18.196.99.16 34.253.187.192 18.133.82.227 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 15.207.144.3 13.124.62.58 35.182.229.162 18.209.42.127 3.218.137.187 34.237.210.82 47.241.20.47 161.117.85.97 161.117.224.116 161.117.83.38","title":"Official Public Nodes"},{"location":"developers/official-public-nodes/#official-public-nodes","text":"","title":"Official Public Nodes"},{"location":"developers/official-public-nodes/#fullnodes","text":"gRPC port: 50051/tcp P2P network port: 18888/udp, 18888/tcp HTTP API port : 8090/tcp 3.225.171.164 52.53.189.99 18.196.99.16 34.253.187.192 18.133.82.227 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 15.207.144.3 13.124.62.58 35.182.229.162 18.209.42.127 3.218.137.187 34.237.210.82 47.241.20.47 161.117.85.97 161.117.224.116 161.117.83.38","title":"FullNodes"},{"location":"developers/official-public-nodes/#soliditynodesdeprecated","text":"gRPC port: 50051/tcp HTTP API port : 8091/tcp 3.225.171.164 52.53.189.99 18.196.99.16 34.253.187.192 18.133.82.227 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 15.207.144.3 13.124.62.58 35.182.229.162 18.209.42.127 3.218.137.187 34.237.210.82 47.241.20.47 161.117.85.97 161.117.224.116 161.117.83.38","title":"SolidityNodes(deprecated)"},{"location":"developers/resources/","text":"Resources \u00b6 STABILA Blockchain Browser https://stabilascan.org/ STABILA Wallet https://github.com/stabilaprotocol/wallet-cli STABILA Zksnark-java-sdk https://github.com/stabilaprotocol/zksnark-java-sdk STABILA Javascript API https://github.com/stabilaprotocol/stabilaweb","title":"Resources"},{"location":"developers/resources/#resources","text":"STABILA Blockchain Browser https://stabilascan.org/ STABILA Wallet https://github.com/stabilaprotocol/wallet-cli STABILA Zksnark-java-sdk https://github.com/stabilaprotocol/zksnark-java-sdk STABILA Javascript API https://github.com/stabilaprotocol/stabilaweb","title":"Resources"},{"location":"developers/run-in-idea/","text":"Run the FullNode with IDEA \u00b6 This document aims to facilitate developers with some experience to run the FullNode with IDEA. The following is for the master branch of java-stabila. Configure IDEA \u00b6 The configuration of IDEA Oracle JDK 1.8 OpenJDK is not currently supported Install Lombok plugin Tick Enable annotation processing Deployment guide \u00b6 1.Create a directory /deploy mkdir deploy 2.Clone the latest code git clone https://github.com/stabilaprotocol/java-stabila 3.Switch to the master branch cd java-stabila git checkout -t origin/master 4.Compile the code ./gradlew build The compilation process may take some time, please be patient. If the compilation is successful, you can see the information similar to the following: If you do not want to perform unit test tasks, you can run the following command: ./gradlew build -x test 5.Start the FullNode After compiling successfully, you can find the main function file through the path java-stabila / src / main / java / org / stabila / program / FullNode.java and then start a full node. After starting, you can check the log to verify whether the startup is successful. The log path is: /deploy/java-stabila/logs/stabila.log. If the startup is successful, you can see the following logs: Also,you can use this command like tail -f /logs/stabila.log to view the real-time log, as follows:","title":"Run FullNode in IDEA"},{"location":"developers/run-in-idea/#run-the-fullnode-with-idea","text":"This document aims to facilitate developers with some experience to run the FullNode with IDEA. The following is for the master branch of java-stabila.","title":"Run the FullNode with IDEA"},{"location":"developers/run-in-idea/#configure-idea","text":"The configuration of IDEA Oracle JDK 1.8 OpenJDK is not currently supported Install Lombok plugin Tick Enable annotation processing","title":"Configure IDEA"},{"location":"developers/run-in-idea/#deployment-guide","text":"1.Create a directory /deploy mkdir deploy 2.Clone the latest code git clone https://github.com/stabilaprotocol/java-stabila 3.Switch to the master branch cd java-stabila git checkout -t origin/master 4.Compile the code ./gradlew build The compilation process may take some time, please be patient. If the compilation is successful, you can see the information similar to the following: If you do not want to perform unit test tasks, you can run the following command: ./gradlew build -x test 5.Start the FullNode After compiling successfully, you can find the main function file through the path java-stabila / src / main / java / org / stabila / program / FullNode.java and then start a full node. After starting, you can check the log to verify whether the startup is successful. The log path is: /deploy/java-stabila/logs/stabila.log. If the startup is successful, you can see the following logs: Also,you can use this command like tail -f /logs/stabila.log to view the real-time log, as follows:","title":"Deployment guide"},{"location":"faq/","text":"The STABILA FAQ \u00b6 The STABILA FAQ Network Design and Protocol How can I generate an account? What is the network flow? After you create a token, how to change its status from 'not started yet' to 'participate'? Is there a place to see if all the Governors are producing blocks? Is the block producing time interval always remain the same? Will the block producing reward reduce half? If one of the top 21 Governors goes wrong, will it be removed from the SRs list? Is there a threshold to become a SR? 21 SRs shares the block producing reward equally or by their computing power? Will there be an over 50% computing power issue in STABILA network? Will voting burns STB? How long does SR's power last? What is the proof of a transaction\uff1f Why I Can't stake STB longer than 3 days How to calculate the transaction fee? How to calculate the number of bytes of transactions? How to reset my vote? Node Configuration If I replace the field value of 'genesis.block.executives' with the address generated in Stabilascan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? How can I specify the data storage path when start a node? How can I get asset from private net? Compile and Build java-stabila build failed with unit test issue Deployment How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? When to deploy private environment, what's the relationship of Governor and FullNode? Should I firstly deploy a Governor, and then deploy a FullNode\uff1f How to know whether my test Governor is running or not? Can SolidityNode and FullNode be deployed in one machine? Will they share the data? Running a Node As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f Under private environment, should I submit application information to STABILA to become a SR? At the worst scenario, if the Governor can not be connected, the maximum time it allows the Governor to recover its service\uff1f Does SolidityNode sync data from FullNode? Does a node have wallet function? Why does the block process time take so long? Smart Contract RPC Client and API How to sync wallet-cli with wallet on Stabilascan? Is gateway connected to SolidityNode\uff1f What is the different between 'getTransactionById' and 'getTransactionInfoById'? How to broadcast raw transaction\uff1f How to get token balance of an account? Error Log What does the following error message mean? Other Questions My Question is Not Listed Here? Network Design and Protocol \u00b6 How can I generate an account? \u00b6 You can use wallet-cli or Stabilascan . What is the network flow? \u00b6 Network flow depends on transaction volume. As a reference, the average size of a transaction currently is 200 bytes. After you create a token, how to change its status from 'not started yet' to 'participate'? \u00b6 You need to wait till the time reaches the start time of participation you set when create a token. After a token is created, only the token url and description can be modified. Is there a place to see if all the Governors are producing blocks? \u00b6 Please refer to Stabilascan Is the block producing time interval always remain the same? \u00b6 The current block producing time interval is 3 seconds. In the future, it may be improved to 1 second. Will the block producing reward reduce half? \u00b6 No. If one of the top 21 Governors goes wrong, will it be removed from the SRs list? \u00b6 If people stop voting for it, it will drop out of the top 21 SRs. Is there a threshold to become a SR? \u00b6 When the amount of votes you get ranks into top 21, you will become a SR. 21 SRs shares the block producing reward equally or by their computing power? \u00b6 It has nothing to do with computing power. The reward is a fixed 32 STB for each block produced. Will there be an over 50% computing power issue in STABILA network? \u00b6 No. Will voting burns STB? \u00b6 No. How long does SR's power last? \u00b6 Every 6 hours, the votes will be counted to check the qualifications of all the SRs. What is the proof of a transaction\uff1f \u00b6 Transaction hash. Why I Can't stake STB longer than 3 days \u00b6 Staked duration must be 3 days now. It means you can not unstake until the 3 days duration expires. If you don't unstake after 3 days, the staked STB will remain in staked status until you unstake it. How to calculate the transaction fee? \u00b6 please refer to https://stabilaprotocol.github.io/documentation-en/mechanism-algorithm/resource/ How to calculate the number of bytes of transactions? \u00b6 tx-size = grpcClient.getTransactionById(txId).get().getSerializedSize() + 60 How to reset my vote? \u00b6 You need to vote again, set your votes number to 0. Node Configuration \u00b6 If I replace the field value of 'genesis.block.executives' with the address generated in Stabilascan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? \u00b6 No need to delete other addresses, these addresses will be a part of your net, but if you do not own the private keys of these addresses, they will act like abandoned addresses. Note: The addresses of Zion\u3001Unit and Blackhole can not be deleted, but can be modified. How can I specify the data storage path when start a node? \u00b6 You can add the data storage path when you start the node, like: java -jar FullNode.jar -c config.conf -d /data/output How can I get asset from private net? \u00b6 In private network, you can set the initial account balance in config file. Please refer to below settings: genesis.block = { # Reserve balance assets = [ { accountName = \"TestA\" accountType = \"AssetIssue\" address = \"THRR7uvFbRLfNzpKPXEyQa8KCJqi59V59e\" balance = \"1000000000000000\" }, { accountName = \"TestB\" accountType = \"AssetIssue\" address = \"TBLZaw93rsnLJ1SWTvoPkr7GVg5ixn2Jv1\" balance = \"1000000000000000\" }, { accountName = \"TestC\" accountType = \"AssetIssue\" address = \"TJg8yZ4Co8RXsHmTWissmSL1VpL7dCybY1\" balance = \"1000000000000000\" } ] Compile and Build \u00b6 java-stabila build failed with unit test issue \u00b6 Please use './gradlew build -x test' to skip the test cases. Deployment \u00b6 How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? \u00b6 Java-stabila does not provide a default api to test. Once the service start, grpc commands can be sent. Based on that, there are several ways to test if the deployment is successful. You can also use the following command to test: > tail -f logs/stabila.log |grep \"MyheadBlockNumber\" When to deploy private environment, what's the relationship of Governor and FullNode? Should I firstly deploy a Governor, and then deploy a FullNode\uff1f \u00b6 Under private environment, there should be at least one Governor, there is no amount limit for FullNode. How to know whether my test Governor is running or not? \u00b6 Using the following command > tail -f logs/stabila.log |grep \"Try Produce Block\" Can SolidityNode and FullNode be deployed in one machine? Will they share the data? \u00b6 They can be deployed in one machine. You can specify the data storage path in configuration file db.directory = \"database\"\uff0cindex.directory = \"index\" . You can run FullNode.jar and SolidityNode.jar in different paths to separate the data and log. Remember to change the port in config.conf , because two nodes can not work using the same port. SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. Running a Node \u00b6 As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f \u00b6 If it is related to ip list: You need to update 'seed.ip' in config.conf, if it is the same as your public ip, and your computer is connected to the internet, it will try to connect other nodes, even if it fails to connect, the ip list will be stored into DB. If it is related to block and transaction: Under private environment, you need to modify the p2p version and parent hash. Under private environment, should I submit application information to STABILA to become a SR? \u00b6 Under private environment, no need to submit application information to STABILA to become a SR. Ask\uff1aWhich service port should be public to public network? Default port 18888, 50051 At the worst scenario, if the Governor can not be connected, the maximum time it allows the Governor to recover its service\uff1f \u00b6 The internet connection recovery time only depends on the recovery of Governor itself, has nothing to do with internet situation. Does SolidityNode sync data from FullNode? \u00b6 Yes. Does a node have wallet function? \u00b6 No, but the node provides wallet rpc api. Why does the block process time take so long? \u00b6 Java-stabila need more RAM to process transactions. Smart Contract \u00b6 RPC Client and API \u00b6 How to sync wallet-cli with wallet on Stabilascan? \u00b6 By using wallet-cli api 'ImportWallet'. Is gateway connected to SolidityNode\uff1f \u00b6 Gateway can connect to SolidityNode and FullNode. What is the different between 'getTransactionById' and 'getTransactionInfoById'? \u00b6 The data they return is from different data modules. 'getTransactionById' focuses on general transaction data, while 'getTransactionInfoById' focuses on transaction fee data. How to broadcast raw transaction\uff1f \u00b6 You can use 'wallet/broadcasthex'. How to get token balance of an account? \u00b6 You can use the following wallet-cli api: triggercontract contractaddress balanceOf(address) \"youraddress\" false 0 0 0 # Error Log \u00b6 What does the following error message mean? \u00b6 17:02:42.699 INFO [o.t.c.s.ExecutiveService] Try Produce Block 17:02:42.699 INFO [o.t.c.s.ExecutiveService] Not sync This message means your node does not sync with the network. Before producing blocks, it needs to sync data. You can use the following command to check the block height. > tail -f logs/stabila.log |grep \"MyheadBlockNumber\" Other Questions \u00b6 My Question is Not Listed Here? \u00b6 Feel free to join our community, just open an Issue on github: Github: stabilaprotocol/java-stabila","title":"FAQ"},{"location":"faq/#the-stabila-faq","text":"The STABILA FAQ Network Design and Protocol How can I generate an account? What is the network flow? After you create a token, how to change its status from 'not started yet' to 'participate'? Is there a place to see if all the Governors are producing blocks? Is the block producing time interval always remain the same? Will the block producing reward reduce half? If one of the top 21 Governors goes wrong, will it be removed from the SRs list? Is there a threshold to become a SR? 21 SRs shares the block producing reward equally or by their computing power? Will there be an over 50% computing power issue in STABILA network? Will voting burns STB? How long does SR's power last? What is the proof of a transaction\uff1f Why I Can't stake STB longer than 3 days How to calculate the transaction fee? How to calculate the number of bytes of transactions? How to reset my vote? Node Configuration If I replace the field value of 'genesis.block.executives' with the address generated in Stabilascan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? How can I specify the data storage path when start a node? How can I get asset from private net? Compile and Build java-stabila build failed with unit test issue Deployment How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? When to deploy private environment, what's the relationship of Governor and FullNode? Should I firstly deploy a Governor, and then deploy a FullNode\uff1f How to know whether my test Governor is running or not? Can SolidityNode and FullNode be deployed in one machine? Will they share the data? Running a Node As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f Under private environment, should I submit application information to STABILA to become a SR? At the worst scenario, if the Governor can not be connected, the maximum time it allows the Governor to recover its service\uff1f Does SolidityNode sync data from FullNode? Does a node have wallet function? Why does the block process time take so long? Smart Contract RPC Client and API How to sync wallet-cli with wallet on Stabilascan? Is gateway connected to SolidityNode\uff1f What is the different between 'getTransactionById' and 'getTransactionInfoById'? How to broadcast raw transaction\uff1f How to get token balance of an account? Error Log What does the following error message mean? Other Questions My Question is Not Listed Here?","title":"The STABILA FAQ"},{"location":"faq/#network-design-and-protocol","text":"","title":"Network Design and Protocol"},{"location":"faq/#how-can-i-generate-an-account","text":"You can use wallet-cli or Stabilascan .","title":"How can I generate an account?"},{"location":"faq/#what-is-the-network-flow","text":"Network flow depends on transaction volume. As a reference, the average size of a transaction currently is 200 bytes.","title":"What is the network flow?"},{"location":"faq/#after-you-create-a-token-how-to-change-its-status-from-not-started-yet-to-participate","text":"You need to wait till the time reaches the start time of participation you set when create a token. After a token is created, only the token url and description can be modified.","title":"After you create a token, how to change its status from 'not started yet' to 'participate'?"},{"location":"faq/#is-there-a-place-to-see-if-all-the-governors-are-producing-blocks","text":"Please refer to Stabilascan","title":"Is there a place to see if all the Governors are producing blocks?"},{"location":"faq/#is-the-block-producing-time-interval-always-remain-the-same","text":"The current block producing time interval is 3 seconds. In the future, it may be improved to 1 second.","title":"Is the block producing time interval always remain the same?"},{"location":"faq/#will-the-block-producing-reward-reduce-half","text":"No.","title":"Will the block producing reward reduce half?"},{"location":"faq/#if-one-of-the-top-21-governors-goes-wrong-will-it-be-removed-from-the-srs-list","text":"If people stop voting for it, it will drop out of the top 21 SRs.","title":"If one of the top 21 Governors goes wrong, will it be removed from the SRs list?"},{"location":"faq/#is-there-a-threshold-to-become-a-sr","text":"When the amount of votes you get ranks into top 21, you will become a SR.","title":"Is there a threshold to become a SR?"},{"location":"faq/#21-srs-shares-the-block-producing-reward-equally-or-by-their-computing-power","text":"It has nothing to do with computing power. The reward is a fixed 32 STB for each block produced.","title":"21 SRs shares the block producing reward equally or by their computing power?"},{"location":"faq/#will-there-be-an-over-50-computing-power-issue-in-stabila-network","text":"No.","title":"Will there be an over 50% computing power issue in STABILA network?"},{"location":"faq/#will-voting-burns-stb","text":"No.","title":"Will voting burns STB?"},{"location":"faq/#how-long-does-srs-power-last","text":"Every 6 hours, the votes will be counted to check the qualifications of all the SRs.","title":"How long does SR's power last?"},{"location":"faq/#what-is-the-proof-of-a-transaction","text":"Transaction hash.","title":"What is the proof of a transaction\uff1f"},{"location":"faq/#why-i-cant-stake-stb-longer-than-3-days","text":"Staked duration must be 3 days now. It means you can not unstake until the 3 days duration expires. If you don't unstake after 3 days, the staked STB will remain in staked status until you unstake it.","title":"Why I Can't stake STB longer than 3 days"},{"location":"faq/#how-to-calculate-the-transaction-fee","text":"please refer to https://stabilaprotocol.github.io/documentation-en/mechanism-algorithm/resource/","title":"How to calculate the transaction fee?"},{"location":"faq/#how-to-calculate-the-number-of-bytes-of-transactions","text":"tx-size = grpcClient.getTransactionById(txId).get().getSerializedSize() + 60","title":"How to calculate the number of bytes of transactions?"},{"location":"faq/#how-to-reset-my-vote","text":"You need to vote again, set your votes number to 0.","title":"How to reset my vote?"},{"location":"faq/#node-configuration","text":"","title":"Node Configuration"},{"location":"faq/#if-i-replace-the-field-value-of-genesisblockexecutives-with-the-address-generated-in-stabilascan-in-configconf-do-i-need-to-delete-other-addresses-do-i-need-to-delete-the-field-url-and-votecount","text":"No need to delete other addresses, these addresses will be a part of your net, but if you do not own the private keys of these addresses, they will act like abandoned addresses. Note: The addresses of Zion\u3001Unit and Blackhole can not be deleted, but can be modified.","title":"If I replace the field value of 'genesis.block.executives' with the address generated in Stabilascan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'?"},{"location":"faq/#how-can-i-specify-the-data-storage-path-when-start-a-node","text":"You can add the data storage path when you start the node, like: java -jar FullNode.jar -c config.conf -d /data/output","title":"How can I specify the data storage path when start a node?"},{"location":"faq/#how-can-i-get-asset-from-private-net","text":"In private network, you can set the initial account balance in config file. Please refer to below settings: genesis.block = { # Reserve balance assets = [ { accountName = \"TestA\" accountType = \"AssetIssue\" address = \"THRR7uvFbRLfNzpKPXEyQa8KCJqi59V59e\" balance = \"1000000000000000\" }, { accountName = \"TestB\" accountType = \"AssetIssue\" address = \"TBLZaw93rsnLJ1SWTvoPkr7GVg5ixn2Jv1\" balance = \"1000000000000000\" }, { accountName = \"TestC\" accountType = \"AssetIssue\" address = \"TJg8yZ4Co8RXsHmTWissmSL1VpL7dCybY1\" balance = \"1000000000000000\" } ]","title":"How can I get asset from private net?"},{"location":"faq/#compile-and-build","text":"","title":"Compile and Build"},{"location":"faq/#java-stabila-build-failed-with-unit-test-issue","text":"Please use './gradlew build -x test' to skip the test cases.","title":"java-stabila build failed with unit test issue"},{"location":"faq/#deployment","text":"","title":"Deployment"},{"location":"faq/#how-to-test-if-the-deployment-works-normally-if-there-is-a-test-api-or-command-like-redis-get-ping-return-pong","text":"Java-stabila does not provide a default api to test. Once the service start, grpc commands can be sent. Based on that, there are several ways to test if the deployment is successful. You can also use the following command to test: > tail -f logs/stabila.log |grep \"MyheadBlockNumber\"","title":"How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong?"},{"location":"faq/#when-to-deploy-private-environment-whats-the-relationship-of-governor-and-fullnode-should-i-firstly-deploy-a-governor-and-then-deploy-a-fullnode","text":"Under private environment, there should be at least one Governor, there is no amount limit for FullNode.","title":"When to deploy private environment, what's the relationship of Governor and FullNode? Should I firstly deploy a Governor, and then deploy a FullNode\uff1f"},{"location":"faq/#how-to-know-whether-my-test-governor-is-running-or-not","text":"Using the following command > tail -f logs/stabila.log |grep \"Try Produce Block\"","title":"How to know whether my test Governor is running or not?"},{"location":"faq/#can-soliditynode-and-fullnode-be-deployed-in-one-machine-will-they-share-the-data","text":"They can be deployed in one machine. You can specify the data storage path in configuration file db.directory = \"database\"\uff0cindex.directory = \"index\" . You can run FullNode.jar and SolidityNode.jar in different paths to separate the data and log. Remember to change the port in config.conf , because two nodes can not work using the same port. SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only.","title":"Can SolidityNode and FullNode be deployed in one machine? Will they share the data?"},{"location":"faq/#running-a-node","text":"","title":"Running a Node"},{"location":"faq/#as-under-private-environment-why-the-log-keeps-updating-with-all-other-public-nodes-whats-the-difference-of-private-and-public-environment","text":"If it is related to ip list: You need to update 'seed.ip' in config.conf, if it is the same as your public ip, and your computer is connected to the internet, it will try to connect other nodes, even if it fails to connect, the ip list will be stored into DB. If it is related to block and transaction: Under private environment, you need to modify the p2p version and parent hash.","title":"As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f"},{"location":"faq/#under-private-environment-should-i-submit-application-information-to-stabila-to-become-a-sr","text":"Under private environment, no need to submit application information to STABILA to become a SR. Ask\uff1aWhich service port should be public to public network? Default port 18888, 50051","title":"Under private environment, should I submit application information to STABILA to become a SR?"},{"location":"faq/#at-the-worst-scenario-if-the-governor-can-not-be-connected-the-maximum-time-it-allows-the-governor-to-recover-its-service","text":"The internet connection recovery time only depends on the recovery of Governor itself, has nothing to do with internet situation.","title":"At the worst scenario, if the Governor can not be connected, the maximum time it allows the Governor to recover its service\uff1f"},{"location":"faq/#does-soliditynode-sync-data-from-fullnode","text":"Yes.","title":"Does SolidityNode sync data from FullNode?"},{"location":"faq/#does-a-node-have-wallet-function","text":"No, but the node provides wallet rpc api.","title":"Does a node have wallet function?"},{"location":"faq/#why-does-the-block-process-time-take-so-long","text":"Java-stabila need more RAM to process transactions.","title":"Why does the block process time take so long?"},{"location":"faq/#smart-contract","text":"","title":"Smart Contract"},{"location":"faq/#rpc-client-and-api","text":"","title":"RPC Client and API"},{"location":"faq/#how-to-sync-wallet-cli-with-wallet-on-stabilascan","text":"By using wallet-cli api 'ImportWallet'.","title":"How to sync wallet-cli with wallet on Stabilascan?"},{"location":"faq/#is-gateway-connected-to-soliditynode","text":"Gateway can connect to SolidityNode and FullNode.","title":"Is gateway connected to SolidityNode\uff1f"},{"location":"faq/#what-is-the-different-between-gettransactionbyid-and-gettransactioninfobyid","text":"The data they return is from different data modules. 'getTransactionById' focuses on general transaction data, while 'getTransactionInfoById' focuses on transaction fee data.","title":"What is the different between 'getTransactionById' and 'getTransactionInfoById'?"},{"location":"faq/#how-to-broadcast-raw-transaction","text":"You can use 'wallet/broadcasthex'.","title":"How to broadcast raw transaction\uff1f"},{"location":"faq/#how-to-get-token-balance-of-an-account","text":"You can use the following wallet-cli api: triggercontract contractaddress balanceOf(address) \"youraddress\" false 0 0 0 #","title":"How to get token balance of an account?"},{"location":"faq/#error-log","text":"","title":"Error Log"},{"location":"faq/#what-does-the-following-error-message-mean","text":"17:02:42.699 INFO [o.t.c.s.ExecutiveService] Try Produce Block 17:02:42.699 INFO [o.t.c.s.ExecutiveService] Not sync This message means your node does not sync with the network. Before producing blocks, it needs to sync data. You can use the following command to check the block height. > tail -f logs/stabila.log |grep \"MyheadBlockNumber\"","title":"What does the following error message mean?"},{"location":"faq/#other-questions","text":"","title":"Other Questions"},{"location":"faq/#my-question-is-not-listed-here","text":"Feel free to join our community, just open an Issue on github: Github: stabilaprotocol/java-stabila","title":"My Question is Not Listed Here?"},{"location":"introduction/","text":"Repository \u00b6 Project Repository \u00b6 Github URL: https://github.com/stabilaprotocol . stabilaprotocol/java-stabila is the source code of the MainNet. stabilaprotocol/protocol is the defination of the api and data structure. stabilaprotocol/wallet-cli is the official command line wallet. Configuration File for the Net \u00b6 MainNet Configuration: GH stabilaprotocol/StabilaDeployment/main_net_config.conf","title":"Repository"},{"location":"introduction/#repository","text":"","title":"Repository"},{"location":"introduction/#project-repository","text":"Github URL: https://github.com/stabilaprotocol . stabilaprotocol/java-stabila is the source code of the MainNet. stabilaprotocol/protocol is the defination of the api and data structure. stabilaprotocol/wallet-cli is the official command line wallet.","title":"Project Repository"},{"location":"introduction/#configuration-file-for-the-net","text":"MainNet Configuration: GH stabilaprotocol/StabilaDeployment/main_net_config.conf","title":"Configuration File for the Net"},{"location":"introduction/dpos/","text":"DPoS \u00b6 Overview \u00b6 Blockchain is a distributed accounting system. In a blockchain system, there can be thousands of nodes, each of which independently stores the same ledger. If new transaction data is to be written into the ledger, approvals from these nodes are needed. Achieving this goal in an untrusted distributed environment is a complicated systematic quest. The blockchain system operates normally means each node in the blockchain can always keep the same ledger, provided that most nodes in the system are honest and reliable. In order to ensure that honest and reliable nodes can jointly supervise the transaction data written into the ledgers, each blockchain system needs to build its own consensus, which is equivalent to the constitution of the blockchain. As long as the vast majority of nodes comply with the consensus requirements, it is able to guarantee the results will certainly be credible, even in an untrusted distributed environment. Therefore, the significance of the consensus is that the honest nodes in the blockchain can ultimately achieve the agreement of the ledgers as long as they strictly abide by this consensus. There are several types of consensus, and the most commonly used are POW, POS, and DPoS. Definitely, different blockchain systems will have a unique way of implementation. This article will mainly introduce the DPoS consensus on which STABILA based. We will also explain the basic components and mechanisms of DPoS. Block Producing Process \u00b6 The executives of the blockchain network collect the newly generated transactions in the blockchain network and verify the legality of these transactions, then package the transactions in a block, record them as a new page on the ledger, and broadcast the page to the entire blockchain network. Other nodes will receive the new page and verify the legality of the transaction data on the page and add it to their own ledger. The executives will repeat this process so all new transaction data in the blockchain system can be recorded in the ledger. DPoS overview \u00b6 The role of consensus is to select the executives in the blockchain system. The executives verify the transaction data and keep the account in order to broadcast new accounts to other nodes in the network and obtains the approval of the new accounts from other nodes. As a specific implementation of consensus, DPoS works in the following way: The DPoS consensus selects some nodes as executives in the blockchain system based on the number of votes they receive. First, when the blockchain system starts to operate, a certain number of tokens will be issued, and then the tokens will be given to nodes in the blockchain system. A node can apply to be a executives candidate in the blockchain system with a portion of the tokens. Any token-holding node in the blockchain system can vote for these executives. Every t period of time, the votes for all the executives will be counted. Top N candidate nodes with the most votes will become executives for the next t period. After t period of time, the votes will be counted again to elect the new executives, and the cycle continues. Let's see how it's realized in the context of STABILA: Definition \u00b6 STABILA: refers to the STABILA network. The document does not distinguish between STABILA, STABILA blockchain, STABILA blockchain system, etc. STABILA token: refers to the equity token issued by and circulating in STABILA, known as STB. Executives candidates: nodes eligible for becoming executives in STABILA. Executives: nodes in STABILA qualified for book-keeping. They are usually called executives in DPoS consensus. In STABILA, there will be 21 executives, which are also called super nodes (or SR). Here, we will not distinguish between bookkeeper, executive, supernode, SR, etc. Bookkeeping: the process of verifying transactions and recording them in a ledger. Because ledgers in STABILA are carried by blocks, the bookkeeping process is also called block generation. We will not distinguish between bookkeeping and block generation in the document. Bookkeeping order: block generation order. The descending order of the 21 executives based on the number of votes they receive. Block time: STABILA sets block time to be 3 seconds. This means a block is generated every 3 seconds. Slot: after each block is generated, it can be put into a slot; and each generated block will take up a slot. For example, there are 20 slots for every minute. When a block is generated during the block time, the corresponding slot will be filled. However, if a block is not generated, then the corresponding slot will be empty. The next block generated will fill in a new corresponding slot. Epoch: STABILA sets an Epoch to be 6 hours. The last 2 block time of an Epoch is the maintenance period, during which block generating order for the next Epoch will be decided. The maintenance period: STABILA sets the period to be 2 block time, which is 6 seconds. This period of time is used to count the votes for executives. There are 4 Epochs in 24 hours, and naturally, 4 maintenance periods. During the maintenance period, no block is generated and block generation order for the next Epoch is decided. Election mechanism \u00b6 Votes In STABILA, 1 STB equals 1 vote. Voting process In STABILA, voting for executives is a special transaction. Nodes can vote for executives through generating a voting transaction. Vote counting During each maintenance period, the votes for executives will be counted. The top 21 executives with the most votes will be the Governors for the next Epoch. Block generation mechanism \u00b6 During each Epoch, the 21 executives will take turns to generate blocks according to the bookkeeping order. Each executive can only generate blocks when it is their turn. Executives package the data of multiple verified transactions into each block. The hash of the previous block will be included in each new block as the parentHash. The executive will sign the data of this block with his/her private key and fill in executive_signature, along with the address of the executive, the block height, and the time that block is generated, etc. Through storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture: In ideal circumstances, the bookkeeping process in a DPoS consensus-based blockchain system proceeds according to the bookkeeping order calculated in advance. Blocks are generated by executives in turn (see figure a). However, in reality, the blockchain network is a distributed and untrusted complex system in the following three ways. - Due to poor network environment, blocks generated by some executives cannot be received by other executives in valid time (see figure b1 and b2). - The normal operation of a certain executive cannot always be guaranteed (see figure c). - Some malicious executives will generate fork blocks in order to fork the chain (see figure d). As mentioned above, the basis for the blockchain system to operate normally is that most of the nodes in the system are honest and reliable. Furthermore, the primary guarantee for the security of the blockchain system is the security of the ledger, meaning that illegal data cannot be written into the ledger maliciously and ledger copies saved on each node should be consistent as well. Based on the DPoS consensus, the bookkeeping process is carried out by executives. Therefore, the safety of STABILA depends on the reliability of the majority of the executives. STABILA has put confirmed blocks in the system which are irreversible. At the same time, in order to resist the malicious behaviors of a small number of executive nodes, STABILA recognizes the longest chain as the main chain based on \"the longest chain principle\". The confirmed block principle The newly produced blocks are in unconfirmed state, and only those blocks that are \"approved\" by more than 70% (i.e. 21 * 70% = 14, rounded down) of the 21 Executives are considered to be irreversible blocks, commonly referred to as solidified blocks, and the transactions contained in the solidified blocks have been confirmed by the entire blockchain network. The way to \"approve\" the unconfirmed state block is that the Executive producing subsequent blocks after it, as shown in Figure d, the Executive C produces block 103, the Executive E produces 104' on the basis of block 103, the block 105', 106', and 107' produced respectively by the Executive G, A and B, are also subsequent blocks of the 103rd block, which means these four blocks approve the 103rd block. It can be seen that when the block of height 121 is produced, the 103rd block becomes a solidified block, since by this time the 103rd block has 18 subsequent blocks, and the point to be emphasized here is that the Executives producing these 18 blocks must be different from each other and from the Executives producing the 103rd block. The longest chain principle When a fork occurs, an honest executive would always choose to produce blocks on the longest chain. Incentive model \u00b6 To ensure the safe and efficient operation of the blockchain system, STABILA sets up an incentive model to encourage node participation and network expansion. Executives who complete block production tasks will be rewarded with STB. The model also specifies that for every confirmed block produced by a executive, the executive will receive 32 STB. For the first 100th executives with the most votes, they will receive proportional rewards during the maintenance period of each Epoch. Proposal-based parameter adjustment \u00b6 An important characteristic of DPoS is that any parameter adjustment can be proposed on the chain, and executives will decide whether to approve the proposal by starting a vote. The advantage of this method is that it avoids hard fork upgrades when adding new features. Currently, STABILA supports the following parameter adjustments: The interval between two maintenance periods The STB cost of applying to be a bookkeeper candidate The STB cost of account activation The bandwidth cost for one byte in each transaction The STB cost of issuing tokens on STABILA The rewards for producing each block The total amount of STB that is proportionately awarded to the first 100th executives with the most votes The STB cost of account activation through system contract The bandwidth cost for account activation The exchange rate between Ucr and Unit The STB cost for building a SRC-10 token-based decentralized trading pair The maximum CPU time allowed for a single transaction execution Whether to allow changes of account names Whether to allow the issuance of assets with duplicate names Whether to allow resource delegation The upper limit for Ucr in STABILA blockchain Whether to allow SRC-10 asset transfer in smart contracts Whether to allow adjustment to Ucr upper limit Whether to allow multi-signature The STB cost of updating account access The STB cost of multi-signature transactions Whether to verify block and transaction protobuf message Appendix: Reference Documentations \u00b6 Delegated Proof of Stake (DPoS) \u2013 Total Beginners Guide Consensus Algorithms: Proof-of-Stake & Cryptoeconomics Role of Delegates","title":"DPoS"},{"location":"introduction/dpos/#dpos","text":"","title":"DPoS"},{"location":"introduction/dpos/#overview","text":"Blockchain is a distributed accounting system. In a blockchain system, there can be thousands of nodes, each of which independently stores the same ledger. If new transaction data is to be written into the ledger, approvals from these nodes are needed. Achieving this goal in an untrusted distributed environment is a complicated systematic quest. The blockchain system operates normally means each node in the blockchain can always keep the same ledger, provided that most nodes in the system are honest and reliable. In order to ensure that honest and reliable nodes can jointly supervise the transaction data written into the ledgers, each blockchain system needs to build its own consensus, which is equivalent to the constitution of the blockchain. As long as the vast majority of nodes comply with the consensus requirements, it is able to guarantee the results will certainly be credible, even in an untrusted distributed environment. Therefore, the significance of the consensus is that the honest nodes in the blockchain can ultimately achieve the agreement of the ledgers as long as they strictly abide by this consensus. There are several types of consensus, and the most commonly used are POW, POS, and DPoS. Definitely, different blockchain systems will have a unique way of implementation. This article will mainly introduce the DPoS consensus on which STABILA based. We will also explain the basic components and mechanisms of DPoS.","title":"Overview"},{"location":"introduction/dpos/#block-producing-process","text":"The executives of the blockchain network collect the newly generated transactions in the blockchain network and verify the legality of these transactions, then package the transactions in a block, record them as a new page on the ledger, and broadcast the page to the entire blockchain network. Other nodes will receive the new page and verify the legality of the transaction data on the page and add it to their own ledger. The executives will repeat this process so all new transaction data in the blockchain system can be recorded in the ledger.","title":"Block Producing Process"},{"location":"introduction/dpos/#dpos-overview","text":"The role of consensus is to select the executives in the blockchain system. The executives verify the transaction data and keep the account in order to broadcast new accounts to other nodes in the network and obtains the approval of the new accounts from other nodes. As a specific implementation of consensus, DPoS works in the following way: The DPoS consensus selects some nodes as executives in the blockchain system based on the number of votes they receive. First, when the blockchain system starts to operate, a certain number of tokens will be issued, and then the tokens will be given to nodes in the blockchain system. A node can apply to be a executives candidate in the blockchain system with a portion of the tokens. Any token-holding node in the blockchain system can vote for these executives. Every t period of time, the votes for all the executives will be counted. Top N candidate nodes with the most votes will become executives for the next t period. After t period of time, the votes will be counted again to elect the new executives, and the cycle continues. Let's see how it's realized in the context of STABILA:","title":"DPoS overview"},{"location":"introduction/dpos/#definition","text":"STABILA: refers to the STABILA network. The document does not distinguish between STABILA, STABILA blockchain, STABILA blockchain system, etc. STABILA token: refers to the equity token issued by and circulating in STABILA, known as STB. Executives candidates: nodes eligible for becoming executives in STABILA. Executives: nodes in STABILA qualified for book-keeping. They are usually called executives in DPoS consensus. In STABILA, there will be 21 executives, which are also called super nodes (or SR). Here, we will not distinguish between bookkeeper, executive, supernode, SR, etc. Bookkeeping: the process of verifying transactions and recording them in a ledger. Because ledgers in STABILA are carried by blocks, the bookkeeping process is also called block generation. We will not distinguish between bookkeeping and block generation in the document. Bookkeeping order: block generation order. The descending order of the 21 executives based on the number of votes they receive. Block time: STABILA sets block time to be 3 seconds. This means a block is generated every 3 seconds. Slot: after each block is generated, it can be put into a slot; and each generated block will take up a slot. For example, there are 20 slots for every minute. When a block is generated during the block time, the corresponding slot will be filled. However, if a block is not generated, then the corresponding slot will be empty. The next block generated will fill in a new corresponding slot. Epoch: STABILA sets an Epoch to be 6 hours. The last 2 block time of an Epoch is the maintenance period, during which block generating order for the next Epoch will be decided. The maintenance period: STABILA sets the period to be 2 block time, which is 6 seconds. This period of time is used to count the votes for executives. There are 4 Epochs in 24 hours, and naturally, 4 maintenance periods. During the maintenance period, no block is generated and block generation order for the next Epoch is decided.","title":"Definition"},{"location":"introduction/dpos/#election-mechanism","text":"Votes In STABILA, 1 STB equals 1 vote. Voting process In STABILA, voting for executives is a special transaction. Nodes can vote for executives through generating a voting transaction. Vote counting During each maintenance period, the votes for executives will be counted. The top 21 executives with the most votes will be the Governors for the next Epoch.","title":"Election mechanism"},{"location":"introduction/dpos/#block-generation-mechanism","text":"During each Epoch, the 21 executives will take turns to generate blocks according to the bookkeeping order. Each executive can only generate blocks when it is their turn. Executives package the data of multiple verified transactions into each block. The hash of the previous block will be included in each new block as the parentHash. The executive will sign the data of this block with his/her private key and fill in executive_signature, along with the address of the executive, the block height, and the time that block is generated, etc. Through storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture: In ideal circumstances, the bookkeeping process in a DPoS consensus-based blockchain system proceeds according to the bookkeeping order calculated in advance. Blocks are generated by executives in turn (see figure a). However, in reality, the blockchain network is a distributed and untrusted complex system in the following three ways. - Due to poor network environment, blocks generated by some executives cannot be received by other executives in valid time (see figure b1 and b2). - The normal operation of a certain executive cannot always be guaranteed (see figure c). - Some malicious executives will generate fork blocks in order to fork the chain (see figure d). As mentioned above, the basis for the blockchain system to operate normally is that most of the nodes in the system are honest and reliable. Furthermore, the primary guarantee for the security of the blockchain system is the security of the ledger, meaning that illegal data cannot be written into the ledger maliciously and ledger copies saved on each node should be consistent as well. Based on the DPoS consensus, the bookkeeping process is carried out by executives. Therefore, the safety of STABILA depends on the reliability of the majority of the executives. STABILA has put confirmed blocks in the system which are irreversible. At the same time, in order to resist the malicious behaviors of a small number of executive nodes, STABILA recognizes the longest chain as the main chain based on \"the longest chain principle\". The confirmed block principle The newly produced blocks are in unconfirmed state, and only those blocks that are \"approved\" by more than 70% (i.e. 21 * 70% = 14, rounded down) of the 21 Executives are considered to be irreversible blocks, commonly referred to as solidified blocks, and the transactions contained in the solidified blocks have been confirmed by the entire blockchain network. The way to \"approve\" the unconfirmed state block is that the Executive producing subsequent blocks after it, as shown in Figure d, the Executive C produces block 103, the Executive E produces 104' on the basis of block 103, the block 105', 106', and 107' produced respectively by the Executive G, A and B, are also subsequent blocks of the 103rd block, which means these four blocks approve the 103rd block. It can be seen that when the block of height 121 is produced, the 103rd block becomes a solidified block, since by this time the 103rd block has 18 subsequent blocks, and the point to be emphasized here is that the Executives producing these 18 blocks must be different from each other and from the Executives producing the 103rd block. The longest chain principle When a fork occurs, an honest executive would always choose to produce blocks on the longest chain.","title":"Block generation mechanism"},{"location":"introduction/dpos/#incentive-model","text":"To ensure the safe and efficient operation of the blockchain system, STABILA sets up an incentive model to encourage node participation and network expansion. Executives who complete block production tasks will be rewarded with STB. The model also specifies that for every confirmed block produced by a executive, the executive will receive 32 STB. For the first 100th executives with the most votes, they will receive proportional rewards during the maintenance period of each Epoch.","title":"Incentive model"},{"location":"introduction/dpos/#proposal-based-parameter-adjustment","text":"An important characteristic of DPoS is that any parameter adjustment can be proposed on the chain, and executives will decide whether to approve the proposal by starting a vote. The advantage of this method is that it avoids hard fork upgrades when adding new features. Currently, STABILA supports the following parameter adjustments: The interval between two maintenance periods The STB cost of applying to be a bookkeeper candidate The STB cost of account activation The bandwidth cost for one byte in each transaction The STB cost of issuing tokens on STABILA The rewards for producing each block The total amount of STB that is proportionately awarded to the first 100th executives with the most votes The STB cost of account activation through system contract The bandwidth cost for account activation The exchange rate between Ucr and Unit The STB cost for building a SRC-10 token-based decentralized trading pair The maximum CPU time allowed for a single transaction execution Whether to allow changes of account names Whether to allow the issuance of assets with duplicate names Whether to allow resource delegation The upper limit for Ucr in STABILA blockchain Whether to allow SRC-10 asset transfer in smart contracts Whether to allow adjustment to Ucr upper limit Whether to allow multi-signature The STB cost of updating account access The STB cost of multi-signature transactions Whether to verify block and transaction protobuf message","title":"Proposal-based parameter adjustment"},{"location":"introduction/dpos/#appendix-reference-documentations","text":"Delegated Proof of Stake (DPoS) \u2013 Total Beginners Guide Consensus Algorithms: Proof-of-Stake & Cryptoeconomics Role of Delegates","title":"Appendix: Reference Documentations"},{"location":"introduction/overview/","text":"Overview \u00b6 1. Project Repository \u00b6 Github Url: https://github.com/stabilaprotocol java-stabila is the source code of the MainNet. protocol is the definition of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/stabilaprotocol/StabilaDeployment/blob/master/main_net_config.conf 2. SRs and Committee \u00b6 2.1 How to Become a Governor \u00b6 In STABILA network, any account can apply to become a governor candidate. Every account can vote for executives. The top 21 candidates with the most votes are Governors. Super representatives can produce blocks. The votes will be counted every 6 hours, so governors may also change every 6 hours. To prevent vicious attack, STABILA network burns 9999 STB from the account that applies to become a governor candidate. 2.2 Governors Election \u00b6 To vote, you need to have STABILA Power(SP). To get STABILA Power, you need to stake STB. Every 1 staked STB accounts for one STABILA Power(SP). Every account in STABILA network has the right to vote for a governor candidate. After you unstake your staked STB, you will lose the responding STABILA Power(SP), so your previous vote will be invalid. Note: Only your latest vote will be counted in STABILA network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): cdbalance 10,000,000 3 // stake 10 STB to get 10 STABILA Power(SP) voteexecutive executive1 4 executive2 6 // Vote 4 votes for executive1, 6 votes for executive2 voteexecutive executive1 3 executive2 7 // Vote 3 votes for executive1, 7 votes for executive2 The final output above is: Vote 3 votes for executive1, 7 votes for executive2 2.3 Reward for Governors \u00b6 Votes Reward: Every 6 hours, the top 100 Governor candidates with the most votes will share a total amount of 115,200 STB according to their votes percentage. The annual votes reward is 168,192,000 STB in total. Block Producing Reward: Every time after a governor produces a block, it will be reward 32 STB. The 21 governors take turns to produce blocks every 3 seconds. The annual block producing reward is 336,384,000 STB in total. Every time after a governor produces a block, the 32 STB block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to governor account every 24 hours. 2.4 Committee \u00b6 2.4.1 What is Committee \u00b6 Committee can modify the STABILA network parameters, like transaction fees, block producing reward amount, etc. Committee is composed of the current 21 governors. Every governor has the right to start a proposal. The proposal will be passed after it gets more than 19 approves from the governors and will become valid in the next maintenance period. 2.4.2 Create a Proposal \u00b6 Only the account of a governor can create a proposal. The network parameters can be modified([min,max]): 0: MAINTENANCE_TIME_INTERVAL, [3 * 21* 1000, 24 * 3600 * 1000] //governor votes count time interval, currently 6 * 3600 * 1000 ms 1: ACCOUNT_UPGRADE_COST, [0, 100 000 000 000 000 000] //the fee to apply to become a governor candidate, currently 9999_000_000 UNIT 2: CREATE_ACCOUNT_FEE, [0, 100 000 000 000 000 000] //the fee to create an account, currently 100_000 UNIT 3: TRANSACTION_FEE, [0, 100 000 000 000 000 000] //the fee for bandwidth, currently 1_000 UNIT/byte 4: ASSET_ISSUE_FEE, [0, 100 000 000 000 000 000] //the fee to issue an asset, currently 1024_000_000 UNIT 5: EXECUTIVE_PAY_PER_BLOCK, [0, 100 000 000 000 000 000] //the block producing reward, currently 32_000_000 UNIT 6: EXECUTIVE_STANDBY_ALLOWANCE, [0, 100 000 000 000 000 000] //the votes reward for top 100 Governor candidates, currently 115_200_000_000 UNIT 7: CREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT, //the fee to create an account in system, currently 1_000_000 UNIT 8: CREATE_NEW_ACCOUNT_BANDWIDTH_RATE, //the consumption of bandwidth or STB while creating an account, using together with #7 9: ALLOW_CREATION_OF_CONTRACTS, //to enable the VM 10: REMOVE_THE_POWER_OF_THE_GR, //to clear the votes of GR 11: UCR_FEE, [0,100 000 000 000 000 000] //UNIT 12: EXCHANGE_CREATE_FEE, [0, 100 000 000 000 000 000] //UNIT 13: MAX_CPU_TIME_OF_ONE_TX, [0, 1000] //ms 14: ALLOW_UPDATE_ACCOUNT_NAME, //to allow users to change account name and allow account duplicate name, currently 0, means false 15: ALLOW_SAME_TOKEN_NAME, //to allow create a token with duplicate name, currently 1, means true 16: ALLOW_DELEGATE_RESOURCE, //to enable the resource delegation 17: TOTAL_UCR_LIMIT, //to modify the ucr limit 18: ALLOW_SVM_TRANSFER_SRC10, //to allow smart contract to transfer SRC-10 token, currently 0, means false Example (Using wallet-cli): createproposal id value id: the serial number (0 ~ 18) value: the parameter value Note: In STABILA network, 1 STB = 1000_000 UNIT 2.4.3 Vote for a Proposal \u00b6 Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): approveProposal id is_or_not_add_approval id: proposal id is_or_not_add_approval: YES vote or cancel YES vote 2.4.4 Cancel Proposal \u00b6 Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): deleteProposal id id: proposal id 2.4.5 Query Proposal \u00b6 Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more api detail, please refer to Stabila HTTP API 3. Account Model \u00b6 3.1 Introduction \u00b6 STABILA uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like STB balance, tokens balance, bandwidth, etc. STB and tokens can be transferred from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a governor candidate, vote, etc. All STABILA's activities are based on account. 3.2 How to Create an Account \u00b6 1. Use a wallet to generate the address and private key. To activate the account, you need to transfer STB or transfer token to the new created account. 2. Use an account already existed in STABILA network to create an account 3.3 Key-pair Generation Algorithm \u00b6 Stabila signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random bumber, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point. 3.4 Address Format \u00b6 Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address comes out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. Character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" 3.5 Signature \u00b6 Signature introduction 4. Network Node \u00b6 4.1 Governor \u00b6 4.1.1 Governor Introduction \u00b6 Governor(abbr: SR) is the block producer in STABILA network, there are 21 SR. They verify the transactions and write the transactions into the blocks, they take turns to produce blocks. The governors' information is public to everyone in STABILA network. The best way to browse is using stabilascan . 4.1.2 Governor Deployment \u00b6 Governor Deployment 4.1.3 Recommended Hardware Configuration \u00b6 minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.2 FullNode \u00b6 4.2.1 FullNode Introduction \u00b6 FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service. 4.2.2 FullNode Deployment \u00b6 For Docker installation and deployment please refer to STABILA-Deployment 4.2.3 Recommended Hardware Configuration \u00b6 Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.3 SolidityNode \u00b6 4.3.1 SolidityNode Introduction \u00b6 SolidityNode only synchronize solidified blocks data from the fullNode it specifies, It also provie api service. 4.3.2 SolidityNode Deployment \u00b6 For Docker installation and deployment please refer to STABILA-Deployment 4.3.3 Recommended Hardware Configuration \u00b6 Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.4 STABILA Network Instructure \u00b6 STABILA network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: Governor, FullNode, SolidityNode. Governor produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-stabila code can join STABILA network as a node. 4.5 FullNode and SolidityNode Fast Deployment \u00b6 Download fast deployment script, run the script according to different types of node. please refer to Node Fast Deployment 4.6 MainNet, PrivateNet \u00b6 MainNet, PrivateNet all use the same code, only the node start configuration varies. 4.6.1 MainNet \u00b6 MainNet configuration 4.6.3 PrivateNet \u00b6 4.6.3.1 Preconditions at least two accounts at least deploy one Governor to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions Governor and FullNode comprise the private network 4.6.3.2 Deployment 4.6.3.2.1 Step 1: Governor Deployment 1. download private_net_config.conf wget https://raw.githubusercontent.com/stabilaprotocol/stabila-deployment/master/private_net_config.conf 2. add your private key in localexecutive 3. set genesis.block.executives as the private key's corresponding address 4. set p2p.version, any positive integer but 11111 5. set the first SR needSyncCheck = false, others can be set true 6. set node.discovery.enable = true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --executive -c private_net_config.conf command line parameters introduction: --executive: start executive function . For Governor, this parameter is required, i.e.: --executive --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: localexecutive: executives: version: enable: 4.6.3.2.2 Step 2: FullNode Deployment 1. Download private_net_config.conf wget https://raw.githubusercontent.com/stabilaprotocol/stabila-deployment/master/private_net_config.conf 2. set seed.node ip.list with SR's ip and port 3. set p2p.version the same as Governor's p2p.version 4. set genesis.block the same as genesis.block 5. set needSyncCheck true 6. set node.discovery.enable true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c private_net_config.conf command lines parameters --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable: 4.7 DB Engine \u00b6 4.7.1 Rocksdb \u00b6 4.7.1.1 Configuration Use rocksdb as the data storage engine, need to set db.engine to \"ROCKSDB\" Note: rocksdb only support db.version=2, do not support db.version=1 The optimization parameters rocksdb support: 4.7.1.2 Use rocksdb's data backup function Choose rocksdb to be the data storage engine, you can use it's data backup function while running Note: FullNode can use data backup function. In order not to affect Governor's block producing performance, Governor does not support backup service, but Governor's backup service node can use this function. 4.7.1.3 Convert leveldb data to rocksdb data The data storage structure of leveldb and rocksdb is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert leveldb data to rocksdb data. Usage: cd to the source code root directory ./gradlew build #build the source code java -jar build/libs/DBConvert.jar #run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: nohup java -jar FullNode.jar -d your_database_dir & Then, you should run DBConvert.jar this way: java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path and dst_db_path . Example: cp -rf output-directory /tmp/output-directory cd /tmp java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. 4.7.1.4 rocksdb vs leveldb 5. Smart Contract \u00b6 5.1 STABILA Smart Contract Introduction \u00b6 Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can run in the way it is designed. STABILA smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to STABILA network. When the smart contract is triggered, the corresponding function will be executed automatically. 5.2 STABILA Smart Contract Features \u00b6 STABILA virtual machine is based on Ethereum solidity language, it also has STABILA's own features. 5.2.1 Smart Contract \u00b6 STABILA VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; } message Param { bool indexed = 1; string name = 2; string type = 3; // SolidityType type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7\uff1b int64 origin_ucr_limit = 8; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: STB transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_ucr_limit: ucr consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateUcrLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contracts. 5.2.2 The Usage of the Function of Smart Contract \u00b6 1. constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. 2. message calls Message calls can call the functions of other contracts, also can transfer STB to the accounts of contract and none-contract. Like the common STABILA triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining ucr in the internal message call. If it comes with OutOfUcrException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if ucr is not specified in call.value(ucr), all the remaining ucr will be used. 3. delegate call/call code/libary There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically load code from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. 4. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated STABILA address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. 5. built-in function and built-in function attribute (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 1)SVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: STABILA's smart contract is different from STABILA's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accounts vote for Governor (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 3)Governor gets all the reward (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 4)Governor approves or disapproves the proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 5)Governor proposes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 6)Governor deletes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 7)STABILA byte address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 8)STABILA string address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of STABILA is a hash result based on STABILA's sha256, not an accurate Ethereum RIPEMD160. 5.2.3 Contract Address Using in Solidity Language \u00b6 Ethereum VM address is 20 bytes, but STABILA's VM address is 21 bytes. 1. address conversion Need to convert STABILA's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) stabila address to solidity address type * @param stabilaAddress uint256 stabilaAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromStabilaInt(uint256 stabilaAddress) public view returns(address){ return address(stabilaAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. 2. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address stabilaAddress) public view returns (uint256){ // if (stabilaAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (stabilaAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c 3. variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use STABILA address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8). 5.3 Ucr Introduction \u00b6 Each command of smart contract consume system resource while running, we use 'Ucr' as the unit of the consumption of the resource. 5.3.1 How to Get Ucr \u00b6 Stake STB to get ucr. Example (Using wallet-cli): cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] Stake STB to get ucr, ucr obtained = user's STB staked amount / total amount of staked STB in STABILA * 50_000_000_000. Example: If there are only two users, A stakes 2 STB, B stakes 2 STB the ucr they can get is: A: 25_000_000_000 and ucr_limit is 25_000_000_000 B: 25_000_000_000 and ucr_limit is 25_000_000_000 when C stakes 1 STB: the ucr they can get is: A: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 10_000_000_000 and ucr_limit is 10_000_000_000 Ucr Recovery The ucr consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72_000_000 Ucr if there is no continuous consumption or STB stake one hour later, the ucr consumption amount will be 72_000_000 - (72_000_000 * (60*60/60*60*24)) Ucr = 69_000_000 Ucr 24 hours later, the ucr consumption amount will be 0 Ucr 5.3.2 How to Set Fee Limit (Caller Must Read) \u00b6 Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of ucr consumed while call the contract can be converted to STB or UNIT, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Ucr, STB and UNIT, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great ucr, it will not consume too much ucr from the caller. Before you set fee limit, you need to know several conception: 1. The legal fee limit is a integer between 0 - 10^9, unit is UNIT. 2. Different smart contracts consume different amount of ucr due to their complexity. The same trigger in the same contract almost consumes the same amount fo ucr[1]. When the contract is triggered, the commands will be executed one by one and consume ucr. If it reaches the fee limit, commands will fail to be executed, and ucr is not refundable. 3. Currently fee limit only refers to the ucr converted to UNIT that will be consumed from the caller[2]. The ucr consumed by triggering contract also includes developer's share. 4. For a vicious contract, if it encounters execution timeout or bug crash, all it's ucr will be consumed. 5. Developer may undertake a proportion of ucr consumption(like 90%). But if the developer's ucr is not enough for consumption, the rest of the ucr consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough ucr, then it will burn equivalent amount of STB [2]. To encourage caller to trigger the contract, usually developer has enough ucr. Example How to estimate the fee limit: Assume contract C's last execution consumes 18000 Ucr, so estimate the ucr consumption limit to be 20000 Ucr[3] According to the staked STB amount and ucr conversion, assume 1 STB = 400 ucr. When to burn STB, 1 STB = 10000 ucr[4] Assume developer undertake 90% ucr consumption, and developer has enough ucr. Then the way to estimate the fee limit is: 1). A = 20000 ucr * (1 STB / 400 ucr) = 50 STB = 50_000_000 UNIT, 2). B = 20000 ucr * (1 STB / 10000 ucr) = 2 STB = 2_000_000 UNIT, 3). Take the greater number of A and B, which is 50_000_000 UNIT, 4). Developer undertakes 90% ucr consumption, caller undertakes 10% ucr consumption, So, the caller is suggested to set fee limit to 50_000_000 UNIT * 10% = 5_000_000 UNIT Note: [1] The ucr consumption of each execution may fluctuate slightly due to the situation of all the nodes. [2] STABILA may change this policy. [3] The estimated ucr consumption limit for the next execution should be greater than the last one. [4] 1 STB = 10^4 ucr is a fixed number for burning STB to get ucr, STABILA may change it in future. 5.3.3 Ucr Calculation (Developer Must Read) \u00b6 1. In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available ucr will be deducted. If the contract runs normally or revert, only the ucr needed for the execution of the commands will be deducted. 2. Developer can set the proportion of the ucr consumption it undertakes during the execution, this proportion cna be changed later. If the developer's ucr is not enough, it will consume the caller's ucr. 3. Currently, the total ucr available when trigger a contract is composed of caller fee limit and developer's share Note: - If the developer is not sure about whether the contract is normal, do not set caller's ucr consumption proportion to 0%, in case all developer's ucr will be deducted due to vicious execution[1]. - We recommend to set caller's ucr consumption proportion to 10% ~ 100%[2]. Example 1 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 100% which means the caller will pay for the ucr consumption completely. A triggers C, the fee limit set is 30000000 (unit UNIT, 30 STB) So during this trigger the ucr A can use is from two parts: - A's ucr by staking STB; - The ucr converted from the amount of STB burning according to a fixed rate; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (30 - 10) STB = 20 STB available, so the ucr it can keep consuming is 20 STB / 100 UNIT = 200000 ucr. Finally, in this call, the ucr A can use is (100000 + 200000) = 300000 ucr. If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far more less than the amount of ucr this trigger can use. If Assert-style error come out, it will consume the whole number of ucr set for fee limit. Example 2 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 40% which means the developer will pay for the rest 60% ucr consumption. Developer D stakes 50 STB to get 500000 ucr. A triggers C, the fee limit set is 200000000 (unit UNIT, 200 STB). So during this trigger the ucr A can use is from three parts: - A's ucr by staking STB -- X; - The ucr converted from the amount of STB bruning according to a fixed rate -- Y; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (200 - 10) STB = 190 STB available, but A only has 90 STB left, so the ucr it can keep consuming is 90 STB / 100 UNIT = 900000 ucr; - D's ucr by staking STB -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the ucr A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the ucr A can use is (X + Y) / 40% If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far more less than the amount of ucr this trigger can use. Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the ucr consumption. If Assert-style error comes out, it will consume all ucr from the developer itsef. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent. 5.4 Smart Contract Development Tool \u00b6 Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/stabila.log Write your first smart contract pragma solidity ^0.4.0; contract DataStore { mapping ( uint256 => uint256 ) data ; function set ( uint256 key , uint256 value ) public { data [ key ] = value ; } function get ( uint256 key ) view public returns ( uint256 value ) { value = data [ key ]; } } Using Wallet-cli to Deploy Download Wallet-Cli and build # download source code git clone https://github.com/stabilaprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI content from generated .abi file bytecode: ByteCode content from generated .bin file constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The STB consumption limit for the deployment, unit is UNIT(1 UNIT = 10^-6 STB) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of STB transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The STB consumption limit for the trigger, unit is UNIT(1 UNIT = 10^-6 STB) value: The amount of STB transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract. 6. SRC-10 Token Introduction \u00b6 STABILA network support two types of token, one is SRC-20 token issued by smart contract, the other one is SRC-10 token issued by system contract. 6.1 How to Issue a SRC-10 Token \u00b6 HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"stb_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"cded_supply\":{\"cded_amount\":1, \"cded_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter stb_num: Define the price by the ratio of stb_num/num, Parameter num: Define the price by the ratio of stb_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter cded_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'stb_num' is UNIT 6.2 Participate SRC-10 Token \u00b6 HTTP API: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 6.3 SRC-10 Token Transfer \u00b6 HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 7. Resource Model \u00b6 7.1 Resource Model Introduction \u00b6 STABILA network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by STABILA's exclusive RAM model, STABILA's RAM resource is almost infinite. STABILA network imports two resource conceptions: Bandwidth points and Ucr. Bandwidth Point represents Bandwidth, Ucr represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Ucr 7.2 Bandwidth Points \u00b6 The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the staked STB in the network and the self-staked STB amount, the Bandwidth Points an account possesses is not fixed. 7.2.1 How to Get Bandwidth Points \u00b6 1. By staking STB to get Bandwidth Points, Bandwidth Points = the amount of STB self-staked / the total amount of STB staked for Bandwidth Points in the network * 43_200_000_000 2. Every account has a fixed amount of free Bandwidth Points every day, it is defined in #61 network parameter, user can check the value on stabilascan(https://stabilascan.org/representatives). 7.2.2 Bandwidth Points Consumption \u00b6 Transactions other than queries consume Bandwidth points. A special scenario: When transferring STB or SRC-10 tokens to an account that does not yet exist, this procedure creates the account prior to the transfer. To create an account, a flat charge of 1 STB is required. If there are insufficient Bandwidth points obtained by STB staking, an additional 0.1 STB will be spent. Bandwidth points consumption sequence for SRC-10 transfer: Free Bandwidth points. SRC-10 issuer's Bandwidth points(if possible.) Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT; 7.2.3 Bandwidth Points Recovery \u00b6 Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. 7.3 Ucr \u00b6 5.3 Ucr Introduction 7.4 Resource Delegation \u00b6 In STABILA network, an account can stake STB for Bandwidth or Ucr for other accounts. The primary account owns the staked STB and STABILA power, the recipient account owns the Bandwidth or Ucr. Like ordinary staking, resource delegation staking is also at least 3 days. Example(Using wallet-cli) cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] [receiverAddress] cded_balance: the amount of STB to stake (unit UNIT) cded_duration: the staking period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Ucr receiverAddress: recipient account address 7.5 Other Fees \u00b6 Type Fee Create a executive 9999 STB Issue a SRC-10 token 1024 STB Create an account 1 STB Create an exchange 1024 STB 8. Wallet Introduction \u00b6 8.1 wallet-cli Introduction \u00b6 Please refer to: https://github.com/stabilaprotocol/wallet-cli/blob/master/README.md 8.2 Get Transaction ID \u00b6 Hash.sha256(transaction.getRawData().toByteArray()) 8.3 Get Block ID \u00b6 private byte[] generateBlockId(long blockNum, byte[] blockHash) { byte[] numBytes = Longs.toByteArray(blockNum); byte[] hash = blockHash; System.arraycopy(numBytes, 0, hash, 0, 8); return hash; } 8.4 How to Build a Transaction Locally \u00b6 According to the definition of the transaction, you need to fill up all the fields of the transaction. You need to set reference block and expiration time information, so you need to connect to the Mainnet. We recommend to use the latest block on fullnode as the value of reference block, use the latest block time plus N minutes as the value of expiration time. The network judgment condition is if (expiration > latest block time and expiration < latest block time + 24 hours) means the transaction is in period of validity. Otherwise, it will be an overdue transaction, will not be accepted by the Mainnet. Way to set reference block: set RefBlockHash the bytes from the 8 to 16(not included) of the hash of the latest block, set BlockBytes the bytes from 6 to 8(not included) of the height of the latest block. public static Transaction setReference(Transaction transaction, Block newestBlock) { long blockHeight = newestBlock.getBlockHeader().getRawData().getNumber(); byte[] blockHash = getBlockHash(newestBlock).getBytes(); byte[] refBlockNum = ByteArray.fromLong(blockHeight); Transaction.raw rawData = transaction.getRawData().toBuilder() .setRefBlockHash(ByteString.copyFrom(ByteArray.subArray(blockHash, 8, 16))) .setRefBlockBytes(ByteString.copyFrom(ByteArray.subArray(refBlockNum, 6, 8))) .build(); return transaction.toBuilder().setRawData(rawData).build(); } Way to set expiration time and transaction timestamp: public static Transaction createTransaction(byte[] from, byte[] to, long amount) { Transaction.Builder transactionBuilder = Transaction.newBuilder(); Block newestBlock = WalletClient.getBlock(-1); Transaction.Contract.Builder contractBuilder = Transaction.Contract.newBuilder(); Contract.TransferContract.Builder transferContractBuilder = Contract.TransferContract .newBuilder(); transferContractBuilder.setAmount(amount); ByteString bsTo = ByteString.copyFrom(to); ByteString bsOwner = ByteString.copyFrom(from); transferContractBuilder.setToAddress(bsTo); transferContractBuilder.setOwnerAddress(bsOwner); try { Any any = Any.pack(transferContractBuilder.build()); contractBuilder.setParameter(any); } catch (Exception e) { return null; } contractBuilder.setType(Transaction.Contract.ContractType.TransferContract); transactionBuilder.getRawDataBuilder().addContract(contractBuilder) .setTimestamp(System.currentTimeMillis()) //in the form of millisecond .setExpiration(newestBlock.getBlockHeader().getRawData().getTimestamp() + 10 * 60 * 60 * 1000); Transaction transaction = transactionBuilder.build(); Transaction refTransaction = setReference(transaction, newestBlock); return refTransaction; }","title":"Overview"},{"location":"introduction/overview/#overview","text":"","title":"Overview"},{"location":"introduction/overview/#1-project-repository","text":"Github Url: https://github.com/stabilaprotocol java-stabila is the source code of the MainNet. protocol is the definition of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/stabilaprotocol/StabilaDeployment/blob/master/main_net_config.conf","title":"1. Project Repository"},{"location":"introduction/overview/#2-srs-and-committee","text":"","title":"2. SRs and Committee"},{"location":"introduction/overview/#21-how-to-become-a-governor","text":"In STABILA network, any account can apply to become a governor candidate. Every account can vote for executives. The top 21 candidates with the most votes are Governors. Super representatives can produce blocks. The votes will be counted every 6 hours, so governors may also change every 6 hours. To prevent vicious attack, STABILA network burns 9999 STB from the account that applies to become a governor candidate.","title":"2.1 How to Become a Governor"},{"location":"introduction/overview/#22-governors-election","text":"To vote, you need to have STABILA Power(SP). To get STABILA Power, you need to stake STB. Every 1 staked STB accounts for one STABILA Power(SP). Every account in STABILA network has the right to vote for a governor candidate. After you unstake your staked STB, you will lose the responding STABILA Power(SP), so your previous vote will be invalid. Note: Only your latest vote will be counted in STABILA network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): cdbalance 10,000,000 3 // stake 10 STB to get 10 STABILA Power(SP) voteexecutive executive1 4 executive2 6 // Vote 4 votes for executive1, 6 votes for executive2 voteexecutive executive1 3 executive2 7 // Vote 3 votes for executive1, 7 votes for executive2 The final output above is: Vote 3 votes for executive1, 7 votes for executive2","title":"2.2 Governors Election"},{"location":"introduction/overview/#23-reward-for-governors","text":"Votes Reward: Every 6 hours, the top 100 Governor candidates with the most votes will share a total amount of 115,200 STB according to their votes percentage. The annual votes reward is 168,192,000 STB in total. Block Producing Reward: Every time after a governor produces a block, it will be reward 32 STB. The 21 governors take turns to produce blocks every 3 seconds. The annual block producing reward is 336,384,000 STB in total. Every time after a governor produces a block, the 32 STB block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to governor account every 24 hours.","title":"2.3 Reward for Governors"},{"location":"introduction/overview/#24-committee","text":"","title":"2.4 Committee"},{"location":"introduction/overview/#241-what-is-committee","text":"Committee can modify the STABILA network parameters, like transaction fees, block producing reward amount, etc. Committee is composed of the current 21 governors. Every governor has the right to start a proposal. The proposal will be passed after it gets more than 19 approves from the governors and will become valid in the next maintenance period.","title":"2.4.1 What is Committee"},{"location":"introduction/overview/#242-create-a-proposal","text":"Only the account of a governor can create a proposal. The network parameters can be modified([min,max]): 0: MAINTENANCE_TIME_INTERVAL, [3 * 21* 1000, 24 * 3600 * 1000] //governor votes count time interval, currently 6 * 3600 * 1000 ms 1: ACCOUNT_UPGRADE_COST, [0, 100 000 000 000 000 000] //the fee to apply to become a governor candidate, currently 9999_000_000 UNIT 2: CREATE_ACCOUNT_FEE, [0, 100 000 000 000 000 000] //the fee to create an account, currently 100_000 UNIT 3: TRANSACTION_FEE, [0, 100 000 000 000 000 000] //the fee for bandwidth, currently 1_000 UNIT/byte 4: ASSET_ISSUE_FEE, [0, 100 000 000 000 000 000] //the fee to issue an asset, currently 1024_000_000 UNIT 5: EXECUTIVE_PAY_PER_BLOCK, [0, 100 000 000 000 000 000] //the block producing reward, currently 32_000_000 UNIT 6: EXECUTIVE_STANDBY_ALLOWANCE, [0, 100 000 000 000 000 000] //the votes reward for top 100 Governor candidates, currently 115_200_000_000 UNIT 7: CREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT, //the fee to create an account in system, currently 1_000_000 UNIT 8: CREATE_NEW_ACCOUNT_BANDWIDTH_RATE, //the consumption of bandwidth or STB while creating an account, using together with #7 9: ALLOW_CREATION_OF_CONTRACTS, //to enable the VM 10: REMOVE_THE_POWER_OF_THE_GR, //to clear the votes of GR 11: UCR_FEE, [0,100 000 000 000 000 000] //UNIT 12: EXCHANGE_CREATE_FEE, [0, 100 000 000 000 000 000] //UNIT 13: MAX_CPU_TIME_OF_ONE_TX, [0, 1000] //ms 14: ALLOW_UPDATE_ACCOUNT_NAME, //to allow users to change account name and allow account duplicate name, currently 0, means false 15: ALLOW_SAME_TOKEN_NAME, //to allow create a token with duplicate name, currently 1, means true 16: ALLOW_DELEGATE_RESOURCE, //to enable the resource delegation 17: TOTAL_UCR_LIMIT, //to modify the ucr limit 18: ALLOW_SVM_TRANSFER_SRC10, //to allow smart contract to transfer SRC-10 token, currently 0, means false Example (Using wallet-cli): createproposal id value id: the serial number (0 ~ 18) value: the parameter value Note: In STABILA network, 1 STB = 1000_000 UNIT","title":"2.4.2 Create a Proposal"},{"location":"introduction/overview/#243-vote-for-a-proposal","text":"Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): approveProposal id is_or_not_add_approval id: proposal id is_or_not_add_approval: YES vote or cancel YES vote","title":"2.4.3 Vote for a Proposal"},{"location":"introduction/overview/#244-cancel-proposal","text":"Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): deleteProposal id id: proposal id","title":"2.4.4 Cancel Proposal"},{"location":"introduction/overview/#245-query-proposal","text":"Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more api detail, please refer to Stabila HTTP API","title":"2.4.5 Query Proposal"},{"location":"introduction/overview/#3-account-model","text":"","title":"3. Account Model"},{"location":"introduction/overview/#31-introduction","text":"STABILA uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like STB balance, tokens balance, bandwidth, etc. STB and tokens can be transferred from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a governor candidate, vote, etc. All STABILA's activities are based on account.","title":"3.1 Introduction"},{"location":"introduction/overview/#32-how-to-create-an-account","text":"1. Use a wallet to generate the address and private key. To activate the account, you need to transfer STB or transfer token to the new created account. 2. Use an account already existed in STABILA network to create an account","title":"3.2 How to Create an Account"},{"location":"introduction/overview/#33-key-pair-generation-algorithm","text":"Stabila signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random bumber, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point.","title":"3.3 Key-pair Generation Algorithm"},{"location":"introduction/overview/#34-address-format","text":"Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address comes out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. Character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"","title":"3.4 Address Format"},{"location":"introduction/overview/#35-signature","text":"Signature introduction","title":"3.5 Signature"},{"location":"introduction/overview/#4-network-node","text":"","title":"4. Network Node"},{"location":"introduction/overview/#41-governor","text":"","title":"4.1 Governor"},{"location":"introduction/overview/#411-governor-introduction","text":"Governor(abbr: SR) is the block producer in STABILA network, there are 21 SR. They verify the transactions and write the transactions into the blocks, they take turns to produce blocks. The governors' information is public to everyone in STABILA network. The best way to browse is using stabilascan .","title":"4.1.1 Governor Introduction"},{"location":"introduction/overview/#412-governor-deployment","text":"Governor Deployment","title":"4.1.2 Governor Deployment"},{"location":"introduction/overview/#413-recommended-hardware-configuration","text":"minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T","title":"4.1.3 Recommended Hardware Configuration"},{"location":"introduction/overview/#42-fullnode","text":"","title":"4.2 FullNode"},{"location":"introduction/overview/#421-fullnode-introduction","text":"FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service.","title":"4.2.1 FullNode Introduction"},{"location":"introduction/overview/#422-fullnode-deployment","text":"For Docker installation and deployment please refer to STABILA-Deployment","title":"4.2.2 FullNode Deployment"},{"location":"introduction/overview/#423-recommended-hardware-configuration","text":"Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T","title":"4.2.3 Recommended Hardware Configuration"},{"location":"introduction/overview/#43-soliditynode","text":"","title":"4.3 SolidityNode"},{"location":"introduction/overview/#431-soliditynode-introduction","text":"SolidityNode only synchronize solidified blocks data from the fullNode it specifies, It also provie api service.","title":"4.3.1 SolidityNode Introduction"},{"location":"introduction/overview/#432-soliditynode-deployment","text":"For Docker installation and deployment please refer to STABILA-Deployment","title":"4.3.2 SolidityNode Deployment"},{"location":"introduction/overview/#433-recommended-hardware-configuration","text":"Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T","title":"4.3.3 Recommended Hardware Configuration"},{"location":"introduction/overview/#44-stabila-network-instructure","text":"STABILA network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: Governor, FullNode, SolidityNode. Governor produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-stabila code can join STABILA network as a node.","title":"4.4 STABILA Network Instructure"},{"location":"introduction/overview/#45-fullnode-and-soliditynode-fast-deployment","text":"Download fast deployment script, run the script according to different types of node. please refer to Node Fast Deployment","title":"4.5 FullNode and SolidityNode Fast Deployment"},{"location":"introduction/overview/#46-mainnet-privatenet","text":"MainNet, PrivateNet all use the same code, only the node start configuration varies.","title":"4.6 MainNet, PrivateNet"},{"location":"introduction/overview/#461-mainnet","text":"MainNet configuration","title":"4.6.1 MainNet"},{"location":"introduction/overview/#463-privatenet","text":"4.6.3.1 Preconditions at least two accounts at least deploy one Governor to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions Governor and FullNode comprise the private network 4.6.3.2 Deployment 4.6.3.2.1 Step 1: Governor Deployment 1. download private_net_config.conf wget https://raw.githubusercontent.com/stabilaprotocol/stabila-deployment/master/private_net_config.conf 2. add your private key in localexecutive 3. set genesis.block.executives as the private key's corresponding address 4. set p2p.version, any positive integer but 11111 5. set the first SR needSyncCheck = false, others can be set true 6. set node.discovery.enable = true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --executive -c private_net_config.conf command line parameters introduction: --executive: start executive function . For Governor, this parameter is required, i.e.: --executive --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: localexecutive: executives: version: enable: 4.6.3.2.2 Step 2: FullNode Deployment 1. Download private_net_config.conf wget https://raw.githubusercontent.com/stabilaprotocol/stabila-deployment/master/private_net_config.conf 2. set seed.node ip.list with SR's ip and port 3. set p2p.version the same as Governor's p2p.version 4. set genesis.block the same as genesis.block 5. set needSyncCheck true 6. set node.discovery.enable true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar -c private_net_config.conf command lines parameters --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable:","title":"4.6.3 PrivateNet"},{"location":"introduction/overview/#47-db-engine","text":"","title":"4.7 DB Engine"},{"location":"introduction/overview/#471-rocksdb","text":"4.7.1.1 Configuration Use rocksdb as the data storage engine, need to set db.engine to \"ROCKSDB\" Note: rocksdb only support db.version=2, do not support db.version=1 The optimization parameters rocksdb support: 4.7.1.2 Use rocksdb's data backup function Choose rocksdb to be the data storage engine, you can use it's data backup function while running Note: FullNode can use data backup function. In order not to affect Governor's block producing performance, Governor does not support backup service, but Governor's backup service node can use this function. 4.7.1.3 Convert leveldb data to rocksdb data The data storage structure of leveldb and rocksdb is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert leveldb data to rocksdb data. Usage: cd to the source code root directory ./gradlew build #build the source code java -jar build/libs/DBConvert.jar #run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: nohup java -jar FullNode.jar -d your_database_dir & Then, you should run DBConvert.jar this way: java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path and dst_db_path . Example: cp -rf output-directory /tmp/output-directory cd /tmp java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. 4.7.1.4 rocksdb vs leveldb","title":"4.7.1 Rocksdb"},{"location":"introduction/overview/#5-smart-contract","text":"","title":"5. Smart Contract"},{"location":"introduction/overview/#51-stabila-smart-contract-introduction","text":"Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can run in the way it is designed. STABILA smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to STABILA network. When the smart contract is triggered, the corresponding function will be executed automatically.","title":"5.1 STABILA Smart Contract Introduction"},{"location":"introduction/overview/#52-stabila-smart-contract-features","text":"STABILA virtual machine is based on Ethereum solidity language, it also has STABILA's own features.","title":"5.2 STABILA Smart Contract Features"},{"location":"introduction/overview/#521-smart-contract","text":"STABILA VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; } message Param { bool indexed = 1; string name = 2; string type = 3; // SolidityType type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7\uff1b int64 origin_ucr_limit = 8; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: STB transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_ucr_limit: ucr consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateUcrLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contracts.","title":"5.2.1 Smart Contract"},{"location":"introduction/overview/#522-the-usage-of-the-function-of-smart-contract","text":"1. constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. 2. message calls Message calls can call the functions of other contracts, also can transfer STB to the accounts of contract and none-contract. Like the common STABILA triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining ucr in the internal message call. If it comes with OutOfUcrException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if ucr is not specified in call.value(ucr), all the remaining ucr will be used. 3. delegate call/call code/libary There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically load code from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. 4. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated STABILA address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. 5. built-in function and built-in function attribute (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 1)SVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: STABILA's smart contract is different from STABILA's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2)Different accounts vote for Governor (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 3)Governor gets all the reward (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 4)Governor approves or disapproves the proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 5)Governor proposes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 6)Governor deletes a proposal (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 7)STABILA byte address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 8)STABILA string address converts to solidity address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 9)Send token to target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 10)Query token amount of target address (Since Odyssey-v3.1.1, SVM built-in function is not supported temporarily) 11)Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of STABILA is a hash result based on STABILA's sha256, not an accurate Ethereum RIPEMD160.","title":"5.2.2 The Usage of the Function of Smart Contract"},{"location":"introduction/overview/#523-contract-address-using-in-solidity-language","text":"Ethereum VM address is 20 bytes, but STABILA's VM address is 21 bytes. 1. address conversion Need to convert STABILA's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) stabila address to solidity address type * @param stabilaAddress uint256 stabilaAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromStabilaInt(uint256 stabilaAddress) public view returns(address){ return address(stabilaAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. 2. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address stabilaAddress) public view returns (uint256){ // if (stabilaAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (stabilaAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c 3. variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use STABILA address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8).","title":"5.2.3 Contract Address Using in Solidity Language"},{"location":"introduction/overview/#53-ucr-introduction","text":"Each command of smart contract consume system resource while running, we use 'Ucr' as the unit of the consumption of the resource.","title":"5.3 Ucr Introduction"},{"location":"introduction/overview/#531-how-to-get-ucr","text":"Stake STB to get ucr. Example (Using wallet-cli): cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] Stake STB to get ucr, ucr obtained = user's STB staked amount / total amount of staked STB in STABILA * 50_000_000_000. Example: If there are only two users, A stakes 2 STB, B stakes 2 STB the ucr they can get is: A: 25_000_000_000 and ucr_limit is 25_000_000_000 B: 25_000_000_000 and ucr_limit is 25_000_000_000 when C stakes 1 STB: the ucr they can get is: A: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 10_000_000_000 and ucr_limit is 10_000_000_000 Ucr Recovery The ucr consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72_000_000 Ucr if there is no continuous consumption or STB stake one hour later, the ucr consumption amount will be 72_000_000 - (72_000_000 * (60*60/60*60*24)) Ucr = 69_000_000 Ucr 24 hours later, the ucr consumption amount will be 0 Ucr","title":"5.3.1 How to Get Ucr"},{"location":"introduction/overview/#532-how-to-set-fee-limit-caller-must-read","text":"Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of ucr consumed while call the contract can be converted to STB or UNIT, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Ucr, STB and UNIT, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great ucr, it will not consume too much ucr from the caller. Before you set fee limit, you need to know several conception: 1. The legal fee limit is a integer between 0 - 10^9, unit is UNIT. 2. Different smart contracts consume different amount of ucr due to their complexity. The same trigger in the same contract almost consumes the same amount fo ucr[1]. When the contract is triggered, the commands will be executed one by one and consume ucr. If it reaches the fee limit, commands will fail to be executed, and ucr is not refundable. 3. Currently fee limit only refers to the ucr converted to UNIT that will be consumed from the caller[2]. The ucr consumed by triggering contract also includes developer's share. 4. For a vicious contract, if it encounters execution timeout or bug crash, all it's ucr will be consumed. 5. Developer may undertake a proportion of ucr consumption(like 90%). But if the developer's ucr is not enough for consumption, the rest of the ucr consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough ucr, then it will burn equivalent amount of STB [2]. To encourage caller to trigger the contract, usually developer has enough ucr. Example How to estimate the fee limit: Assume contract C's last execution consumes 18000 Ucr, so estimate the ucr consumption limit to be 20000 Ucr[3] According to the staked STB amount and ucr conversion, assume 1 STB = 400 ucr. When to burn STB, 1 STB = 10000 ucr[4] Assume developer undertake 90% ucr consumption, and developer has enough ucr. Then the way to estimate the fee limit is: 1). A = 20000 ucr * (1 STB / 400 ucr) = 50 STB = 50_000_000 UNIT, 2). B = 20000 ucr * (1 STB / 10000 ucr) = 2 STB = 2_000_000 UNIT, 3). Take the greater number of A and B, which is 50_000_000 UNIT, 4). Developer undertakes 90% ucr consumption, caller undertakes 10% ucr consumption, So, the caller is suggested to set fee limit to 50_000_000 UNIT * 10% = 5_000_000 UNIT Note: [1] The ucr consumption of each execution may fluctuate slightly due to the situation of all the nodes. [2] STABILA may change this policy. [3] The estimated ucr consumption limit for the next execution should be greater than the last one. [4] 1 STB = 10^4 ucr is a fixed number for burning STB to get ucr, STABILA may change it in future.","title":"5.3.2 How to Set Fee Limit (Caller Must Read)"},{"location":"introduction/overview/#533-ucr-calculation-developer-must-read","text":"1. In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available ucr will be deducted. If the contract runs normally or revert, only the ucr needed for the execution of the commands will be deducted. 2. Developer can set the proportion of the ucr consumption it undertakes during the execution, this proportion cna be changed later. If the developer's ucr is not enough, it will consume the caller's ucr. 3. Currently, the total ucr available when trigger a contract is composed of caller fee limit and developer's share Note: - If the developer is not sure about whether the contract is normal, do not set caller's ucr consumption proportion to 0%, in case all developer's ucr will be deducted due to vicious execution[1]. - We recommend to set caller's ucr consumption proportion to 10% ~ 100%[2]. Example 1 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 100% which means the caller will pay for the ucr consumption completely. A triggers C, the fee limit set is 30000000 (unit UNIT, 30 STB) So during this trigger the ucr A can use is from two parts: - A's ucr by staking STB; - The ucr converted from the amount of STB burning according to a fixed rate; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (30 - 10) STB = 20 STB available, so the ucr it can keep consuming is 20 STB / 100 UNIT = 200000 ucr. Finally, in this call, the ucr A can use is (100000 + 200000) = 300000 ucr. If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far more less than the amount of ucr this trigger can use. If Assert-style error come out, it will consume the whole number of ucr set for fee limit. Example 2 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 40% which means the developer will pay for the rest 60% ucr consumption. Developer D stakes 50 STB to get 500000 ucr. A triggers C, the fee limit set is 200000000 (unit UNIT, 200 STB). So during this trigger the ucr A can use is from three parts: - A's ucr by staking STB -- X; - The ucr converted from the amount of STB bruning according to a fixed rate -- Y; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (200 - 10) STB = 190 STB available, but A only has 90 STB left, so the ucr it can keep consuming is 90 STB / 100 UNIT = 900000 ucr; - D's ucr by staking STB -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the ucr A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the ucr A can use is (X + Y) / 40% If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far more less than the amount of ucr this trigger can use. Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the ucr consumption. If Assert-style error comes out, it will consume all ucr from the developer itsef. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent.","title":"5.3.3 Ucr Calculation (Developer Must Read)"},{"location":"introduction/overview/#54-smart-contract-development-tool","text":"Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/stabila.log Write your first smart contract pragma solidity ^0.4.0; contract DataStore { mapping ( uint256 => uint256 ) data ; function set ( uint256 key , uint256 value ) public { data [ key ] = value ; } function get ( uint256 key ) view public returns ( uint256 value ) { value = data [ key ]; } } Using Wallet-cli to Deploy Download Wallet-Cli and build # download source code git clone https://github.com/stabilaprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI content from generated .abi file bytecode: ByteCode content from generated .bin file constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The STB consumption limit for the deployment, unit is UNIT(1 UNIT = 10^-6 STB) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of STB transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The STB consumption limit for the trigger, unit is UNIT(1 UNIT = 10^-6 STB) value: The amount of STB transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract.","title":"5.4 Smart Contract Development Tool"},{"location":"introduction/overview/#6-src-10-token-introduction","text":"STABILA network support two types of token, one is SRC-20 token issued by smart contract, the other one is SRC-10 token issued by system contract.","title":"6. SRC-10 Token Introduction"},{"location":"introduction/overview/#61-how-to-issue-a-src-10-token","text":"HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"stb_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"cded_supply\":{\"cded_amount\":1, \"cded_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter stb_num: Define the price by the ratio of stb_num/num, Parameter num: Define the price by the ratio of stb_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter cded_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'stb_num' is UNIT","title":"6.1 How to Issue a SRC-10 Token"},{"location":"introduction/overview/#62-participate-src-10-token","text":"HTTP API: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"6.2 Participate SRC-10 Token"},{"location":"introduction/overview/#63-src-10-token-transfer","text":"HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"6.3 SRC-10 Token Transfer"},{"location":"introduction/overview/#7-resource-model","text":"","title":"7. Resource Model"},{"location":"introduction/overview/#71-resource-model-introduction","text":"STABILA network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by STABILA's exclusive RAM model, STABILA's RAM resource is almost infinite. STABILA network imports two resource conceptions: Bandwidth points and Ucr. Bandwidth Point represents Bandwidth, Ucr represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Ucr","title":"7.1 Resource Model Introduction"},{"location":"introduction/overview/#72-bandwidth-points","text":"The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the staked STB in the network and the self-staked STB amount, the Bandwidth Points an account possesses is not fixed.","title":"7.2 Bandwidth Points"},{"location":"introduction/overview/#721-how-to-get-bandwidth-points","text":"1. By staking STB to get Bandwidth Points, Bandwidth Points = the amount of STB self-staked / the total amount of STB staked for Bandwidth Points in the network * 43_200_000_000 2. Every account has a fixed amount of free Bandwidth Points every day, it is defined in #61 network parameter, user can check the value on stabilascan(https://stabilascan.org/representatives).","title":"7.2.1 How to Get Bandwidth Points"},{"location":"introduction/overview/#722-bandwidth-points-consumption","text":"Transactions other than queries consume Bandwidth points. A special scenario: When transferring STB or SRC-10 tokens to an account that does not yet exist, this procedure creates the account prior to the transfer. To create an account, a flat charge of 1 STB is required. If there are insufficient Bandwidth points obtained by STB staking, an additional 0.1 STB will be spent. Bandwidth points consumption sequence for SRC-10 transfer: Free Bandwidth points. SRC-10 issuer's Bandwidth points(if possible.) Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT;","title":"7.2.2 Bandwidth Points Consumption"},{"location":"introduction/overview/#723-bandwidth-points-recovery","text":"Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0.","title":"7.2.3 Bandwidth Points Recovery"},{"location":"introduction/overview/#73-ucr","text":"5.3 Ucr Introduction","title":"7.3 Ucr"},{"location":"introduction/overview/#74-resource-delegation","text":"In STABILA network, an account can stake STB for Bandwidth or Ucr for other accounts. The primary account owns the staked STB and STABILA power, the recipient account owns the Bandwidth or Ucr. Like ordinary staking, resource delegation staking is also at least 3 days. Example(Using wallet-cli) cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] [receiverAddress] cded_balance: the amount of STB to stake (unit UNIT) cded_duration: the staking period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Ucr receiverAddress: recipient account address","title":"7.4 Resource Delegation"},{"location":"introduction/overview/#75-other-fees","text":"Type Fee Create a executive 9999 STB Issue a SRC-10 token 1024 STB Create an account 1 STB Create an exchange 1024 STB","title":"7.5 Other Fees"},{"location":"introduction/overview/#8-wallet-introduction","text":"","title":"8. Wallet Introduction"},{"location":"introduction/overview/#81-wallet-cli-introduction","text":"Please refer to: https://github.com/stabilaprotocol/wallet-cli/blob/master/README.md","title":"8.1 wallet-cli Introduction"},{"location":"introduction/overview/#82-get-transaction-id","text":"Hash.sha256(transaction.getRawData().toByteArray())","title":"8.2 Get Transaction ID"},{"location":"introduction/overview/#83-get-block-id","text":"private byte[] generateBlockId(long blockNum, byte[] blockHash) { byte[] numBytes = Longs.toByteArray(blockNum); byte[] hash = blockHash; System.arraycopy(numBytes, 0, hash, 0, 8); return hash; }","title":"8.3 Get Block ID"},{"location":"introduction/overview/#84-how-to-build-a-transaction-locally","text":"According to the definition of the transaction, you need to fill up all the fields of the transaction. You need to set reference block and expiration time information, so you need to connect to the Mainnet. We recommend to use the latest block on fullnode as the value of reference block, use the latest block time plus N minutes as the value of expiration time. The network judgment condition is if (expiration > latest block time and expiration < latest block time + 24 hours) means the transaction is in period of validity. Otherwise, it will be an overdue transaction, will not be accepted by the Mainnet. Way to set reference block: set RefBlockHash the bytes from the 8 to 16(not included) of the hash of the latest block, set BlockBytes the bytes from 6 to 8(not included) of the height of the latest block. public static Transaction setReference(Transaction transaction, Block newestBlock) { long blockHeight = newestBlock.getBlockHeader().getRawData().getNumber(); byte[] blockHash = getBlockHash(newestBlock).getBytes(); byte[] refBlockNum = ByteArray.fromLong(blockHeight); Transaction.raw rawData = transaction.getRawData().toBuilder() .setRefBlockHash(ByteString.copyFrom(ByteArray.subArray(blockHash, 8, 16))) .setRefBlockBytes(ByteString.copyFrom(ByteArray.subArray(refBlockNum, 6, 8))) .build(); return transaction.toBuilder().setRawData(rawData).build(); } Way to set expiration time and transaction timestamp: public static Transaction createTransaction(byte[] from, byte[] to, long amount) { Transaction.Builder transactionBuilder = Transaction.newBuilder(); Block newestBlock = WalletClient.getBlock(-1); Transaction.Contract.Builder contractBuilder = Transaction.Contract.newBuilder(); Contract.TransferContract.Builder transferContractBuilder = Contract.TransferContract .newBuilder(); transferContractBuilder.setAmount(amount); ByteString bsTo = ByteString.copyFrom(to); ByteString bsOwner = ByteString.copyFrom(from); transferContractBuilder.setToAddress(bsTo); transferContractBuilder.setOwnerAddress(bsOwner); try { Any any = Any.pack(transferContractBuilder.build()); contractBuilder.setParameter(any); } catch (Exception e) { return null; } contractBuilder.setType(Transaction.Contract.ContractType.TransferContract); transactionBuilder.getRawDataBuilder().addContract(contractBuilder) .setTimestamp(System.currentTimeMillis()) //in the form of millisecond .setExpiration(newestBlock.getBlockHeader().getRawData().getTimestamp() + 10 * 60 * 60 * 1000); Transaction transaction = transactionBuilder.build(); Transaction refTransaction = setReference(transaction, newestBlock); return refTransaction; }","title":"8.4 How to Build a Transaction Locally"},{"location":"mechanism-algorithm/account/","text":"Account Model \u00b6 Introduction \u00b6 STABILA uses account model. An account's identity is address. It needs private key signature to operate an account. An account has many attributes, like STB balance, tokens balance, bandwidth, etc. STB and tokens can be transfered from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a governor candidate, vote, etc. All STABILA's activities are based on account. How to Create an Account \u00b6 Use a wallet to generate the address and private key. To activate the account, you need to transfer STB or transfer token to the new created account. Generate an account Use an account already existed in STABILA network to create an account If you have enough staked BandWidth Points, creating an account only consume your staked BandWidth Points, otherwise, it burns 0.1 STB. Key-pair Generation \u00b6 Stabila signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random number, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point. Address Format \u00b6 Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address come out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" Signature \u00b6 Steps \u00b6 Get the raw data of the transaction, then transfer it to byte[] Do sha256 calculation to the raw data Use the private key to sign the result gained from step 2 Add the signature back into the transaction Algorithm \u00b6 ECDSA, SECP256K Example: text priKey:::8e812436a0e3323166e1f0e8ba79e19e217b2c4a53c970d4cca0cfb1078979df pubKey::04a5bb3b28466f578e6e93fbfd5f75cee1ae86033aa4bbea690e3312c087181eb366f9a1d1d6a437a9bf9fc65ec853b9fd60fa322be3997c47144eb20da658b3d1 hash:::159817a085f113d099d3d93c051410e9bfe043cc5c20e43aa9a083bf73660145 r:::38b7dac5ee932ac1bf2bc62c05b792cd93c3b4af61dc02dbb4b93dacb758123f s:::08bf123eabe77480787d664ca280dc1f20d9205725320658c39c6c143fd5642d v:::0 Note: The size of the signature result is 65 bytes. r 32 bytes, s 32 bytes, v 1 bytes. fullnode will verify the signature, it generates an address with the value of hash and r\u3001s\u3001v, then it compares with the address in the transaction. Demo \u00b6 public static Transaction sign ( Transaction transaction , ECKey myKey ) { Transaction . Builder transactionBuilderSigned = transaction . toBuilder (); byte [] hash = sha256 ( transaction . getRawData (). toByteArray ()); List < Contract > listContract = transaction . getRawData (). getContractList (); for ( int i = 0 ; i < listContract . size (); i ++) { ECDSASignature signature = myKey . sign ( hash ); ByteString bsSign = ByteString . copyFrom ( signature . toByteArray ()); // Each contract may be signed with a different private key in the future. transactionBuilderSigned . addSignature ( bsSign ); } }","title":"Account Model"},{"location":"mechanism-algorithm/account/#account-model","text":"","title":"Account Model"},{"location":"mechanism-algorithm/account/#introduction","text":"STABILA uses account model. An account's identity is address. It needs private key signature to operate an account. An account has many attributes, like STB balance, tokens balance, bandwidth, etc. STB and tokens can be transfered from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a governor candidate, vote, etc. All STABILA's activities are based on account.","title":"Introduction"},{"location":"mechanism-algorithm/account/#how-to-create-an-account","text":"Use a wallet to generate the address and private key. To activate the account, you need to transfer STB or transfer token to the new created account. Generate an account Use an account already existed in STABILA network to create an account If you have enough staked BandWidth Points, creating an account only consume your staked BandWidth Points, otherwise, it burns 0.1 STB.","title":"How to Create an Account"},{"location":"mechanism-algorithm/account/#key-pair-generation","text":"Stabila signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random number, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point.","title":"Key-pair Generation"},{"location":"mechanism-algorithm/account/#address-format","text":"Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address come out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"","title":"Address Format"},{"location":"mechanism-algorithm/account/#signature","text":"","title":"Signature"},{"location":"mechanism-algorithm/account/#steps","text":"Get the raw data of the transaction, then transfer it to byte[] Do sha256 calculation to the raw data Use the private key to sign the result gained from step 2 Add the signature back into the transaction","title":"Steps"},{"location":"mechanism-algorithm/account/#algorithm","text":"ECDSA, SECP256K Example: text priKey:::8e812436a0e3323166e1f0e8ba79e19e217b2c4a53c970d4cca0cfb1078979df pubKey::04a5bb3b28466f578e6e93fbfd5f75cee1ae86033aa4bbea690e3312c087181eb366f9a1d1d6a437a9bf9fc65ec853b9fd60fa322be3997c47144eb20da658b3d1 hash:::159817a085f113d099d3d93c051410e9bfe043cc5c20e43aa9a083bf73660145 r:::38b7dac5ee932ac1bf2bc62c05b792cd93c3b4af61dc02dbb4b93dacb758123f s:::08bf123eabe77480787d664ca280dc1f20d9205725320658c39c6c143fd5642d v:::0 Note: The size of the signature result is 65 bytes. r 32 bytes, s 32 bytes, v 1 bytes. fullnode will verify the signature, it generates an address with the value of hash and r\u3001s\u3001v, then it compares with the address in the transaction.","title":"Algorithm"},{"location":"mechanism-algorithm/account/#demo","text":"public static Transaction sign ( Transaction transaction , ECKey myKey ) { Transaction . Builder transactionBuilderSigned = transaction . toBuilder (); byte [] hash = sha256 ( transaction . getRawData (). toByteArray ()); List < Contract > listContract = transaction . getRawData (). getContractList (); for ( int i = 0 ; i < listContract . size (); i ++) { ECDSASignature signature = myKey . sign ( hash ); ByteString bsSign = ByteString . copyFrom ( signature . toByteArray ()); // Each contract may be signed with a different private key in the future. transactionBuilderSigned . addSignature ( bsSign ); } }","title":"Demo"},{"location":"mechanism-algorithm/dex/","text":"Decentralized Exchange(DEX) \u00b6 STABILA network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs. What is an Exchange Pair \u00b6 The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/STB. Exchange Pair Creation \u00b6 Any account can create an exchange pair, it burns 1024 STB. Please refer to 'wallet/exchangecreate'. Exchange Pair Transaction \u00b6 Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction'. Exchange Pair Injection \u00b6 The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject'. Exchange Pair Withdrawal \u00b6 The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw'. Query \u00b6 Transaction Query \u00b6 ListExchanges : Query the list of all the exchange pairs. GetPaginatedExchangeList : Query the list of all the exchange pairs by pagination. GetExchangeById : Query an exchange pair by exchange pair id. Price Calculation \u00b6 The token price is determined by the ratio of the balance of the two tokens. Calculate the Amount of Token You Can Get \u00b6 sellTokenQuant is the amount of the first_token you want to sell. buyTokenQuant is the amount of second_token you can get. supply = 1_000_000_000_000_000_000L supplyQuant = - supply * ( 1.0 - Math . pow ( 1.0 + ( double ) sellTokenQuant /( firstTokenBalance + sellTokenQuant , 0.0005 )) buyTokenQuant = ( long ) balance * ( Math . pow ( 1.0 + ( double ) supplyQuant / supply , 2000.0 ) - 1.0 )","title":"Decentralized Exchange"},{"location":"mechanism-algorithm/dex/#decentralized-exchangedex","text":"STABILA network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs.","title":"Decentralized Exchange(DEX)"},{"location":"mechanism-algorithm/dex/#what-is-an-exchange-pair","text":"The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/STB.","title":"What is an Exchange Pair"},{"location":"mechanism-algorithm/dex/#exchange-pair-creation","text":"Any account can create an exchange pair, it burns 1024 STB. Please refer to 'wallet/exchangecreate'.","title":"Exchange Pair Creation"},{"location":"mechanism-algorithm/dex/#exchange-pair-transaction","text":"Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction'.","title":"Exchange Pair Transaction"},{"location":"mechanism-algorithm/dex/#exchange-pair-injection","text":"The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject'.","title":"Exchange Pair Injection"},{"location":"mechanism-algorithm/dex/#exchange-pair-withdrawal","text":"The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw'.","title":"Exchange Pair Withdrawal"},{"location":"mechanism-algorithm/dex/#query","text":"","title":"Query"},{"location":"mechanism-algorithm/dex/#transaction-query","text":"ListExchanges : Query the list of all the exchange pairs. GetPaginatedExchangeList : Query the list of all the exchange pairs by pagination. GetExchangeById : Query an exchange pair by exchange pair id.","title":"Transaction Query"},{"location":"mechanism-algorithm/dex/#price-calculation","text":"The token price is determined by the ratio of the balance of the two tokens.","title":"Price Calculation"},{"location":"mechanism-algorithm/dex/#calculate-the-amount-of-token-you-can-get","text":"sellTokenQuant is the amount of the first_token you want to sell. buyTokenQuant is the amount of second_token you can get. supply = 1_000_000_000_000_000_000L supplyQuant = - supply * ( 1.0 - Math . pow ( 1.0 + ( double ) sellTokenQuant /( firstTokenBalance + sellTokenQuant , 0.0005 )) buyTokenQuant = ( long ) balance * ( Math . pow ( 1.0 + ( double ) supplyQuant / supply , 2000.0 ) - 1.0 )","title":"Calculate the Amount of Token You Can Get"},{"location":"mechanism-algorithm/multi-signatures/","text":"Multi-signature \u00b6 Background \u00b6 Note Since v3.5 In the past version, the transactions created in one account can only be signed by one private key, an account can only be managed by one private key. Since V3.5, an account can be managed by several private keys, and the transactions created in one account can be signed by several private keys. Concept \u00b6 There are three types of permission: owner\u3001executive and active. Owner permission has the right to execute all the contracts. Executive permission is for Governor. Active permission contains a set of contracts selected execution permissions. Protocol Definition \u00b6 Account \u00b6 message Account { // ... Permission owner_permission = 31 ; Permission executive_permission = 32 ; repeated Permission active_permission = 33 ; } Three attributes are added, owner_permission\u3001executive_permission and active_permission. active_permission is a list, the length can not be bigger than 8. ContractType \u00b6 message Transaction { message Contract { enum ContractType { AccountCreateContract = 0 ; // ... AccountPermissionUpdateContract = 46 ; } } } AccountPermissionUpdateContract is a new contract type used to update the account permission. AccountPermissionUpdateContract \u00b6 message AccountPermissionUpdateContract { bytes owner_address = 1 ; Permission owner = 2 ; Permission executive = 3 ; repeated Permission actives = 4 ; } owner_address : The account applies multi-signatures owner : Owner permission executive : Executive permission (if is executive) actives : Active permission This will override the Original account permission. Permission \u00b6 message Permission { enum PermissionType { Owner = 0 ; Executive = 1 ; Active = 2 ; } PermissionType type = 1 ; int32 id = 2 ; string permission_name = 3 ; int64 threshold = 4 ; int32 parent_id = 5 ; bytes operations = 6 ; repeated Key keys = 7 ; } PermissionType : Permission type id : Generated by system. Owner id=0, Executive id=1, Active id increases from 2. Specifying using which permission to execute a contract by setting id. For instance, using owner permission, set id=0 permission_name : Permission name, 32 bytes length limit threshold : The threshold of the signature weight parent_id : Current 0 operations : 32 bytes (256 b), each bit represent the execution permission of one contract, 1 means it owns the execution permission of the contract. For instance, operations=0x0100...00(hex), 100...0(binary), refer to the definition of Transaction.ContractType in proto, the id of AccountCreateContract is 0, means this permission only owns the execution permission of AccountCreateContract keys : The accounts and weights that all own the permission, 5 keys at most. Key \u00b6 message Key { bytes address = 1 ; int64 weight = 2 ; } address : The account address weight : The signature weight Transaction \u00b6 message Transaction { // ... int32 Permission_id = 5 ; } Permission_id is added. It is corresponding to Permission.id 1 is not allowed, because executive permission is only used to produce blocks, not for transaction signature. Owner Permission \u00b6 Owner permission is the top permission of an account. It is used to control account ownership, adjust permission structure. Owner Permission has the right to execute all the contracts. Owner permission's features: The account that has owner permission can change the owner permission When owner permission is null, the default owner of the account owns the owner permission When you create a new account, the address will be insert into owner permission automatically, default weight is 1, keys field only contains this address and also weight is 1. If a permissionId is not specified when a contract is executed, using owner permission by defualt. Executive Permission \u00b6 Super representatives can use this permission to manage block producing. Only executive account has this permission. Usage scenario example: A governor deploys a executive node on cloud server. In order to keep the account on the cloud server safe, you can only give the block producing permission to the account you put on cloud server. Because this account only owns block producing permission, no STB transfer permission, so even if the account on the cloud server is leaked, the STB will not be lost. Executive node configuration: if no executive permission is used, no need to configure if itness permission is used, need to reconfigure: # config.conf // Optional.The default is empty. // It is used when the executive account has set the executivePermission. // When it is not empty, the localExecutiveAccountAddress represents the address of the executive account, // and the localexecutive is configured with the private key of the executivePermissionAddress in the executive account. // When it is empty,the localexecutive is configured with the private key of the executive account. //localExecutiveAccountAddress = localexecutive = [ f4df789d3210ac881cb900464dd30409453044d2777060a0c391cbdf4c6a4f57 ] Active Permission \u00b6 Active permission is composed of a set of contract execution permission, like creating an account, trnasfer function, etc. Active permission's features: the account owns owner permission can change active permission the account owns the execution permission of AccountPermissionUpdateContract can also change active permission 8 permissions at most permissionId increases from 2 automatically when a new account is created, an active permission will be created automatically, and the address will be inserted into it, default weight is 1, keys field only contains this address and weight is 1 Fee \u00b6 Using AccountPermissionUpdateContract costs 100STB If a transaction contains 2 or more than 2 signatures, it charges an extra 1 STB besides the transaction fee The fee can be modified by proposing API \u00b6 Change Permission \u00b6 AccountPermissionUpdateContract , steps: call getaccount to query the account, get the original permission change permission build transaction and sign send transaction Demo HTTP request: // POST to http://{{host}}:{{port}}/wallet/accountpermissionupdate { \"owner_address\": \"41ffa9466d5bf6bb6b7e4ab6ef2b1cb9f1f41f9700\", \"owner\": { \"type\": 0, \"id\": 0, \"permission_name\": \"owner\", \"threshold\": 2, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }, \"executive\": { \"type\": 1, \"id\": 1, \"permission_name\": \"executive\", \"threshold\": 1, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 } ] }, \"actives\": [{ \"type\": 2, \"id\": 2, \"permission_name\": \"active0\", \"threshold\": 3, \"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\", \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }] } Calculate the Active Permission's Operations \u00b6 public static void main ( String [] args ) { //you need to specify the id of the contract you need to give permission to by referring to the definition of Transaction.ContractType in proto to get the id of the contract, below includes all the contract except AccountPermissionUpdateContract(id=46) Integer [] contractId = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 30 , 31 , 32 , 33 , 41 , 42 , 43 , 44 , 45 }; List < Integer > list = new ArrayList <>( Arrays . asList ( contractId )); byte [] operations = new byte [ 32 ]; list . forEach ( e -> { operations [ e / 8 ] |= ( 1 << e % 8 ); }); //7fff1fc0033e0000000000000000000000000000000000000000000000000000 System . out . println ( ByteArray . toHexString ( operations )); } Contract Execution \u00b6 (1). Create transaction, the same as none multi-signatures (2). Specify Permission_id , default 0, represent owner permission (3). User A sign the transaction, and then send it to user B (4). User B sign the transaction gets from A, and then send it to user C ...... (n). The last users that signs the transaction broadcast it to the node (n+1). The node will verify if the sum of the weight of all signatures is bigger than threshold, if true, the transaction is accepted, otherwise, is rejected Other APIs \u00b6 Please refer to HTTP API and RPC API for more information. add signature ```console curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d ' {\"transaction\": \"TransferContract\", \"privateKey\": \"permissionkey1\"}' ``` protobuf rpc AddSign (TransactionSign) returns (TransactionExtention) {} query the addresses that already signed a transaction ```console curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{\"transaction\"}' ``` protobuf rpc GetTransactionApprovedList(Transaction) returns (TransactionApprovedList) { } query the signature weight of a transaction ```console curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{\"transaction\"}' ``` protobuf rpc GetTransactionSignWeight (Transaction) returns (TransactionSignWeight) {} Others \u00b6 Since V3.5, what is the change after a new account is created? When to create a new account, an owner permission and active permission will be generated automatically. Owner permission only contains one key, the weight and threshold are both 1. Active permission also contains one key, the weight and threshold are both 1, and operations is \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", means it support the execution of all contracts except AccountPermissionUpdateContract. After V3.5, if there is a new system contract, the default operations value of the newly created account will change. The operations of existing accounts will not change. Please refer to wallet-cli to check the usage of multi-signature. Fees \u00b6 If you update your account permission, the fee is 100 STB. If a transaction is signed by more than 1 account, the fee is 1 STB.","title":"Multi-Signature"},{"location":"mechanism-algorithm/multi-signatures/#multi-signature","text":"","title":"Multi-signature"},{"location":"mechanism-algorithm/multi-signatures/#background","text":"Note Since v3.5 In the past version, the transactions created in one account can only be signed by one private key, an account can only be managed by one private key. Since V3.5, an account can be managed by several private keys, and the transactions created in one account can be signed by several private keys.","title":"Background"},{"location":"mechanism-algorithm/multi-signatures/#concept","text":"There are three types of permission: owner\u3001executive and active. Owner permission has the right to execute all the contracts. Executive permission is for Governor. Active permission contains a set of contracts selected execution permissions.","title":"Concept"},{"location":"mechanism-algorithm/multi-signatures/#protocol-definition","text":"","title":"Protocol Definition"},{"location":"mechanism-algorithm/multi-signatures/#account","text":"message Account { // ... Permission owner_permission = 31 ; Permission executive_permission = 32 ; repeated Permission active_permission = 33 ; } Three attributes are added, owner_permission\u3001executive_permission and active_permission. active_permission is a list, the length can not be bigger than 8.","title":"Account"},{"location":"mechanism-algorithm/multi-signatures/#contracttype","text":"message Transaction { message Contract { enum ContractType { AccountCreateContract = 0 ; // ... AccountPermissionUpdateContract = 46 ; } } } AccountPermissionUpdateContract is a new contract type used to update the account permission.","title":"ContractType"},{"location":"mechanism-algorithm/multi-signatures/#accountpermissionupdatecontract","text":"message AccountPermissionUpdateContract { bytes owner_address = 1 ; Permission owner = 2 ; Permission executive = 3 ; repeated Permission actives = 4 ; } owner_address : The account applies multi-signatures owner : Owner permission executive : Executive permission (if is executive) actives : Active permission This will override the Original account permission.","title":"AccountPermissionUpdateContract"},{"location":"mechanism-algorithm/multi-signatures/#permission","text":"message Permission { enum PermissionType { Owner = 0 ; Executive = 1 ; Active = 2 ; } PermissionType type = 1 ; int32 id = 2 ; string permission_name = 3 ; int64 threshold = 4 ; int32 parent_id = 5 ; bytes operations = 6 ; repeated Key keys = 7 ; } PermissionType : Permission type id : Generated by system. Owner id=0, Executive id=1, Active id increases from 2. Specifying using which permission to execute a contract by setting id. For instance, using owner permission, set id=0 permission_name : Permission name, 32 bytes length limit threshold : The threshold of the signature weight parent_id : Current 0 operations : 32 bytes (256 b), each bit represent the execution permission of one contract, 1 means it owns the execution permission of the contract. For instance, operations=0x0100...00(hex), 100...0(binary), refer to the definition of Transaction.ContractType in proto, the id of AccountCreateContract is 0, means this permission only owns the execution permission of AccountCreateContract keys : The accounts and weights that all own the permission, 5 keys at most.","title":"Permission"},{"location":"mechanism-algorithm/multi-signatures/#key","text":"message Key { bytes address = 1 ; int64 weight = 2 ; } address : The account address weight : The signature weight","title":"Key"},{"location":"mechanism-algorithm/multi-signatures/#transaction","text":"message Transaction { // ... int32 Permission_id = 5 ; } Permission_id is added. It is corresponding to Permission.id 1 is not allowed, because executive permission is only used to produce blocks, not for transaction signature.","title":"Transaction"},{"location":"mechanism-algorithm/multi-signatures/#owner-permission","text":"Owner permission is the top permission of an account. It is used to control account ownership, adjust permission structure. Owner Permission has the right to execute all the contracts. Owner permission's features: The account that has owner permission can change the owner permission When owner permission is null, the default owner of the account owns the owner permission When you create a new account, the address will be insert into owner permission automatically, default weight is 1, keys field only contains this address and also weight is 1. If a permissionId is not specified when a contract is executed, using owner permission by defualt.","title":"Owner Permission"},{"location":"mechanism-algorithm/multi-signatures/#executive-permission","text":"Super representatives can use this permission to manage block producing. Only executive account has this permission. Usage scenario example: A governor deploys a executive node on cloud server. In order to keep the account on the cloud server safe, you can only give the block producing permission to the account you put on cloud server. Because this account only owns block producing permission, no STB transfer permission, so even if the account on the cloud server is leaked, the STB will not be lost. Executive node configuration: if no executive permission is used, no need to configure if itness permission is used, need to reconfigure: # config.conf // Optional.The default is empty. // It is used when the executive account has set the executivePermission. // When it is not empty, the localExecutiveAccountAddress represents the address of the executive account, // and the localexecutive is configured with the private key of the executivePermissionAddress in the executive account. // When it is empty,the localexecutive is configured with the private key of the executive account. //localExecutiveAccountAddress = localexecutive = [ f4df789d3210ac881cb900464dd30409453044d2777060a0c391cbdf4c6a4f57 ]","title":"Executive Permission"},{"location":"mechanism-algorithm/multi-signatures/#active-permission","text":"Active permission is composed of a set of contract execution permission, like creating an account, trnasfer function, etc. Active permission's features: the account owns owner permission can change active permission the account owns the execution permission of AccountPermissionUpdateContract can also change active permission 8 permissions at most permissionId increases from 2 automatically when a new account is created, an active permission will be created automatically, and the address will be inserted into it, default weight is 1, keys field only contains this address and weight is 1","title":"Active Permission"},{"location":"mechanism-algorithm/multi-signatures/#fee","text":"Using AccountPermissionUpdateContract costs 100STB If a transaction contains 2 or more than 2 signatures, it charges an extra 1 STB besides the transaction fee The fee can be modified by proposing","title":"Fee"},{"location":"mechanism-algorithm/multi-signatures/#api","text":"","title":"API"},{"location":"mechanism-algorithm/multi-signatures/#change-permission","text":"AccountPermissionUpdateContract , steps: call getaccount to query the account, get the original permission change permission build transaction and sign send transaction Demo HTTP request: // POST to http://{{host}}:{{port}}/wallet/accountpermissionupdate { \"owner_address\": \"41ffa9466d5bf6bb6b7e4ab6ef2b1cb9f1f41f9700\", \"owner\": { \"type\": 0, \"id\": 0, \"permission_name\": \"owner\", \"threshold\": 2, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }, \"executive\": { \"type\": 1, \"id\": 1, \"permission_name\": \"executive\", \"threshold\": 1, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 } ] }, \"actives\": [{ \"type\": 2, \"id\": 2, \"permission_name\": \"active0\", \"threshold\": 3, \"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\", \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }] }","title":"Change Permission"},{"location":"mechanism-algorithm/multi-signatures/#calculate-the-active-permissions-operations","text":"public static void main ( String [] args ) { //you need to specify the id of the contract you need to give permission to by referring to the definition of Transaction.ContractType in proto to get the id of the contract, below includes all the contract except AccountPermissionUpdateContract(id=46) Integer [] contractId = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 30 , 31 , 32 , 33 , 41 , 42 , 43 , 44 , 45 }; List < Integer > list = new ArrayList <>( Arrays . asList ( contractId )); byte [] operations = new byte [ 32 ]; list . forEach ( e -> { operations [ e / 8 ] |= ( 1 << e % 8 ); }); //7fff1fc0033e0000000000000000000000000000000000000000000000000000 System . out . println ( ByteArray . toHexString ( operations )); }","title":"Calculate the Active Permission's Operations"},{"location":"mechanism-algorithm/multi-signatures/#contract-execution","text":"(1). Create transaction, the same as none multi-signatures (2). Specify Permission_id , default 0, represent owner permission (3). User A sign the transaction, and then send it to user B (4). User B sign the transaction gets from A, and then send it to user C ...... (n). The last users that signs the transaction broadcast it to the node (n+1). The node will verify if the sum of the weight of all signatures is bigger than threshold, if true, the transaction is accepted, otherwise, is rejected","title":"Contract Execution"},{"location":"mechanism-algorithm/multi-signatures/#other-apis","text":"Please refer to HTTP API and RPC API for more information. add signature ```console curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d ' {\"transaction\": \"TransferContract\", \"privateKey\": \"permissionkey1\"}' ``` protobuf rpc AddSign (TransactionSign) returns (TransactionExtention) {} query the addresses that already signed a transaction ```console curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{\"transaction\"}' ``` protobuf rpc GetTransactionApprovedList(Transaction) returns (TransactionApprovedList) { } query the signature weight of a transaction ```console curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{\"transaction\"}' ``` protobuf rpc GetTransactionSignWeight (Transaction) returns (TransactionSignWeight) {}","title":"Other APIs"},{"location":"mechanism-algorithm/multi-signatures/#others","text":"Since V3.5, what is the change after a new account is created? When to create a new account, an owner permission and active permission will be generated automatically. Owner permission only contains one key, the weight and threshold are both 1. Active permission also contains one key, the weight and threshold are both 1, and operations is \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", means it support the execution of all contracts except AccountPermissionUpdateContract. After V3.5, if there is a new system contract, the default operations value of the newly created account will change. The operations of existing accounts will not change. Please refer to wallet-cli to check the usage of multi-signature.","title":"Others"},{"location":"mechanism-algorithm/multi-signatures/#fees","text":"If you update your account permission, the fee is 100 STB. If a transaction is signed by more than 1 account, the fee is 1 STB.","title":"Fees"},{"location":"mechanism-algorithm/resource/","text":"Resource Model \u00b6 Introduction \u00b6 STABILA network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by STABILA's exclusive RAM model, STABILA's RAM resource is almost infinite. STABILA network imports two resource conceptions: Bandwidth points and Ucr. Bandwidth Point represents Bandwidth, Ucr represents CPU and Storage. Note Ordinary transaction only consumes Bandwidth points Smart contract related transaction not only consumes Bandwidth points, but also Ucr Bandwidth Points \u00b6 The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1. Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note Due to the change of the total amount of the staked STB in the network and the self-staked STB amount, the Bandwidth Points an account possesses is not fixed. 1. How to Get Bandwidth Points \u00b6 By staking STB to get Bandwidth Points, Bandwidth Points = the amount of STB self-staked / the total amount of STB staked for Bandwidth Points in the network * 43_200_000_000 Every account has a fixed amount of free Bandwidth Points(5000) every day 2. Bandwidth Points Consumption \u00b6 Except for query operation, any transaction consumes Bandwidth points. There's another situation: When you transfer(STB or token) to an account that does not exist in the network, this operation will first create that account in the network and then do the transfer. It only consumes Bandwidth points for account creation, no extra Bandwidth points consumption for transfer. To create an account, a flat charge of 1 STB is required. If there are insufficient Bandwidth points obtained by STB staking, an additional 0.1 STB will be spent. Bandwidth points consumption sequence for SRC-10 transfer: Free Bandwidth points. SRC-10 issuer's Bandwidth points(if possible.) Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT; 3. Bandwidth Points Recovery \u00b6 Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. For the specific formula: $$ U^\\prime = ( 1 - \\frac{T_2 - T_1}{24h} ) * U + u $$ Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. Ucr \u00b6 Each command of smart contract consume system resource while running, we use 'Ucr' as the unit of the consumption of the resource. 1. How to Get Ucr \u00b6 Stake STB to get ucr. Example (Using wallet-cli): cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] stake STB to get ucr, ucr obtained = user's STB staked amount / total amount of staked STB in STABILA * 50_000_000_000. Example: If there are only two users, A stakes 2 STB, B stakes 2 STB the ucr they can get is: A: 25_000_000_000 and ucr_limit is 25_000_000_000 B: 25_000_000_000 and ucr_limit is 25_000_000_000 when C stakes 1 STB: the ucr they can get is: A: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 10_000_000_000 and ucr_limit is 10_000_000_000 Ucr Recovery \u00b6 The ucr consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72_000_000 Ucr if there is no continuous consumption or STB stake one hour later, the ucr consumption amount will be 72_000_000 - (72_000_000 * (60*60/60*60*24)) Ucr = 69_000_000 Ucr 24 hours later, the ucr consumption amount will be 0 Ucr 2. How to Set Fee Limit (Caller Must Read) \u00b6 Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of ucr consumed while call the contract can be converted to STB or UNIT, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Ucr, STB and UNIT, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great ucr, it will not consume too much ucr from the caller. Before you set fee limit, you need to know several conception: The legal fee limit is a integer between 0 - 10^9, unit is UNIT. Different smart contracts consume different amount of ucr due to their complexity. The same trigger in the same contract almost consumes the same amount fo ucr 1 . When the contract is triggered, the commands will be executed one by one and consume ucr. If it reaches the fee limit, commands will fail to be executed, and ucr is not refundable. Currently fee limit only refers to the ucr converted to UNIT that will be consumed from the caller 2 . The ucr consumed by triggering contract also includes developer's share. For a vicious contract, if it encounters execution timeout or bug crash, all it's ucr will be consumed. Developer may undertake a proportion of ucr consumption(like 90%). But if the developer's ucr is not enough for consumption, the rest of the ucr consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough ucr, then it will burn equivalent amount of STB 2 . To encourage caller to trigger the contract, usually developer has enough ucr. Example \u00b6 How to estimate the fee limit: Assume contract C's last execution consumes 18000 Ucr, so estimate the ucr consumption limit to be 20000 Ucr 3 According to the staked STB amount and ucr conversion, assume 1 STB = 400 ucr. When to burn STB, 4 STB = 100000 ucr 4 Assume developer undertake 90% ucr consumption, and developer has enough ucr. Then the way to estimate the fee limit is: A = 20000 ucr * (1 STB / 400 ucr) = 50 STB = 50_000_000 UNIT, B = 20000 ucr * (4 STB / 100000 ucr) = 0.8 STB = 800_000 UNIT, Take the greater number of A and B, which is 50_000_000 UNIT, Developer undertakes 90% ucr consumption, caller undertakes 10% ucr consumption, So, the caller is suggested to set fee limit to 50_000_000 UNIT * 10% = 5_000_000 UNIT 3. Ucr Calculation (Developer Must Read) \u00b6 In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available ucr will be deducted. If the contract runs normally or revert, only the ucr needed for the execution of the commands will be deducted. Developer can set the proportion of the ucr consumption it undertakes during the execution, this proportion cna be changed later. If the developer's ucr is not enough, it will consume the caller's ucr. Currently, the total ucr available when trigger a contract is composed of caller fee limit and developer's share Note If the developer is not sure about whether the contract is normal, do not set caller's ucr consumption proportion to 0%, in case all developer's ucr will be deducted due to vicious execution 1 . We recommend to set caller's ucr consumption proportion to 10% ~ 100% 2 . Example 1 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 100% which means the caller will pay for the ucr consumption completely. A triggers C, the fee limit set is 30000000 (unit UNIT, 30 STB) So during this trigger the ucr A can use is from two parts: A's ucr by staking STB; The ucr converted from the amount of STB burning according to a fixed rate; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (30 - 10) STB = 20 STB available, so the ucr it can keep consuming is 20 STB / 100 UNIT = 200000 ucr. Finally, in this call, the ucr A can use is (100000 + 200000) = 300000 ucr. If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far less than the amount of ucr this trigger can use. If Assert-style error come out, it will consume the whole number of ucr set for fee limit. Example 2 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 40% which means the developer will pay for the rest 60% ucr consumption. Developer D stakes 50 STB to get 500000 ucr. A triggers C, the fee limit set is 200000000 (unit UNIT, 200 STB). So during this trigger the ucr A can use is from three parts: A's ucr by staking STB -- X; The ucr converted from the amount of STB burning according to a fixed rate -- Y; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (200 - 10) STB = 190 STB available, but A only has 90 STB left, so the ucr it can keep consuming is 90 STB / 100 UNIT = 900000 ucr; D's ucr by staking STB -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the ucr A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the ucr A can use is (X + Y) / 40% If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far less than the amount of ucr this trigger can use. If Assert-style error comes out, it will consume the whole number of ucr set for fee limit. Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the ucr consumption. If Assert-style error comes out, it will consume all ucr from the developer itself. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent. Resource Delegation \u00b6 In STABILA network, an account can stake STB for Bandwidth or Ucr for other accounts. The primary account owns the staked STB and STABILA power, the recipient account owns the Bandwidth or Ucr. Like ordinary staking, resource delegation staking is also at least 3 days. Example(Using wallet-cli) cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] [receiverAddress] cded_balance: the amount of STB to stake (unit UNIT) cded_duration: the staking period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Ucr receiverAddress: recipient account address Other Fees \u00b6 Type Fee Create a executive 9999 STB Issue a token 1024 STB Create an account 1 STB Create an exchange 1024 STB The ucr consumption of each execution may fluctuate slightly due to the situation of all the nodes. \u21a9 \u21a9 STABILA may change this policy. \u21a9 \u21a9 \u21a9 The estimated ucr consumption limit for the next execution should be greater than the last one. \u21a9 4 STB = 10^5 ucr is a fixed number for burning STB to get ucr, STABILA may change it in the future. \u21a9","title":"Resource Model"},{"location":"mechanism-algorithm/resource/#resource-model","text":"","title":"Resource Model"},{"location":"mechanism-algorithm/resource/#introduction","text":"STABILA network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by STABILA's exclusive RAM model, STABILA's RAM resource is almost infinite. STABILA network imports two resource conceptions: Bandwidth points and Ucr. Bandwidth Point represents Bandwidth, Ucr represents CPU and Storage. Note Ordinary transaction only consumes Bandwidth points Smart contract related transaction not only consumes Bandwidth points, but also Ucr","title":"Introduction"},{"location":"mechanism-algorithm/resource/#bandwidth-points","text":"The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1. Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note Due to the change of the total amount of the staked STB in the network and the self-staked STB amount, the Bandwidth Points an account possesses is not fixed.","title":"Bandwidth Points"},{"location":"mechanism-algorithm/resource/#1-how-to-get-bandwidth-points","text":"By staking STB to get Bandwidth Points, Bandwidth Points = the amount of STB self-staked / the total amount of STB staked for Bandwidth Points in the network * 43_200_000_000 Every account has a fixed amount of free Bandwidth Points(5000) every day","title":"1. How to Get Bandwidth Points"},{"location":"mechanism-algorithm/resource/#2-bandwidth-points-consumption","text":"Except for query operation, any transaction consumes Bandwidth points. There's another situation: When you transfer(STB or token) to an account that does not exist in the network, this operation will first create that account in the network and then do the transfer. It only consumes Bandwidth points for account creation, no extra Bandwidth points consumption for transfer. To create an account, a flat charge of 1 STB is required. If there are insufficient Bandwidth points obtained by STB staking, an additional 0.1 STB will be spent. Bandwidth points consumption sequence for SRC-10 transfer: Free Bandwidth points. SRC-10 issuer's Bandwidth points(if possible.) Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT; Bandwidth points consumption sequence for other transactions: Free Bandwidth points. Bandwidth points STB staking. Bandwidth points obtained by STB burning, the rate = the number of bytes of the transaction * 1_000 UNIT;","title":"2. Bandwidth Points Consumption"},{"location":"mechanism-algorithm/resource/#3-bandwidth-points-recovery","text":"Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. For the specific formula: $$ U^\\prime = ( 1 - \\frac{T_2 - T_1}{24h} ) * U + u $$ Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0.","title":"3. Bandwidth Points Recovery"},{"location":"mechanism-algorithm/resource/#ucr","text":"Each command of smart contract consume system resource while running, we use 'Ucr' as the unit of the consumption of the resource.","title":"Ucr"},{"location":"mechanism-algorithm/resource/#1-how-to-get-ucr","text":"Stake STB to get ucr. Example (Using wallet-cli): cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] stake STB to get ucr, ucr obtained = user's STB staked amount / total amount of staked STB in STABILA * 50_000_000_000. Example: If there are only two users, A stakes 2 STB, B stakes 2 STB the ucr they can get is: A: 25_000_000_000 and ucr_limit is 25_000_000_000 B: 25_000_000_000 and ucr_limit is 25_000_000_000 when C stakes 1 STB: the ucr they can get is: A: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 20_000_000_000 and ucr_limit is 20_000_000_000 B: 10_000_000_000 and ucr_limit is 10_000_000_000","title":"1. How to Get Ucr"},{"location":"mechanism-algorithm/resource/#ucr-recovery","text":"The ucr consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72_000_000 Ucr if there is no continuous consumption or STB stake one hour later, the ucr consumption amount will be 72_000_000 - (72_000_000 * (60*60/60*60*24)) Ucr = 69_000_000 Ucr 24 hours later, the ucr consumption amount will be 0 Ucr","title":"Ucr Recovery"},{"location":"mechanism-algorithm/resource/#2-how-to-set-fee-limit-caller-must-read","text":"Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of ucr consumed while call the contract can be converted to STB or UNIT, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Ucr, STB and UNIT, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great ucr, it will not consume too much ucr from the caller. Before you set fee limit, you need to know several conception: The legal fee limit is a integer between 0 - 10^9, unit is UNIT. Different smart contracts consume different amount of ucr due to their complexity. The same trigger in the same contract almost consumes the same amount fo ucr 1 . When the contract is triggered, the commands will be executed one by one and consume ucr. If it reaches the fee limit, commands will fail to be executed, and ucr is not refundable. Currently fee limit only refers to the ucr converted to UNIT that will be consumed from the caller 2 . The ucr consumed by triggering contract also includes developer's share. For a vicious contract, if it encounters execution timeout or bug crash, all it's ucr will be consumed. Developer may undertake a proportion of ucr consumption(like 90%). But if the developer's ucr is not enough for consumption, the rest of the ucr consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough ucr, then it will burn equivalent amount of STB 2 . To encourage caller to trigger the contract, usually developer has enough ucr.","title":"2. How to Set Fee Limit (Caller Must Read)"},{"location":"mechanism-algorithm/resource/#example","text":"How to estimate the fee limit: Assume contract C's last execution consumes 18000 Ucr, so estimate the ucr consumption limit to be 20000 Ucr 3 According to the staked STB amount and ucr conversion, assume 1 STB = 400 ucr. When to burn STB, 4 STB = 100000 ucr 4 Assume developer undertake 90% ucr consumption, and developer has enough ucr. Then the way to estimate the fee limit is: A = 20000 ucr * (1 STB / 400 ucr) = 50 STB = 50_000_000 UNIT, B = 20000 ucr * (4 STB / 100000 ucr) = 0.8 STB = 800_000 UNIT, Take the greater number of A and B, which is 50_000_000 UNIT, Developer undertakes 90% ucr consumption, caller undertakes 10% ucr consumption, So, the caller is suggested to set fee limit to 50_000_000 UNIT * 10% = 5_000_000 UNIT","title":"Example"},{"location":"mechanism-algorithm/resource/#3-ucr-calculation-developer-must-read","text":"In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available ucr will be deducted. If the contract runs normally or revert, only the ucr needed for the execution of the commands will be deducted. Developer can set the proportion of the ucr consumption it undertakes during the execution, this proportion cna be changed later. If the developer's ucr is not enough, it will consume the caller's ucr. Currently, the total ucr available when trigger a contract is composed of caller fee limit and developer's share Note If the developer is not sure about whether the contract is normal, do not set caller's ucr consumption proportion to 0%, in case all developer's ucr will be deducted due to vicious execution 1 . We recommend to set caller's ucr consumption proportion to 10% ~ 100% 2 . Example 1 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 100% which means the caller will pay for the ucr consumption completely. A triggers C, the fee limit set is 30000000 (unit UNIT, 30 STB) So during this trigger the ucr A can use is from two parts: A's ucr by staking STB; The ucr converted from the amount of STB burning according to a fixed rate; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (30 - 10) STB = 20 STB available, so the ucr it can keep consuming is 20 STB / 100 UNIT = 200000 ucr. Finally, in this call, the ucr A can use is (100000 + 200000) = 300000 ucr. If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far less than the amount of ucr this trigger can use. If Assert-style error come out, it will consume the whole number of ucr set for fee limit. Example 2 A has an account with a balance of 90 STB(90000000 UNIT) and 10 STB staked for 100000 ucr. Smart contract C set the caller ucr consumption proportion to 40% which means the developer will pay for the rest 60% ucr consumption. Developer D stakes 50 STB to get 500000 ucr. A triggers C, the fee limit set is 200000000 (unit UNIT, 200 STB). So during this trigger the ucr A can use is from three parts: A's ucr by staking STB -- X; The ucr converted from the amount of STB burning according to a fixed rate -- Y; If fee limit is greater than the ucr obtained from staking STB, then it will burn STB to get ucr. The fixed rate is: 1 Ucr = 100 UNIT, fee limit still has (200 - 10) STB = 190 STB available, but A only has 90 STB left, so the ucr it can keep consuming is 90 STB / 100 UNIT = 900000 ucr; D's ucr by staking STB -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the ucr A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the ucr A can use is (X + Y) / 40% If contract executes successfully without any exception, the ucr needed for the execution will be deducted. Generally, it is far less than the amount of ucr this trigger can use. If Assert-style error comes out, it will consume the whole number of ucr set for fee limit. Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the ucr consumption. If Assert-style error comes out, it will consume all ucr from the developer itself. To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent.","title":"3. Ucr Calculation (Developer Must Read)"},{"location":"mechanism-algorithm/resource/#resource-delegation","text":"In STABILA network, an account can stake STB for Bandwidth or Ucr for other accounts. The primary account owns the staked STB and STABILA power, the recipient account owns the Bandwidth or Ucr. Like ordinary staking, resource delegation staking is also at least 3 days. Example(Using wallet-cli) cdBalance cded_balance cded_duration [ResourceCode:0 BANDWIDTH,1 UCR] [receiverAddress] cded_balance: the amount of STB to stake (unit UNIT) cded_duration: the staking period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Ucr receiverAddress: recipient account address","title":"Resource Delegation"},{"location":"mechanism-algorithm/resource/#other-fees","text":"Type Fee Create a executive 9999 STB Issue a token 1024 STB Create an account 1 STB Create an exchange 1024 STB The ucr consumption of each execution may fluctuate slightly due to the situation of all the nodes. \u21a9 \u21a9 STABILA may change this policy. \u21a9 \u21a9 \u21a9 The estimated ucr consumption limit for the next execution should be greater than the last one. \u21a9 4 STB = 10^5 ucr is a fixed number for burning STB to get ucr, STABILA may change it in the future. \u21a9","title":"Other Fees"},{"location":"mechanism-algorithm/shielded-TRC20-contract/","text":"Shielded SRC-20 Contract \u00b6 Introduction \u00b6 SRC-20 token contract allows users to issue and transfer tokens, but it can not guarantee the privacy since it leaks the token ownership. When transferring the token, the source address, destination address, and the token amount are public. The shielded SRC-20 contract aims to solve this problem and provides users better privacy of token ownership and transactions. The shielded SRC-20 contract has three core functions: mint , transfer and burn . mint is used to transform the public SRC-20 token to shielded token, which makes token ownership invisible. mint has only one transparent input and one shielded output. transfer is used for shielded token transactions, which can hide the source address, the destination address, and the transaction amount. transfer has at most two shielded input and two shielded output. burn is used to transform the shielded token to the public SRC-20 token. burn has only one shielded input, one transparent output and zero or one shielded output. The technical implementation is based on zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) proof system, which is secure and efficient. Usage Guide \u00b6 1. The sender needs to create an ordinary account by api. The account is used to trigger the shielded SRC-20 contract, so it should have some stb to pay the transaction fee. 2. The sender should create the shielded address, which is used to send and receive the shielded SRC-20 notes. 3. The sender calls the api to create shielded SRC-20 contract parameters for mint , transfer and burn . 4. The sender triggers the shielded SRC-20 contract by using the generated parameters and generates the shielded SRC-20 transaction. 5. The sender broadcasts the shielded SRC-20 transaction. 6. The receiver scans to get the received shielded notes. The document below describes how to use STABILA Shielded SRC-20 contract with http api. Create the account \u00b6 1. Call api: wallet/createaccount to generate the account Method: Post Parameters: { \"owner_address\" : \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" , \"account_address\" : \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" } Return: { \"visible\":false, \"txID\":\"c43651d448e82e00de3c31d7d34a826af4a6538bc3f5e9abcde11ef25f57d70e\", \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" }, \"type_url\":\"type.googleapis.com/protocol.AccountCreateContract\" }, \"type\":\"AccountCreateContract\" }], \"ref_block_bytes\":\"2bb0\", \"ref_block_hash\":\"e678f7b7e4da198d\", \"expiration\":1591780749000, \"timestamp\":1591780690724 }, \"raw_data_hex\":\"0a022bb02208e678f7b7e4da198d40c8dd9aeca92e5a6612640a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e74437265617465436f6e7472616374122e0a1541d1e7a6bc354106cb410e65ff8b181c600ff14292121541e552f6487585c2b58bc2c9bb4492bc1f17132cd070a49697eca92e\" } Create the shielded address \u00b6 1. Call api: wallet/getspendingkey to generate the spending key Method: Post Parameters: null Return: { \"value\": \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } 2. Call api: wallet/getexpandedspendingkey to generate the expanded spending key Method: Post Parameters: { \"value\" : \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } Return: { \"ask\": \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\", \"nsk\": \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\", \"ovk\": \"e73f5383fdeacbb282db951afba01e607916c8106b316c55544fac84b2efbdc4\" } 3. Call api: wallet/getakfromask to generate the ak from ask Method: Post Parameters: { \"value\" : \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\" } Return: { \"value\": \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" } 4. Call api: wallet/getnkfromnsk to generate the nk from nsk Method: Post Parameters: { \"value\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"value\": \"2d817ea2e005e174d9291d0bd0605e11cb79e3f5855780521bc300d0636a58df\" } 5. Call api: wallet/getincomingviewingkey to generate the incoming viewing key Method: Post Parameters: { \"ak\" : \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" , \"nk\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"ivk\": \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" } 6. Call api: wallet/getdiversifier to generate the diversifier Method: Post Parameters: null Return: {\"d\": \"dd6b441bd5dcb9c25ec41f\"} 7. Call api: wallet/getzenpaymentaddress to generate shielded payment address Method: Post Parameters: { \"ivk\" : \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" , \"d\" : \"dd6b441bd5dcb9c25ec41f\" } Return: { \"d\": { \"d\": \"dd6b441bd5dcb9c25ec41f\" }, \"pkD\": \"297198e7d4a024a3b5ef9b68ed15e7463fbf03e6aa590aa551d7bd0c1cfa828d\", \"payment_address\": \"zstabila1m445gx74mjuuyhkyru5hrx886jszfga4a7dk3mg4uarrl0cru649jz4928tm6rqul2pg645hqv5\" } 8. Call api: wallet/getnewshieldedaddress to generate all the related keys Method: Post Parameters: null Return: { \"sk\": \"0bfc211444fa877ba546ffb3a64e8b7aa58dd7bdd23a7b22166e9da923add0e6\", \"ask\": \"264c351e5a154555b1ec7822f9bfc0faa5ced9d75b17ed1552699a20b18f7c07\", \"nsk\": \"ebd5bf67f68de464c8a109b389ff4d07912ebe11e8b3d034cf505b35c8d5a907\", \"ovk\": \"a8fa18b039e2cd8aeb04c8cf299b2bbc43cb5ab4dd67eec8884e3563223e5908\", \"ak\": \"0648c0b20fa5eab112d466f75b174d1c142bf35318d2f50d63c6b3b343c8c397\", \"nk\": \"a45852bb5b9e933266d5fab6062baa456b149329f8081817ef868923f87b2f9d\", \"ivk\": \"9c3eacfe786e67c6f3b567cfcf129dcfdc21347ce6f192cc3ca1e994df570c05\", \"d\": \"987adf3b4d8da446327d17\", \"pkD\": \"09f3c4576c4f836b3472a6a5738606866607a6ffcd1c7299e31ec40455b1cd35\", \"payment_address\": \"zstabila1npad7w6d3kjyvvnazuyl83zhd38cx6e5w2n22uuxq6rxvpaxllx3cu5euv0vgpz4k8xn2rsga28\" } Create shielded SRC-20 contract parameters for mint \u00b6 1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"zstabila15js0jkuxczt8caq5hp59rnh6rgf34sek7vqn9u6ljelxv4nuzz2x9qe3ffm2wzz6ck53yxyhxs6\" , \"rcm\" : \"74baec30dfac8ed59968955ff245ae002009005194e5b824c35ab88c52e5170e\" } }, \"shielded_SRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: 1. the shielded SRC-20 contract should be deployed befor calling the api; 2. the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100; 3. the rcm is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded token contract. Before triggering the shielded SRC-20 contract, the user should trigger the approve method of SRC-20 contract, to authorize the shielded SRC-20 contract to transfer the token from SRC-20 contract to shielded SRC-20 contract. Note: when the shielded SRC-20 contract is deployed, it will bind the corresponding SRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ovk\" : \"cd361834b3adc06f130de24f7d0c18f92a093cc885d9ce492cc6c02071f7a4f0\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"zstabila13lvfnt4rau4ad9mmgztd3aftw49e3amz8gm2kvyzrsaw0ugz2grxwkvcfys5e2gkchj7cnnetjz\" , \"rcm\" : \"499e73f2f8aaf05fac41a35b8343bde27f6629cbe66d35da5364a99b94a55a06\" } }, \"shielded_SRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded SRC-20 contract. Create shielded contract parameters for transfer \u00b6 1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spends: [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1n2xqnggktc8tfhskevgfvnjjkd4tj6n98e28vdwjyu9p4dz5t55nwazay5y3qnv8cp0xs3fgzgv\" , \"rcm\" : \"6760c1f7681752bf9ec18316dfbc2d66ddaae690d77302bdc6d127ff3084af00\" }, \"alpha\" : \"9a22f748597f7dc83edb3b05b3a3def34f47c4cb13d216be7ce03d2ea9da7e0a\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1557d62777dfad1d910d526787f2ea857575dad337270a07dd99127a6b320a39a72\" , \"pos\" : 20 } , { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila135rhyme9sqgfdzszmvj0pzhvnthzdl59fqag362lsyrme3xrcjat9am35a390uk0yudskaqppf5\" , \"rcm\" : \"9ff13d57e9c5a92405da71d6187bb0c11d6260914788a54f38ad62e4a04ffa04\" }, \"alpha\" : \"6865f8058e33b3d3dccb8f0b5c39993760d305a711165724d90998fb68c64b00\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15542bfe0aed87e6bb53dce44c20046a43418f9c43bc9f5695e55aa7580729cd74e\" , \"pos\" : 21 } , ], shielded_receives: [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"zstabila16455ldgqwz3sfamz0nymymwcvg0v6qsvn8prqtnznu6dmuuud965ar6rqw3yas48dn9w7ejne59\" , \"rcm\" : \"75ba6b5949879ae11229f53728cd6f1eadbb999898e0927d7e9dc4045d806602\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"zstabila1fkcy3738mx4h448cpx76yz5fjsa8c4ra8r4ff8x6s5n4ak5303a5hrgcw66c5syf0y87wqwcrnh\" , \"rcm\" : \"43e419fb8abef141f7b9d5d5a30ac743edebf9eb80cd24a344efe3ca091b6008\" } } ] , \"shielded_SRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f31\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"5f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c\" , \"rk\" : \"4cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7\" , \"zkproof\" : \"b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd6\" , \"spend_authority_signature\" : \"8538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00\" } , { \"value_commitment\" : \"0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d3\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"29df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d\" , \"rk\" : \"2917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9b\" , \"zkproof\" : \"b98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b\" , \"spend_authority_signature\" : \"e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04\" }] , \"receive_description\" : [ { \"value_commitment\" : \"8e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6f\" , \"note_commitment\" : \"57ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed039277332\" , \"epk\" : \"fe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2\" , \"c_enc\" : \"7457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560ec\" , \"c_out\" : \"cbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a\" , \"zkproof\" : \"a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a\" } , { \"value_commitment\" : \"fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42\" , \"note_commitment\" : \"2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71\" , \"epk\" : \"c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca\" , \"c_enc\" : \"013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791a\" , \"c_out\" : \"e8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42\" , \"zkproof\" : \"96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee\" }] , \"binding_signature\" : \"5e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01\" , \"message_hash\" : \"ef27433c3b85438389429d27d4f2c7255c9e385d2401d74417fde0a072448942\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004005e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000025f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f314cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd629df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d32917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9bb98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b00000000000000000000000000000000000000000000000000000000000000028538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04000000000000000000000000000000000000000000000000000000000000000257ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed0392773328e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6ffe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee00000000000000000000000000000000000000000000000000000000000000027457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560eccbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a000000000000000000000000013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791ae8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42000000000000000000000000\" , \"parameter_type\" : \"transfer\" } The trigger_contract_input can be used as the input data to trigger the transfer function of the shielded SRC-20 contract. Note: 1. the notes in shielded_spends is obtained by scanshieldedsrc20notesbyivk api; 2. the root and path is obtained by triggering the getPath function of the shielded SRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spends: [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1nx3cnncmlcl72ppcrz23krpurxphz9g5yj85zvpgm94g46zs8pq8gd7qrcv8xezp9rryzlar4az\" , \"rcm\" : \"4636333870ccc91fb8bfe53ed559f8cf64505672a58d82875694dd38eb3d6404\" }, \"alpha\" : \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613213099b1bdbe886f3bca27080fe45467bb6a83e77e68348a8e863b0c676a30475761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fec35ec8008050551a48d62ca8b2085276d589a8d02ab9cad8b0d6b30b8622d279acf822005ced7f6caaea51d378f0084bea34d1f98f759186ea5a2e67756b6656258501e6cf76599d3a854584c3438a34bb4754f9a84bfe98ad55cfc4bc25d4ed185719284bf14140befea7d9ec174b9dae461f4832db5f7d2e96aa4c0c52a6a\" , \"pos\" : 31 } , { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1x54s8nrzf2g85grp729s4pxx7ta3s38lj0jw57qwnuqx0e2wy8sfdcyldyfs9hazhqrs6jjzxhw\" , \"rcm\" : \"74908b43975847d5df6c0b40c4d5b1dbe732cb720e6b5bd5a55e7cd10e2a3a05\" }, \"alpha\" : \"ff3bd6babd3e28da098c67c67f26f2e613a5d1cec966b2f25ca4a943218ee805\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613cccdc97df3913f95c42665c3db7e806af0f5e84d5b6caac5754f6100df1a0c18e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b49d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6cffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1550100000000000000000000000000000000000000000000000000000000000000\" , \"pos\" : 32 } , ], shielded_receives: [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"zstabila127acwjxf499f43t8mk42ch5jyru68fsw7jun9hfu7pv87we3dnfrwtml8np80gsegksnjfz87vd\" , \"rcm\" : \"4172682e3f0398abb7f204220279948b3dd930bc901b1c9223a5cac51b1a7703\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"zstabila1f6dfsq8mxj8pd2f2dvnle4x6ahfrqr4ll2ezp2ez90jmcjtksr2r6s8095ljf7a3mfpn2uklc9r\" , \"rcm\" : \"7b4d06b6e0b5ea0172063f7f7e495bb840ff279787bd49adffdcfde65d68700e\" } } ] , \"shielded_SRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\" , \"rk\" : \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\" , \"zkproof\" : \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" } , { \"value_commitment\" : \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\" , \"rk\" : \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\" , \"zkproof\" : \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }] , \"receive_description\" : [ { \"value_commitment\" : \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\" , \"note_commitment\" : \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\" , \"epk\" : \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\" , \"c_enc\" : \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\" , \"c_out\" : \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\" , \"zkproof\" : \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" } , { \"value_commitment\" : \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\" , \"note_commitment\" : \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\" , \"epk\" : \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\" , \"c_enc\" : \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\" , \"c_out\" : \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\" , \"zkproof\" : \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }] , \"binding_signature\" : \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\" , \"message_hash\" : \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\" , \"parameter_type\" : \"transfer\" } Because of lacking the ask , the api can not generate the spend_authority_signature and trigger_contract_input . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by itself or by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"alpha\": \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" } Note: alpha is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" } The returned value is the spend_authority_signature . If the transfer has two inputs, the users needs to generate the two corresponding spend_authority_signatures . Note: in order to guarantee the security, the user should be better to generate the spend_authority_signature by itself instead of calling the api. Then the user need to call the api to generate the triggering contract input: wallet/gettriggerinputforshieldedsrc20contract Method: Post Parameters: { \"shielded_SRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\", \"rk\": \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\", \"zkproof\": \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" }, { \"value_commitment\": \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\", \"rk\": \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\", \"zkproof\": \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }], \"receive_description\": [ { \"value_commitment\": \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\", \"note_commitment\": \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\", \"epk\": \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\", \"c_enc\": \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\", \"c_out\": \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\", \"zkproof\": \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" }, { \"value_commitment\": \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\", \"note_commitment\": \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\", \"epk\": \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\", \"c_enc\": \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\", \"c_out\": \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\", \"zkproof\": \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }], \"binding_signature\": \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\", \"message_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"parameter_type\": \"transfer\" }, \"spend_authority_signature\": [ { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" }, { \"value\": \"24409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a08\" } ] } Return: { \"value\": \"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb0400000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000002882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba87368b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e78574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc35379e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce18798699c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8bb536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa00000000000000000000000000000000000000000000000000000000000000029e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e30924409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a080000000000000000000000000000000000000000000000000000000000000002bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f7882000d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c88e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f855100000000000000000000000000000000000000000000000000000000000000024d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf000000000000000000000000b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99000000000000000000000000\" } The value can be used as the input data to trigger the transfer function of the shielded SRC-20 contract. Create shielded SRC-20 contract parameters for burn \u00b6 1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f04d283f9a26718676a29d5fc9af0199874c5c2f6fd103f2342b24c9820a604\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 21 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract. In this example, the value of scalingFactor is 100. , namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c3310951\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d7046\" , \"spend_authority_signature\" : \"1badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db000\" }] , \"receive_description\" : [ { \"value_commitment\" : \"2216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2a\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"a5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4\" , \"c_enc\" : \"7dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02\" , \"c_out\" : \"beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7\" , \"zkproof\" : \"b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b4\" }] , \"binding_signature\" : \"fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d09\" , \"message_hash\" : \"c650bdaeacf86486ed9f100f010a89ee810ec2fec7e69a7b4f86c4100aacf390\" , \"trigger_contract_input\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c33109512e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d70461badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db00000000000000000000000000000000000000000000000000000000000000007d0fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d090000000000000000000000411195752747f24146fd1fcd12c31600a81f7c5423c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811582216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2aa5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b400000000000000000000000000000000000000000000000000000000000000017dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7000000000000000000000000\" , \"parameter_type\" : \"burn\" } The trigger_contract_input can be used as the input data to trigger the burn function of the shielded SRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 21 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract. In this example, the value of scalingFactor is 100, namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }] , \"receive_description\" : [ { \"value_commitment\" : \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\" , \"c_enc\" : \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\" , \"c_out\" : \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\" , \"zkproof\" : \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }] , \"binding_signature\" : \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\" , \"message_hash\" : \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\" , \"trigger_contract_input\" : \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\" , \"parameter_type\" : \"burn\" } Because of lacking the ask , the api can not generate the spend_authority_signature . Here, the trigger_contract_input is some ciphertext used to generate the trigger shielded SRC-20 contract input for burn . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"alpha\": \"0dfea932d1dc513b2bdebb1fd1f8124c4a2c93bb393fbba2d7dba8e045585207\" } Return: { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } The returned value is the spend_authority_signature . Then the user need to call the api: wallet/gettriggerinputforshieldedsrc20contract Method: Post Parameters: { \"shielded_SRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\", \"anchor\": \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\", \"nullifier\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\", \"rk\": \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\", \"zkproof\": \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }], \"receive_description\": [ { \"value_commitment\": \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\", \"note_commitment\": \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\", \"epk\": \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\", \"c_enc\": \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\", \"c_out\": \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\", \"zkproof\": \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }], \"binding_signature\": \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\", \"message_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"trigger_contract_input\": \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\", \"parameter_type\": \"burn\" }, \"spend_authority_signature\": [ { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } ], \"amount\": \"2000\", \"transparent_to_address\": \"TV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32\", \"visible\": true } Return: { \"value\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126fc8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef8197662e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d00200000000000000000000000000000000000000000000000000000000000007d04cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00000000000000000000000041d2017434977a0125039bfdc111922e9eb77f055bc4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811580534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d000000000000000000000000000000000000000000000000000000000000000114c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e871e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d000000000000000000000000\" } The value can be used as the input data to trigger the burn function of the shielded SRC-20 contract. Trigger the shielded SRC-20 contract \u00b6 Call api: wallet/triggersmartcontract to trigger the shielded SRC-20 contract and geneate the shielded SRC-20 transaction Method: Post Parameters: { \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" , \"function_selector\" : \"mint(uint256,bytes32[9],bytes32[2],bytes32[21])\" , \"parameter\" : \"00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"call_value\" : 0 , \"call_token_value\" : 0 , \"token_id\" : 0 , \"fee_limit\" : 1000000000 } Return: { \"result\" : { \"result\" :true } , \"transaction\" : { \"visible\" :false, \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" } , \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" } , \"type\" : \"TriggerSmartContract\" }] , \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" :1593795795000, \"fee_limit\" :1000000000, \"timestamp\" :1593795737687 } , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } } Note: the above is an example for triggering the mint function. For transfer and burn , it's similar. Broadcast the shielded SRC-20 transaction \u00b6 Call api: wallet/broadcasttransaction to broadcast this transaction Method: Post Parameters: { \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" }, \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" }, \"type\" : \"TriggerSmartContract\" }], \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" : 1593795795000 , \"fee_limit\" : 1000000000 , \"timestamp\" : 1593795737687 }, \"signature\" : \"2c1593a78911b9183bd513fcaeeec1440a9a5bd2896adde30411872bfc2d551a1b8211455d3ff686e08d02d230ea4d50e8d4875a88bc13e368e2e4aab80dcb4901\" , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } Return: { \"result\" : true } Note: before broadcasting the transaction, the sender should sign the transaction by its private key to generate the signature and add it to the transaction. Scan shielded SRC-20 notes by ivk \u00b6 Call api: wallet/scanshieldedsrc20notesbyivk to scan the shielded SRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ivk\" : \"c1898b84ced7e5c8840632ad1203d56b4a8ebbaa8425dd8b5a5b3d43578e1006\" , \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nk\" : \"b5f558a783c968b624f7cfc9a4f2c909332c0c514a8a419e552337e82e073f66\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"zstabila1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"is_spent\" :true, \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0, \"position\" :9 }] } Scan shielded SRC-20 notes by ovk \u00b6 Call api: wallet/scanshieldedsrc20notesbyovk to scan the shileded SRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ovk\" : \"4364c875deeb663781a2f1530f9e4f87ea81cc3c757ca2a30fa4768940de2f98\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"zstabila1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0 } , { \"note\" : { \"payment_address\" : \"zstabila129rzep2kymh87rwpp6eqk65l7a395y4w2t4zdma7chca4f8thncedlhkynta8655v3swqwna6qc\" , \"value\" :20, \"rcm\" : \"05f8adce01aa4aa61058b77924d46554edbecb3138f7704d7dc98180c3d88c07\" } , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :0 } , { \"to_amount\" : \"4000\" , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :1, \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" }] } Check the shielded SRC-20 note status \u00b6 Call api: wallet/isshieldedsrc20contractNoteSpent to check the shielded SRC-20 note status whether it is spent Method: Post Parameters: { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1nzfh9270dvpn0gysedl9gx6wfmh2hve3rtf0m57vla04pfjm3ermmrh9yasa2xnuy2zycsvwawe\" , \"rcm\" : \"b269a741bde1de2df79ffccf96d6eb646aa996e6567c208d774e851aef3e1909\" }, \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nk\" : \"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" , \"position\" : 1 , \"shielded_SRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"is_spent\" : true }","title":"Shielded TRC20 Contract"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#shielded-src-20-contract","text":"","title":"Shielded SRC-20 Contract"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#introduction","text":"SRC-20 token contract allows users to issue and transfer tokens, but it can not guarantee the privacy since it leaks the token ownership. When transferring the token, the source address, destination address, and the token amount are public. The shielded SRC-20 contract aims to solve this problem and provides users better privacy of token ownership and transactions. The shielded SRC-20 contract has three core functions: mint , transfer and burn . mint is used to transform the public SRC-20 token to shielded token, which makes token ownership invisible. mint has only one transparent input and one shielded output. transfer is used for shielded token transactions, which can hide the source address, the destination address, and the transaction amount. transfer has at most two shielded input and two shielded output. burn is used to transform the shielded token to the public SRC-20 token. burn has only one shielded input, one transparent output and zero or one shielded output. The technical implementation is based on zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) proof system, which is secure and efficient.","title":"Introduction"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#usage-guide","text":"1. The sender needs to create an ordinary account by api. The account is used to trigger the shielded SRC-20 contract, so it should have some stb to pay the transaction fee. 2. The sender should create the shielded address, which is used to send and receive the shielded SRC-20 notes. 3. The sender calls the api to create shielded SRC-20 contract parameters for mint , transfer and burn . 4. The sender triggers the shielded SRC-20 contract by using the generated parameters and generates the shielded SRC-20 transaction. 5. The sender broadcasts the shielded SRC-20 transaction. 6. The receiver scans to get the received shielded notes. The document below describes how to use STABILA Shielded SRC-20 contract with http api.","title":"Usage Guide"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-the-account","text":"1. Call api: wallet/createaccount to generate the account Method: Post Parameters: { \"owner_address\" : \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" , \"account_address\" : \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" } Return: { \"visible\":false, \"txID\":\"c43651d448e82e00de3c31d7d34a826af4a6538bc3f5e9abcde11ef25f57d70e\", \"raw_data\":{ \"contract\":[ { \"parameter\":{ \"value\":{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" }, \"type_url\":\"type.googleapis.com/protocol.AccountCreateContract\" }, \"type\":\"AccountCreateContract\" }], \"ref_block_bytes\":\"2bb0\", \"ref_block_hash\":\"e678f7b7e4da198d\", \"expiration\":1591780749000, \"timestamp\":1591780690724 }, \"raw_data_hex\":\"0a022bb02208e678f7b7e4da198d40c8dd9aeca92e5a6612640a32747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e4163636f756e74437265617465436f6e7472616374122e0a1541d1e7a6bc354106cb410e65ff8b181c600ff14292121541e552f6487585c2b58bc2c9bb4492bc1f17132cd070a49697eca92e\" }","title":"Create the account"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-the-shielded-address","text":"1. Call api: wallet/getspendingkey to generate the spending key Method: Post Parameters: null Return: { \"value\": \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } 2. Call api: wallet/getexpandedspendingkey to generate the expanded spending key Method: Post Parameters: { \"value\" : \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\" } Return: { \"ask\": \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\", \"nsk\": \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\", \"ovk\": \"e73f5383fdeacbb282db951afba01e607916c8106b316c55544fac84b2efbdc4\" } 3. Call api: wallet/getakfromask to generate the ak from ask Method: Post Parameters: { \"value\" : \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\" } Return: { \"value\": \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" } 4. Call api: wallet/getnkfromnsk to generate the nk from nsk Method: Post Parameters: { \"value\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"value\": \"2d817ea2e005e174d9291d0bd0605e11cb79e3f5855780521bc300d0636a58df\" } 5. Call api: wallet/getincomingviewingkey to generate the incoming viewing key Method: Post Parameters: { \"ak\" : \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\" , \"nk\" : \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\" } Return: { \"ivk\": \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" } 6. Call api: wallet/getdiversifier to generate the diversifier Method: Post Parameters: null Return: {\"d\": \"dd6b441bd5dcb9c25ec41f\"} 7. Call api: wallet/getzenpaymentaddress to generate shielded payment address Method: Post Parameters: { \"ivk\" : \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\" , \"d\" : \"dd6b441bd5dcb9c25ec41f\" } Return: { \"d\": { \"d\": \"dd6b441bd5dcb9c25ec41f\" }, \"pkD\": \"297198e7d4a024a3b5ef9b68ed15e7463fbf03e6aa590aa551d7bd0c1cfa828d\", \"payment_address\": \"zstabila1m445gx74mjuuyhkyru5hrx886jszfga4a7dk3mg4uarrl0cru649jz4928tm6rqul2pg645hqv5\" } 8. Call api: wallet/getnewshieldedaddress to generate all the related keys Method: Post Parameters: null Return: { \"sk\": \"0bfc211444fa877ba546ffb3a64e8b7aa58dd7bdd23a7b22166e9da923add0e6\", \"ask\": \"264c351e5a154555b1ec7822f9bfc0faa5ced9d75b17ed1552699a20b18f7c07\", \"nsk\": \"ebd5bf67f68de464c8a109b389ff4d07912ebe11e8b3d034cf505b35c8d5a907\", \"ovk\": \"a8fa18b039e2cd8aeb04c8cf299b2bbc43cb5ab4dd67eec8884e3563223e5908\", \"ak\": \"0648c0b20fa5eab112d466f75b174d1c142bf35318d2f50d63c6b3b343c8c397\", \"nk\": \"a45852bb5b9e933266d5fab6062baa456b149329f8081817ef868923f87b2f9d\", \"ivk\": \"9c3eacfe786e67c6f3b567cfcf129dcfdc21347ce6f192cc3ca1e994df570c05\", \"d\": \"987adf3b4d8da446327d17\", \"pkD\": \"09f3c4576c4f836b3472a6a5738606866607a6ffcd1c7299e31ec40455b1cd35\", \"payment_address\": \"zstabila1npad7w6d3kjyvvnazuyl83zhd38cx6e5w2n22uuxq6rxvpaxllx3cu5euv0vgpz4k8xn2rsga28\" }","title":"Create the shielded address"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-shielded-src-20-contract-parameters-for-mint","text":"1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"zstabila15js0jkuxczt8caq5hp59rnh6rgf34sek7vqn9u6ljelxv4nuzz2x9qe3ffm2wzz6ck53yxyhxs6\" , \"rcm\" : \"74baec30dfac8ed59968955ff245ae002009005194e5b824c35ab88c52e5170e\" } }, \"shielded_SRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: 1. the shielded SRC-20 contract should be deployed befor calling the api; 2. the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100; 3. the rcm is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded token contract. Before triggering the shielded SRC-20 contract, the user should trigger the approve method of SRC-20 contract, to authorize the shielded SRC-20 contract to transfer the token from SRC-20 contract to shielded SRC-20 contract. Note: when the shielded SRC-20 contract is deployed, it will bind the corresponding SRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ovk\" : \"cd361834b3adc06f130de24f7d0c18f92a093cc885d9ce492cc6c02071f7a4f0\" , \"from_amount\" : \"5000\" , \"shielded_receives\" : { \"note\" : { \"value\" : 50 , \"payment_address\" : \"zstabila13lvfnt4rau4ad9mmgztd3aftw49e3amz8gm2kvyzrsaw0ugz2grxwkvcfys5e2gkchj7cnnetjz\" , \"rcm\" : \"499e73f2f8aaf05fac41a35b8343bde27f6629cbe66d35da5364a99b94a55a06\" } }, \"shielded_SRC20_contract_address\" : \"41f3392eaa7d38749176e0671dbc6912f8ef956943\" } Note: the from_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract, namely from_amount = value * scalingFactor . In this example, the value of scalingFactor is 100. Return: { \"receive_description\" : [ { \"value_commitment\" : \"7e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8\" , \"note_commitment\" : \"3e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed1808\" , \"epk\" : \"e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552\" , \"c_enc\" : \"635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e6\" , \"c_out\" : \"4d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94\" , \"zkproof\" : \"b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae\" }] , \"binding_signature\" : \"3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d\" , \"message_hash\" : \"3da3e050660849f7395d10a66fede6fef8a6aa8768957dd92b3993d856d98635\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000013883e950099a8c9b5ec04e9b68218872edac4c030b37bdb39fe806d7ce124ed18087e979cc6662a133dabf6cea0b64ef27670a4c30c2fb9dc0ac37444cb80a1f7a8e394dab255529e854dcb33fd9602b3be083ece00f98205155c6b26284effc552b2d9af13e41750291b3dedcedca2ce79f369f472e9022b8d88bf77d6a7c799bcc6c90e2dc37b246595f160c06ee78bc185c77e031233b27f0056bd7b9f44487f1008b6e3805734479ee9deae1093f18afcbe2e28fd62b13ebce897790be3567207f3e92b783e07ea7a5d6a3e2c96990c1b36abe0d36869ca826532927f3562d1c2347efe3fd3d77b8c34cfc4b7d2d364a90c4ec4d09d3ce56e75412effa885717e90347705277e65a3075e60c2ccad90c46d0e31e114231b8ca922143258caae3561b47bd2c2ffde7122db43611ae89af2ae8dc104bc563c6587d6df428b7aa86b52d67a19d8b43b5a668634df494acb4c2eb7d8aea1e074812dd6a5b9cf800d635b837f9f4908c75bb5f855758ac22ba890f841bc10350820bae483296e9f86d04b92306d2bb0962dc27130325dcf59226232768398bbadda2ac0f8cf2ea7cd96a2c84e69ccd31b373d1d71d87ffc1e8a5fb659a4700e817af75d00eebb6279e5e0681ee32a1baf1a760735f00e5f7641a915876520c7b3b00f257d11c06826b70137dd23a9401eff12af084743cbfbd8ddb203c7493967eee98ddaf32571c1449804bd474a4a9c3a605187537f9244b84a08aae2c49f4e5c514788a8de9292f94b1ce92f8bbb1f6f55eef6afe9116f626977aa15a9b3365edb92db2db3cfd7c350f16f7e3cc650c05e126a73da137a6e0a5982a22545c5c4a7aa4b9e35419db6f3746513d14784eb64a02c0b799ed165fbd6706b6a29d1a7a4148019bb0057a170c9f5d102048b6bd666e8973e6b6443bc220a5b89bcefc24b1d4576214ad5be3d9c75b0edc9e1e6706a967e24e4e64d22909b8fdb7bbcf1068cf2c935b3c6015f31b809ee8d61c9dfe3d79e86c7a705be4d1830534f62ecb719ce69121a9af0c7c34c39cdd5132f4c495e9bd2cc96435c5ee9a975b1a18856a0ec819ca10b3fdbbaf7fc98c063f42d0269433e8627939a9b22878531a6cdc2efcf654041a5a7d16e254f86b9e8b30f089c09e3f4834908338203690a028deee97d4983142b66e9f4e2c7790cc32c06ce43095431798967fa4412734aeaed2ca8d5aeafa6223911b0b07c0421f80fc7da5f2952b2a4354e62f43623598107a5480273d81c518ccd3accc1f435ee8aab875e7ccca59b7d6af9a9046dc75907ab99af0f08e063f771b4e64d073fcfc631e5efe83ad17f74aea9a66993c20ea8b5e9f9d8891fa840d92b18a0b54a5e1fa9af4d8e8ed6449c2c84741c3bc22083aa11576086deca3f9e69b7f17b24abc43cd2d73ae9ff6d9fafea94000000000000000000000000\" , \"parameter_type\" : \"mint\" } The trigger_contract_input can be used as the input data to trigger the mint function of the shielded SRC-20 contract.","title":"Create shielded SRC-20 contract parameters for mint"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-shielded-contract-parameters-for-transfer","text":"1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spends: [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1n2xqnggktc8tfhskevgfvnjjkd4tj6n98e28vdwjyu9p4dz5t55nwazay5y3qnv8cp0xs3fgzgv\" , \"rcm\" : \"6760c1f7681752bf9ec18316dfbc2d66ddaae690d77302bdc6d127ff3084af00\" }, \"alpha\" : \"9a22f748597f7dc83edb3b05b3a3def34f47c4cb13d216be7ce03d2ea9da7e0a\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1557d62777dfad1d910d526787f2ea857575dad337270a07dd99127a6b320a39a72\" , \"pos\" : 20 } , { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila135rhyme9sqgfdzszmvj0pzhvnthzdl59fqag362lsyrme3xrcjat9am35a390uk0yudskaqppf5\" , \"rcm\" : \"9ff13d57e9c5a92405da71d6187bb0c11d6260914788a54f38ad62e4a04ffa04\" }, \"alpha\" : \"6865f8058e33b3d3dccb8f0b5c39993760d305a711165724d90998fb68c64b00\" , \"root\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a5761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fd8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6ca0568ea9736f053947db35d23177d291ebc45d45ed0519d69e12dad90ec25100817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15542bfe0aed87e6bb53dce44c20046a43418f9c43bc9f5695e55aa7580729cd74e\" , \"pos\" : 21 } , ], shielded_receives: [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"zstabila16455ldgqwz3sfamz0nymymwcvg0v6qsvn8prqtnznu6dmuuud965ar6rqw3yas48dn9w7ejne59\" , \"rcm\" : \"75ba6b5949879ae11229f53728cd6f1eadbb999898e0927d7e9dc4045d806602\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"zstabila1fkcy3738mx4h448cpx76yz5fjsa8c4ra8r4ff8x6s5n4ak5303a5hrgcw66c5syf0y87wqwcrnh\" , \"rcm\" : \"43e419fb8abef141f7b9d5d5a30ac743edebf9eb80cd24a344efe3ca091b6008\" } } ] , \"shielded_SRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f31\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"5f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c\" , \"rk\" : \"4cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7\" , \"zkproof\" : \"b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd6\" , \"spend_authority_signature\" : \"8538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00\" } , { \"value_commitment\" : \"0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d3\" , \"anchor\" : \"4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a\" , \"nullifier\" : \"29df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d\" , \"rk\" : \"2917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9b\" , \"zkproof\" : \"b98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b\" , \"spend_authority_signature\" : \"e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04\" }] , \"receive_description\" : [ { \"value_commitment\" : \"8e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6f\" , \"note_commitment\" : \"57ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed039277332\" , \"epk\" : \"fe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2\" , \"c_enc\" : \"7457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560ec\" , \"c_out\" : \"cbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a\" , \"zkproof\" : \"a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a\" } , { \"value_commitment\" : \"fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42\" , \"note_commitment\" : \"2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71\" , \"epk\" : \"c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca\" , \"c_enc\" : \"013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791a\" , \"c_out\" : \"e8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42\" , \"zkproof\" : \"96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee\" }] , \"binding_signature\" : \"5e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01\" , \"message_hash\" : \"ef27433c3b85438389429d27d4f2c7255c9e385d2401d74417fde0a072448942\" , \"trigger_contract_input\" : \"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004005e71d8934832ea4a6aabf26a5db6d547dd322d83e8f66b2a1cce3993eaf18d68750eb4da2f456ccf2bf3773843e94fa2e1663f925e676b131eddbf46cabe0d01000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000025f5905b2424229d63775792bec06ea8b4897805992547901080e09a9b5146d3c4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a2a80edbcc55e7364c689dfb637a5f8a3ef89950061026de070b792a5a9f58f314cc74a640e0040f16144e326892950ee95ab8afccba344e7b6fbca3169cbe4d7b69c7b252b36bbb654a26bcf6879afd3d7d4a6fe1e36d48e8c6508f4fea6a864717bd0d2d31d4a728277ff0d8e1bcfcb873d02c7a14a70899888f7eaed769d33f94fb836194dcc5ac16078d235e5b95b34472a782ec29ebe8ad14a222812b41b03e0f8edcd42774ceb8f5cddf312a3815a98c2909126646774017d67fcd0e114365e156614838ef87c222b729fa827ae801ae0a1ac4a48bc5f80fc3df2798c7d3f963ece395b1ff9c12e10ec7059d5855a8b101b266449b6eb3e326d7bf2acd629df43aae9e177e6fe15b76a23f0972f3709dc38e6033e35974926b2dad6302d4d46e59b39d39430208317a101bc94ef1ee8276181cce24180612d500593315a0ee5abca3e433892f2b62ec352089017482f15b457fdc71ffdd9c731d42f92d32917aadf5107ac11e6ebbad2a0ac3502a168e0b8c0307827b1ad69029faacd9bb98b0e6f6004ffdbed4069f63772a494bdadbe0a7e3f88dc5688821424bbc0f27f906ce0492c9a8c2233aa691c1767cfb0c3bcf21aba659f9290ba5dc04455a4a913192276154052be66bb743a7c842a149d473638020562501d3a752152381e135439839d9b9a4c65f15b256117322c7d202b3af0c03473602399272560bb3b3e9be33a75103aadc858901eab4176a4a4450293fb77366b7a34563d1120b27e7f4a6c2daf762aa43654685d235629729209d6bb402196517ff7f51dfecb995b00000000000000000000000000000000000000000000000000000000000000028538e941dbe6ddb8b2c70a2b5b6fb7729a84eecbfa386451f21adca4ecfb975a46534fa8e9a1d28a573c05f2c2a210d2555ecf51de781bf149bb27c1a3bfeb00e11781f5601d3947b6e4c1b43000410449330695b7506a9691db7cbd18da686d492c22abf971187377f4a69ee9453b5bff30f7472e7ec267a0f9612c1dfaaa04000000000000000000000000000000000000000000000000000000000000000257ab4c569b2cd69358ecaf26c9487cecc99a1b7607c8bfc7d2a58ed0392773328e6eb8efb8e7d1a4069daba59f95043d599ac7d0a3fe8ea3a0f415f73e347f6ffe72066db13a8e6acc820fdad950efa8f900b8544b645b93160ddc7811aec7e2a2803d68ac307aa85ee726de8b25d933eb4158bdd479785ec1bffe9ac65de848669690d869819b549b384a00021d68ffaa0db8c35a226c32b3c5cfced3fda54be23caf7a2bde2422375f572f913532ea3cd3c1f78ff6e915d26569e33e8c729f0258fdf276e73865a74c9c5b9e1261c23486f9f5d07500f5f343314ecb7d757c28c77e511542329d19b2a4532b58111b84b421e548009a85907c2ff3c27174c6391cf4fefcf33d32e228106ca117b89d72bbbd64b7c3674c8de978d6c3a7f27a2cf0adee47f49552c47eeef546a040197f4a67250f8ada2c4152d08ff2acba71fff3d45d73a5d80c4a97c8910f0d48dc7f60c685bb1ec6673631e253553f2c42c12358c0825670e90f65424046e898b7b12ec9d2d26dc6728425204cf00528ca96633ab689349f9a0fad87c5e0d20b0924774fee0648637963ec5dc819a80f4c3468ebbbd34557304f68f67a0630805b8754817bd194d8885c229ccf005bf5724b8210997826aab2afbf741efd8c761fb6762ab52220f3a7a78d674d6eec612611b094cbae26e623bfb0b3aaf1aaf9f35eb66793899c3cbbdee03970072c59093734a4401ced14ecf8bb94d23deb5e71b7dee2fcbab2336769d406f07eb45fc346e3760466a9e30a27412b66fa3328e880091367f4e9804f93b7cda51befe2ee00000000000000000000000000000000000000000000000000000000000000027457fce75f5df5d979c15d8cebaf2c814fd884cc268187f8b52a3a0db5453d0608c2a8d00b095021fc0af1d039bfddc4fddf56e39ca5233b0ec0559099590cc4902b74c4a7508472c793b6ead0ee433d644a6e4f63d1a02dd402e1a74574163bd179d3045bdc3190dddb8e91f475f503d003cc0c26598a6494252540d53d7ef8793a3293f3f98a702cede14eb4f4f78cc958e83c4cb7579f3aefd6ee1ccd6269d61c9e8b3bf46101bf8b02fd4b6b3f3ea479d977da40ba532fa0100e3372e326315934bb21c16fa654969c1432ffdf710cc91c8eb4485c8885f49e2dceb0f14447f530a3a07bcf0a2914399458486766661c458f2beda0c75eac752ebc38f6e490f22640ef2231b2622fc647e5888f81d0c133ac1e76d99de89953d15708dc8a525563aad587a164e00f7d96d79bc02ad28478d8af930c0e08be219d8d0eda099571680801c3fb3f7195be590635279435a7052d70489653bd634566a930d17cef04d50c5c08fa3b4697ba1b6fd81c18431077f6acc6ca27cfe0e519cf3500c53d0f508b14ab1825dd2c3baf408eaa4df9725be2ac2c9b9b171c41597fed62a114ba8898f16e1d213f9668018725493398e9fa60fe58c650482d93bbef83b152956e4242bf7da10cf6b6a034e59e640c873e67c84980327025bbd239a19a02fea1439681af8ce81eb12efdc66bc2dc08b3143f9033fb7332a05523d1d38f765db7938faf9c2ac6089cef77e12622651683f0ea2815e9786977deb4bd2010d3c3be7f0484d1420387fd4fe56ced3b26d073f60940b52048fa939ba4f3e803d148121560eccbbdc18a1dbf3a572649437c765c86e521c43a2f0a74a503c489912396ef16d263e957bcfdb2aa0853b046fad0e66fcb7b3d01c766964fe223d4473a4a7fa99c934db7e1c1f3dedefe6804e91ab73f2a000000000000000000000000013ffaf4d17394aecbe9d117f673188a782467849207eaa22f702361af4977afc1a0379db1b2867df55136efe8279e851657de46bbf3c0436a143780805e48d5c5ed86122b9cc943775dcfa294bbc01b7edffe2da5253655192e2d42326cc89ee863a99ecc13a7355d0fc78fb78ea2d6311fcaf8715b2a3bfa52789f09c58a0afea45c6e6f38a1bbf4f044fea4f211370122363f10bb5d1d82fbc5c20ce394490266ac4825d3a04194367902ddc504959a189749a1e0019e627d34f3cb831d481ef7c31f6a7d9289f1b2df981cf2600f1576d3e853a96a94bba8373bcb2fb07918007022133dd659f6775e34e0f5e9860b1d82e27161ea55dcaf7ea8b13d2f0994d604cb053f83d9655aef4412a6ca597f164b8a8386979787b7408bbddaf2991a705448426c0210f3eb7ddcd99fcd4be97eae9313e15e972912e2fc971b999609ba4dec92b99e1b157ee550cd6bfe44f8e7f03a7198ed826212f7813df58f12dcd906551b78ff7bdb27cf028e81585df14a064ae59857cc3632a27db2f239477d8d2c9a821b9dca1fc7d743f8f86239d4fd966bb2263001e84499f103300a3c168d67006b1baf0e6c13800b9edd713f9336891330ac0479e832648bb6fe3082c26172632f4e35515d3b0e26a0a9a933e138ee056495ed5f7cf6f73a870ac749bb00d141aa09e36382519ec073dfbdb24f8e37ebb1f3a67ac918ce1b899b4b851f2ca06115e9dc723e150fe9df064518fde22bcc5b69d6d22f2369bdf3256f4040569e41b638c9ecfbc553e4cc0bdf640dde9b41b465edf3c127e7c8842afbad657d791ae8af71a1baa54332692b499bc18848aa8a25daccf21d7b8199eb74570c263a1e99922bb97cb239bf34821d76136141c1fe684b35d7cad4f13fa67397c11acfb2519fd4d2e49c0bf621c047872dfa0e42000000000000000000000000\" , \"parameter_type\" : \"transfer\" } The trigger_contract_input can be used as the input data to trigger the transfer function of the shielded SRC-20 contract. Note: 1. the notes in shielded_spends is obtained by scanshieldedsrc20notesbyivk api; 2. the root and path is obtained by triggering the getPath function of the shielded SRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nsk\" : \"cd43d722fd4b6b01f19449ea826c3e935609648520fcc2a95c0026f0fa9ee404\" , \"ovk\" : \"0ff58efd75e083fe4fd759c8701e1c8cb6961c4297a12b2c800bdb7b2bcab889\" , shielded_spends: [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1nx3cnncmlcl72ppcrz23krpurxphz9g5yj85zvpgm94g46zs8pq8gd7qrcv8xezp9rryzlar4az\" , \"rcm\" : \"4636333870ccc91fb8bfe53ed559f8cf64505672a58d82875694dd38eb3d6404\" }, \"alpha\" : \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613213099b1bdbe886f3bca27080fe45467bb6a83e77e68348a8e863b0c676a30475761cd9b3396e9cedf9afeecac3edbcd192c5f65a4b108cc595dd7f668df0a1fec35ec8008050551a48d62ca8b2085276d589a8d02ab9cad8b0d6b30b8622d279acf822005ced7f6caaea51d378f0084bea34d1f98f759186ea5a2e67756b6656258501e6cf76599d3a854584c3438a34bb4754f9a84bfe98ad55cfc4bc25d4ed185719284bf14140befea7d9ec174b9dae461f4832db5f7d2e96aa4c0c52a6a\" , \"pos\" : 31 } , { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1x54s8nrzf2g85grp729s4pxx7ta3s38lj0jw57qwnuqx0e2wy8sfdcyldyfs9hazhqrs6jjzxhw\" , \"rcm\" : \"74908b43975847d5df6c0b40c4d5b1dbe732cb720e6b5bd5a55e7cd10e2a3a05\" }, \"alpha\" : \"ff3bd6babd3e28da098c67c67f26f2e613a5d1cec966b2f25ca4a943218ee805\" , \"root\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613cccdc97df3913f95c42665c3db7e806af0f5e84d5b6caac5754f6100df1a0c18e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b49d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6cffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca1550100000000000000000000000000000000000000000000000000000000000000\" , \"pos\" : 32 } , ], shielded_receives: [ { \"note\" : { \"value\" : 30 , \"payment_address\" : \"zstabila127acwjxf499f43t8mk42ch5jyru68fsw7jun9hfu7pv87we3dnfrwtml8np80gsegksnjfz87vd\" , \"rcm\" : \"4172682e3f0398abb7f204220279948b3dd930bc901b1c9223a5cac51b1a7703\" } }, { \"note\" : { \"value\" : 70 , \"payment_address\" : \"zstabila1f6dfsq8mxj8pd2f2dvnle4x6ahfrqr4ll2ezp2ez90jmcjtksr2r6s8095ljf7a3mfpn2uklc9r\" , \"rcm\" : \"7b4d06b6e0b5ea0172063f7f7e495bb840ff279787bd49adffdcfde65d68700e\" } } ] , \"shielded_SRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"spend_description\" : [ { \"value_commitment\" : \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\" , \"rk\" : \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\" , \"zkproof\" : \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" } , { \"value_commitment\" : \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\" , \"anchor\" : \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\" , \"nullifier\" : \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\" , \"rk\" : \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\" , \"zkproof\" : \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }] , \"receive_description\" : [ { \"value_commitment\" : \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\" , \"note_commitment\" : \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\" , \"epk\" : \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\" , \"c_enc\" : \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\" , \"c_out\" : \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\" , \"zkproof\" : \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" } , { \"value_commitment\" : \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\" , \"note_commitment\" : \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\" , \"epk\" : \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\" , \"c_enc\" : \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\" , \"c_out\" : \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\" , \"zkproof\" : \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }] , \"binding_signature\" : \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\" , \"message_hash\" : \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\" , \"parameter_type\" : \"transfer\" } Because of lacking the ask , the api can not generate the spend_authority_signature and trigger_contract_input . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by itself or by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"alpha\": \"d0f0768664f5c807f9e70d05993f029c71da529afaa5c037b44c63d6e13bc907\" } Note: alpha is a random field element with the length of 32 bytes, which should be generated by GetRcm api. Return: { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" } The returned value is the spend_authority_signature . If the transfer has two inputs, the users needs to generate the two corresponding spend_authority_signatures . Note: in order to guarantee the security, the user should be better to generate the spend_authority_signature by itself instead of calling the api. Then the user need to call the api to generate the triggering contract input: wallet/gettriggerinputforshieldedsrc20contract Method: Post Parameters: { \"shielded_SRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"68b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e7\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825\", \"rk\": \"8574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2\", \"zkproof\": \"a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc353\" }, { \"value_commitment\": \"219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce187986\", \"anchor\": \"c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873\", \"nullifier\": \"79e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1\", \"rk\": \"99c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8b\", \"zkproof\": \"b536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa\" }], \"receive_description\": [ { \"value_commitment\": \"00d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0\", \"note_commitment\": \"bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f78820\", \"epk\": \"e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c8\", \"c_enc\": \"4d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4\", \"c_out\": \"f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf\", \"zkproof\": \"8e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4\" }, { \"value_commitment\": \"19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656\", \"note_commitment\": \"e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d\", \"epk\": \"b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905\", \"c_enc\": \"b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c\", \"c_out\": \"1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99\", \"zkproof\": \"a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f8551\" }], \"binding_signature\": \"c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb04\", \"message_hash\": \"7fb99e66df052f430d50e80a3f197c319a4e35184ed48a433d6219e025741337\", \"parameter_type\": \"transfer\" }, \"spend_authority_signature\": [ { \"value\": \"9e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e309\" }, { \"value\": \"24409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a08\" } ] } Return: { \"value\": \"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400c7f303709c57e49264fd5ae5922bf977ef2a57ccc84d746effc5c6937eecf36e05b09faf95e5f869aeaf1aa87b24570eb723a4d8c77edea32c31b2909c84eb0400000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000002882842cb630c1a0c77b1af4e0c23c2584b83875d928673d1d57d7322ea3ad825c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba87368b6f57d972dfeef1784017d0a669b45a367091671c098ea99fc9654d7bdc0e78574c873fbf582b4c491f901127c7922f6819fb20a38bac5f3d44bef01bdc5d2a0bfa6e0c26cbd0d23dadaa1125df75cd6f0987e5e876e704193417cf9870a9f1f34be6a91a06694ca6709a0ad6e7976b8893a9df057b43fac950c5fb7331a14303e3841c542e5455b3dd794ac7f97347928427d4b02405a9ae3d55ae560b7fe0aa20b51dbbc720479a50c38f4dae5ce2d2c1a1c68d32fae0c6ac23bae1069d5789c2c519614f85d75196286930b55148812d6c23936ddd40e1b771452664d2d067deb4f58600a7079025ffeb9bf409a38500e93c72ae1d09130f85e2dffc35379e938e0951d4d6cf6acd679fc6bb59147a6abc2f9e2828185328e93a83ab2f1c1dda86b7af8ce842e349347b364936baf24ad36be65046e2fd7349640bba873219ed48bc4bfe14cc2953ab5027528353e177e2263479122ea97c609ce18798699c0c1fbe3ad8a6e27d712632064fdeeb10952624c60a0ddcba0eb233bbf4e8bb536d0f442f6e0517930a9ccdb551c9e551a148c41fcf1e4748d1330d6c3e6f952012a5c3c6b06cfb51a92da5ebec4bcb11ed37cf36b60c9997baa026733ab6711894b5d17ca1f96667d68ed97f4cf75e5a9d96484d9f2453f869400e14dc54f0bf54f9abec8baf45baec320a06cc09780f4c5a2058f870993ff8a31f6d19b03f772a7d4d29ae837c7c2c3d6b300c4d485390d2e7bf09f971ed82e3676daf6fb655b2e47e040de762fe26317815e30b1f9638af979803e37abc3a95742c6faaa00000000000000000000000000000000000000000000000000000000000000029e889cea041002ed7a9a80d093f2e9b5bdec24da1dda11cc7c5d1bfb6c7046b3c4ed0a2cb6cbbead42336d1235d1ec671a832c2ada9ee1ad3048129b7c99e30924409c69b9d03a7c714f7c8bac39a3310054eef9e99dcbf256c8e39ef267e31884f2f2465ca7cd7aaba006e7f0a8635787de61eef1b96ce559764d300f637a080000000000000000000000000000000000000000000000000000000000000002bcf2634c9ab870604831ae151b7959fe72c588488271640cf7772ee040f7882000d705dd92237759b4b339d1c9b4da7d2a8baa132daf6feb3091ef746afff0b0e6129572f05703a81cd55a7bc3e86d6b2c76f8f4bd60b02162d0b76d8dce21c88e4072af7180ab0cb95350026623a1e89850039ab8de7342a9661d41a7103f645292521cec3c199a5e3c3a4dedee33d5b37c4bd18d9f2c3ec1b28297e80ad640b77140685dd36243b89f1d6a23d115f6f52804685cd445a64661c8c2d0c11aaf11a8cf790c47ff796d27231597a981cff8fa58a33d0a1d163754ebd7814765f779920867295fee03d5882e7da940c60eb9688c22640a079bad4f33fe5a02d459e60844bb77d67c0c74e9c6f8b0be2023953cee099ce175e4fb64ef5de947a5e4e40b9da38887963c8cd1e163b4b7d4b999502c32e1204b791242633aebcdbb6d19ac352ba8d7f5167ef43a5b9c225056db2c44fb19f7fe8c63e0d2b956771656b1675f0b5331371466ff30d621991f0a30c9bc4d34c322be44619a0acf932905a6b41694f8fa378886ef77d5bd07de56de55b9ad7c8438d05380dd5fa1ce2e7d0ae0528f82c23a6d92e6150e426ef3958556757ee973c5e79ae7ce074b1b25c74ccdde0b2b2dfd1b42215401f700c06b84785572eb4e585971cc4b451420bfbc17db489dbc996e9c5533b7da9e4a88d53388b411dd4a4e8801707aa01508054faa91a2c422a4cbad61ababfc3b1893c38e2ec19d19a1e5b47d2257ca9e347283afd5e53a2f8989d8db6a76b7942a737601ed3082e2e56290a9cd694a399f855100000000000000000000000000000000000000000000000000000000000000024d80bb52b7a1518bef81bbdb7584cefbd3cef9f9bc98fa75194f2b08d0b6c18253ca2e9ddea6330d96562db0bf9cebb6a8d1198599d420eba2ed5868956719ea835d1d5e58433fbbb7b72ae51f99f90440c67c03dc89101416a331b436f8ac560ddb772b9a7a8c16a0300cff97364d59046192b744592bc5f45c584385b24bfd4bdf159230893983516d82ee2a20d3da62f3ff979baf2ba010a6e7766ae30b7c56e4c78a746630d579833e56a07653716737fbaf19346d527f38938b75e0208355289185343364b0867f48ddca45e121b64bae64b32f002037c94050e07f96e86a4765ddf589b5e360b24ccf23b398275c575759cd3e1dd784c654dd8948efefafb1f9ae1c4d41efe803588bccb1b4bfbab6bf1a526f935e7123190ae8031f5c37ecf2820b812250ebe7b79f085abd2af5c2d59caf79355a6143b70f2ea0a66ae99e7392e2f64b9a2d7d3f79f278cbaeb897de832db2e2ea23cfe7906b0c61d5c99a75e076fdb000b57a78989edfa9730c6f485dc44c6d52fca1c884428514abf1cc4cde54c2d456b44c563b815969c7c8d4eb28cce53715d20bfe92fabcbcc30bd5ed8dac1f2b6acc98621311b21d3d7c979498f97ef318dbb335d87b5d0db43ee15323e90df8a59d6675495ed928d62db31e41cc4426e110f9994c21d2fb549bc94eb6d55ed4877b9f56ad624d80f81254dc3f90e14769f4e0bbada33dbfa7d33fd8675f7d9c30cd4f40fad2ef1e24c083889de3a71629f24601ead906a93b5a9dd2296d0577f8db42b8395134212f26fc84902693098c214704db5608c7509c8b23b4f3755f2d22d0881b0021adf5621708025e296c8591e0e076dba416a1437a9fc0a3312c09a35a8912a8c2115165bb67fe0565064140960ab44d836d307a93013ae28e390483fe5d59baca900c7bc606cf000000000000000000000000b69f20ae969de55319d2b7617bf7351a4683098af1e7b16fa64d44ff758471f33b0fb4f8896b2c32c68c410672fa81356e535f8d04338bdb69d69655eeee11e10727f319e1df6702ba7c90b2c5e4f38f809eddd2084fd30fd5684d9c004c679f4e574e17334d731550a76a842960bcdd811c67362bed7cdf698284a549e240da1727814af5137a7a384b5f24bd61a4b9cc1c4f6abe84524184a3ee257e002f7a9f6ccd3f6f0d490c5f77e3c26896f7bce84bf224429a45e156a4c62de64f739f9555147ed3fb7704206e7e45faf0f385229c7ed4e57253f8b5c4e518a26b90c069708c356e490abe97c1f78d361e7166fed9c67bad5aa820cadbefea2095b2a1adddb13b0249dae1c5c48ff0aad8eec23493786dead33d68e107bc13c3448129a58556ef5a21873ee151035117871652b1e151308d358f0df9c1c3188af4f15431b6fd262f4e0cbe5401c20b4633617fcf92a54d94991bd98e21f9cdcbcb6899341a9924d6eb11168daa6b19c2424993d4308bf40158564000aa79d106d09ebac3ad0a0e1729d20cff6226f3e632d9fd1c4f541b2f2ebaf5110ea5170498ce690e9115bca423ba2f5498b365db9dab936d1896ad5bc5b0d8c86b37f36debd5aca0e1194c48d51cff2253e32f069e8b969d7ba3c9391715c6b3118e2e31621321302b93edfdba0639542f3144eb6d90cdd86d354959df6398cf5fa497cf0fcbb19395d9bc1243da98afbc9087ec2997df1e84e97b4e18b1691e2d942a67214202e3d3880ce4eace0903cdd07f53b6f1ea23e277d867e73fbb10560a7d1df10402bd50d42c1e5333e35985d343697dcce92703c2536a861eb49722e1c83a112cf004006e9cdb63f96132393c7616e5f947d9d07cd6a22a664643c117f52791724efde660605f134aa86d3374b4804f9bb9ce64fc99000000000000000000000000\" } The value can be used as the input data to trigger the transfer function of the shielded SRC-20 contract.","title":"Create shielded contract parameters for transfer"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#create-shielded-src-20-contract-parameters-for-burn","text":"1. Call api: wallet/createshieldedcontractparameters to build the parameters Method: Post Parameters: { \"ask\" : \"0f04d283f9a26718676a29d5fc9af0199874c5c2f6fd103f2342b24c9820a604\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 21 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract. In this example, the value of scalingFactor is 100. , namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c3310951\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d7046\" , \"spend_authority_signature\" : \"1badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db000\" }] , \"receive_description\" : [ { \"value_commitment\" : \"2216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2a\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"a5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4\" , \"c_enc\" : \"7dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02\" , \"c_out\" : \"beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7\" , \"zkproof\" : \"b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b4\" }] , \"binding_signature\" : \"fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d09\" , \"message_hash\" : \"c650bdaeacf86486ed9f100f010a89ee810ec2fec7e69a7b4f86c4100aacf390\" , \"trigger_contract_input\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f83ceceff3cc1ac470308b63798eaa9125d1076cb9f844cfaa8485021c33109512e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368897a1542eb85e396d5426b45db0d3b6874c1d404b01ce956b8bad1b4c4b321fa5104a6c156b6ddad4e0da70c9561984ad60534f3d4c3c65559cacff27f6b97da5e8d61a050340cc8e504f3bbfba3f7ef56f2732e9e0d96cacf49856c01858dd0337fcf26fedbc5a74abc2548551e0c1d2ee578823cf4ccf1e17df3be6e07883f84ecf86427de5f4d67f2d70f123227f9336f26dca69ea96c8c2fef6ecde8f08f0280444841d146b750e55035d46c4cc6fc60d8a0871b73822a6918e870d70461badc235792c4a56e476bb884b9d1f1aeff7cd9f0dc2cd67e24a601c4b633064c92f964546aa0d82ae89a952a796cead3d9222a5895263651f58f311492db00000000000000000000000000000000000000000000000000000000000000007d0fef9afbf88ca52c424421d5dfc212c16e187a5012351f3bba48c30b2878f2bc827bdcef18eb9fd5174f288d01300af7359f4be1fa1723e0a17bbbcb48ad42d090000000000000000000000411195752747f24146fd1fcd12c31600a81f7c5423c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811582216fe18613655c6f31c72981261fc9caa1b283e4a5b45d022aec131c14def2aa5b6ceb3232b6141fee1bfe8c989beb6100449b279f3be8271f829a343f256d4b26462d9cc1f010e5a5e581d2a8ff19a34262cf37c5724939c3f5c9ca9390a4aa4a55f92f1f922664b7648b7a0d5cf71821eca2cc57f3036d81caf7be0980329c76c3d5ceeea2d05809aaaa028f1856b2fe850772fdbd43b8b7405e3360e602201f26fcae68b9edd0ad17a337bdcb6caa8dea31059ebf7baac4a4b4bd0aab654f853307db82c9e42096fee17ec1235c1ac49e047ca3a4b801ce78d1e3c72fbc207ce827de9537b0faabe48d3f998d2acaa7acf48859af09cdfc3e433522bc1b400000000000000000000000000000000000000000000000000000000000000017dc1b0c503e4f76c7063259d336fd06cbd1939439f24cca9560d8d0a7033423aebd6e6d6ec2dc6959e4b5ba8797562b7769d83f847200723cc934bd6f17544470ff043ba5e8bfb698320545663138fa710d381c2dd908716efb8a870ea787c0a74a1809315501186f424ec8cacaf04b6bf85489ebf0285149d7f0a4f100f15765da2df45576a7d2e9692e273178d5d7817bd49b367a66aa8b383fc597ac3090716ae3cdc42e6ef11dead9865fa92f317e1409bbacf58bfae30753d9b7adb37b04da6941fc6bca6650241ca2d550ab56e8a22ac974fc7d040c4266b33bda721b6a58e27260cedbb7a150cfec19f986081dfa7ff1b6fc218659c36b688ca63e98870f9beb1a51db115a1969b6167d0b0674f6dd614f12a7c64036b0601a7a605d1398b07abe089ee5a35947b3c36309c2ec7851e876f377d4d2eb4004f580ed86e85645fe3dbc97ff9754a36ef3e386621cf6d98257966f8eff7dd0495442a742dcfb533140f486ef52761056f070f3dc3f42cfae0cd9ac8155eb6c5c559406830a29a79f27784342cb48478d76fd3ff59d0ebdb33955c925b2b91bf94c20d8e414b32dd661020228ba37483e7690517ae02104624ab88d0d3e3030d0a5433228fac9f1ee7f3145f0b51fea5595a1cc515fedcabc5836055bb67367eda2243ac1419863d703502a2b6346d33f3e81a7c977dffdeb1d4474be7ea776cbb5ce90dd2b1a2a5f24cc6179f3f84593d39ab56cbb672e233f6b1dd516dcaf84da1667c73d3ca48db67248617ebf6fc89e392bf6520be7d0050b77ef3930f960a4b31f0f60a9a8a02beddff9adec9c46a05e12caf6fc675b06ff401c63d17ba251278f0dceba750cafaca2f0fed8c288d31722575f293936901eb084ba4ffd994e207c23fa9813814355a06932d8ce831eafd79008419b9e7000000000000000000000000\" , \"parameter_type\" : \"burn\" } The trigger_contract_input can be used as the input data to trigger the burn function of the shielded SRC-20 contract. 2. Call api: wallet/createshieldedcontractparameterswithoutask to build the parameters Method: Post Parameters: { \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nsk\" : \"572d8147283d90a938bd2867926fef485290c5fce37fad72eb733f9cd8a07e09\" , \"ovk\" : \"1797de3b7f33cafffe3fe18c6b43ec6760add2ad81b10978d1fca5290497ede9\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 60 , \"payment_address\" : \"zstabila1mpwx0380fvw7gacf5hm4vl625ltmdezt0dwp3ssyd84y8jxzp3guqz9utzn35u7038jx6a6ucly\" , \"rcm\" : \"b67b18fee3133440bfc4509912b96482fdcacbc0b5679af1785247c94224200c\" }, \"alpha\" : \"b6de1a3a40764bd7a24147f155011624805bfcd6d21283c69a3f21aea9401201\" , \"root\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"path\" : \"b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c5381412935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62de1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef7228e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2aa5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6ad2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb5816d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4afee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd7124c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee08500769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c4908eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf30238d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e8415276736aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b159216cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf006edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c1ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be2451d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642fbd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c1b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab651ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de985794730484777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23cba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce7243ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b7b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b680444d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa528138ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce7389613912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a93a022931b1f10886401d5fc249cbc9d0158945f4ecc0509041abc868077545d091e115b68c44341eec6fd6862140898e7399401f2ec319e3daefd931dcf1a3fffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e34adfa6682c546a5f87ac883fa09f6954b50fb7330f8e6b080a9a417548ab062674fc4565e1c6027648d10d91b1708cb4456f2e09220ab8f155c41ef790ea9b562\" , \"pos\" : 21 } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1nupklnacqyjc7ge998f6v2wutm7urdcdupl6j4ypq7qwws5yqfqrlxwvnylucwre8yewx5s0keu\" , \"rcm\" : \"f2aa138d0d04b685b236d797458d0cf53749b96bbb6d5f1e6c5f2db31b0b2d09\" } } ], \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" , \"to_amount\" : \"2000\" , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"visible\" : true } Note: the to_amount is the real value, the value in note is the scaled value by scalingFactor set in the shielded SRC-20 contract. In this example, the value of scalingFactor is 100, namely 60 * 100 = 40 * 100 + 2000. Return: { \"spend_description\" : [ { \"value_commitment\" : \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\" , \"anchor\" : \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\" , \"nullifier\" : \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\" , \"rk\" : \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\" , \"zkproof\" : \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }] , \"receive_description\" : [ { \"value_commitment\" : \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\" , \"note_commitment\" : \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\" , \"epk\" : \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\" , \"c_enc\" : \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\" , \"c_out\" : \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\" , \"zkproof\" : \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }] , \"binding_signature\" : \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\" , \"message_hash\" : \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\" , \"trigger_contract_input\" : \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\" , \"parameter_type\" : \"burn\" } Because of lacking the ask , the api can not generate the spend_authority_signature . Here, the trigger_contract_input is some ciphertext used to generate the trigger shielded SRC-20 contract input for burn . To generate the trigger_contract_input , the user first needs to generate the spend spend_authority_signature by calling the api: wallet/createspendauthsig Method: Post Parameters: { \"ask\": \"0f63eabdfe2bbfe08012f6bb2db024e6809c16e8ed055aa41a6095424f192005\", \"tx_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"alpha\": \"0dfea932d1dc513b2bdebb1fd1f8124c4a2c93bb393fbba2d7dba8e045585207\" } Return: { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } The returned value is the spend_authority_signature . Then the user need to call the api: wallet/gettriggerinputforshieldedsrc20contract Method: Post Parameters: { \"shielded_SRC20_Parameters\": { \"spend_description\": [ { \"value_commitment\": \"c8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef819766\", \"anchor\": \"b0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126f\", \"nullifier\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650b\", \"rk\": \"2e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f2436\", \"zkproof\": \"8f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d\" }], \"receive_description\": [ { \"value_commitment\": \"0534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e\", \"note_commitment\": \"75d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d981158\", \"epk\": \"96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210\", \"c_enc\": \"14c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e87\", \"c_out\": \"1e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d\", \"zkproof\": \"b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d\" }], \"binding_signature\": \"4cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00\", \"message_hash\": \"f9f665aa712ee948c5a0fb5b3994d1ef0110060cd02725cf69d904112fa3f106\", \"trigger_contract_input\": \"c4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef3\", \"parameter_type\": \"burn\" }, \"spend_authority_signature\": [ { \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\" } ], \"amount\": \"2000\", \"transparent_to_address\": \"TV7ceN4tHDNPB47DMStcUFC3Y8QQ7KzN32\", \"visible\": true } Return: { \"value\": \"dbd34894ce33fee5836283233df7121c6d85443e047fd1c009c4cecbad1d650bb0b6f5be533b99be38bc9a3c2f3c75a9be263c42500a9e13ffb00df15cda126fc8565a546d8922f7b5fdba99504961ccf827fc3ffa23905e50ac2f4eef8197662e722d314646bcec8d4c546224bb9fa7396e0fc49a4c0e41a4c181ad7b0f24368f5c35655e812a02ee308c75c8d4fbda3c756319327e656d971b5b0e1507918beda848f44fdf10ca7bd9ff911608d2c8a8fb5378ff1c18e604302fe808c6ba3368d0cfeb0e0d976a81a419f9c7f33045a134d476e23de9e9c56e233beee76573016814d2424afebcd7a061054613e4db8c9d85d5258c5abb1c38576daa704018d5d15daa21c13bb6c8c400452d0c163d8eece84dea1d28fa1dcce6a91191d66b9a43d7c76f3535a9ff43f84e5243313e8381d75bf3bb02ef2196eb7b9f76351d1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d00200000000000000000000000000000000000000000000000000000000000007d04cd9c8855bb27548e83c5aed968dd91f9e2d1aab1b5b4e9343774970c460f518f834f894760f03368da8d8e781c51e785e1a1a82c3f3efcf67e7b650b1585b00000000000000000000000041d2017434977a0125039bfdc111922e9eb77f055bc4c231ecb68f670bcd7892da38b297edefd91960bea3326c9b825abe726bea0dbac4c2d3c24a7dbfb82aec128876481f9740751dcd581d713ed33dfd9a1017b87d7b0af8be5361c23cd1e9575ed32ef30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000175d9624ffdf9c1bcfe88104710403d8916183a8aa97635ac5573fd4d8d9811580534ca13075b567ea6c2ebb487fb54b97ee0148e451ede224d1833f4b5394b8e96fd1aa79db655677d6a31c277e08ddb87527fa7b1848ed817ccc55a741c9210b08bbd60ea3784da8aec576e2e2edc068d8b4d21899ee3413ad4f7cbb9fd703bfa7f188a9c4424a5254445b97564ed0a8ca4c62a1176006f1b9852f4b7f0381f50a1e5d06820ffb4c8c2aeddd38435138e5ebb1f8324b6634d75582ae9823829062975d2d5a940e1de72cd6b5cb123737011e9c25f6df866d4ee5fcceacc60d347886af6241d4a8d074826a8698cc04096ee4fef38ec061a07a6a04c4e2c4bed4124e78bf1a030b233a01eca189827d59329cd18ea5e6481e76b2261a3cf678d000000000000000000000000000000000000000000000000000000000000000114c3a0d8d62ded3ff49ec3f940b5b0458af28227e4419a63ee2b377146e1bd2d3e963eabcd22cd3cf76d54baa53de0099f785eed4d8ac994153371a04cbf9028ce9e4b1a0f2a0a56281a360508d8428b270960a720c0ff3659acd9445f0e8f6975ece1ce93b67daee879c17006a31bbea3c78ae494a54d7ef9ef3462d143f725cdc76b486ce92f32c25a93859e7c298287440338e984d7bb7191feb87af7cc9eb0e9d670222d7d309360463c1c0b863225d631bb1997fee37fcad3d8c18acea6377087df8b45256310c634120d4e974aecf1f24a0083a6671277ec452329652bd5a3b2cd5c2b7e03f4e70703624e9be1a30c543028a592da533dfa18305098d370207d473859051afa14062d8fc062eb946f0326c16aa8680efaa0e29a55547957a967122ac6ea8f3139c1d8392e5914c98fdf115f8f959c0cd11f466e9d8c9168ca592ed4f7cb7e900a8bf94cec047e86b1c6c606eeb9db7655498b0590680aacf91e1958d5c05d5f3cda5ae87d8ae92f285a4ae258c2c216857a4118052dad44673b3f60e2866f9c73d5696c3ddf4967aa1df3438b6a1a5e937f2af23e698c02021fdb1e1e80258313687a49100bb2965627c2369ef559c2b987bdfce8057c66091c0cf39d14eca98989856687248885b4006770f9121530da170963f16c4145d1777d060f7a406b09b23e139c576719d2f99f296f61ac8b9ee65dff7dfa307e2c4835aba2a4c5659aa2878d37f4250d01d4ea69be5911a417e5716e72c1a3bd505f64041ee28003508edb2a55c7e9475281fde204d31e541059e16fe4311a27075e871e2057789a029d029792c60db3bb91218ce613d73e4fc486dbe90398e1475861d0b60eb5ed93bb16306cb1f0cff85b9c311cadd6a0902b906c887a5550b6c2ca99c50b72c3cb23faa0a22091122fcb0d000000000000000000000000\" } The value can be used as the input data to trigger the burn function of the shielded SRC-20 contract.","title":"Create shielded SRC-20 contract parameters for burn"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#trigger-the-shielded-src-20-contract","text":"Call api: wallet/triggersmartcontract to trigger the shielded SRC-20 contract and geneate the shielded SRC-20 transaction Method: Post Parameters: { \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" , \"function_selector\" : \"mint(uint256,bytes32[9],bytes32[2],bytes32[21])\" , \"parameter\" : \"00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"call_value\" : 0 , \"call_token_value\" : 0 , \"token_id\" : 0 , \"fee_limit\" : 1000000000 } Return: { \"result\" : { \"result\" :true } , \"transaction\" : { \"visible\" :false, \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" : { \"contract\" : [ { \"parameter\" : { \"value\" : { \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" } , \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" } , \"type\" : \"TriggerSmartContract\" }] , \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" :1593795795000, \"fee_limit\" :1000000000, \"timestamp\" :1593795737687 } , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } } Note: the above is an example for triggering the mint function. For transfer and burn , it's similar.","title":"Trigger the shielded SRC-20 contract"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#broadcast-the-shielded-src-20-transaction","text":"Call api: wallet/broadcasttransaction to broadcast this transaction Method: Post Parameters: { \"txID\" : \"d8ae793212147ed7d64f96a1a6c1477aeeecdedf6f5cb2e7cd897f70c7c2603e\" , \"raw_data\" :{ \"contract\" :[ { \"parameter\" :{ \"value\" :{ \"data\" : \"855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e32000000000000000000000000\" , \"owner_address\" : \"411195752747f24146fd1fcd12c31600a81f7c5423\" , \"contract_address\" : \"41959ec81ae3c002192fd25dff7f8d20b4bb6b76ee\" }, \"type_url\" : \"type.googleapis.com/protocol.TriggerSmartContract\" }, \"type\" : \"TriggerSmartContract\" }], \"ref_block_bytes\" : \"f1a0\" , \"ref_block_hash\" : \"6525d0bb0966c224\" , \"expiration\" : 1593795795000 , \"fee_limit\" : 1000000000 , \"timestamp\" : 1593795737687 }, \"signature\" : \"2c1593a78911b9183bd513fcaeeec1440a9a5bd2896adde30411872bfc2d551a1b8211455d3ff686e08d02d230ea4d50e8d4875a88bc13e368e2e4aab80dcb4901\" , \"raw_data_hex\" : \"0a02f1a022086525d0bb0966c22440b8b087adb12e5a9009081f128b090a31747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e54726967676572536d617274436f6e747261637412d5080a15411195752747f24146fd1fcd12c31600a81f7c5423121541959ec81ae3c002192fd25dff7f8d20b4bb6b76ee22a408855d175e00000000000000000000000000000000000000000000000000000000000013889fb4acd771c24fdd47aabb109b7596566509421cdc11d1f8babb5d5af22a614ef10f73d04837be9158010626423130663ad09d6436b97b694acb2b92d940201efa4a7ef3e2406c2c897894ea73cad3ded8dbcfb90521ec8488163b2baeef6a88aa9af11367a3cd1cd797937bb7f521162d5264e1f2dc39ca7c6b0eadf8520a1b5c2bd3bbe50835a9f3419b82909cbf60989f83496480008cceb6a3783bbc25d2921f86d79b0bad5d493766b8cf1f6bec74f6b67480e770c3a7f5b27a30ae3d4a13df273ab73e9107a5287883317bb5417b7f6841e197df99f5321807995c80fd3810f791845681560ccd3a4bfd8c56e298bc09b989e5279ca190ac3b29cdb7941315c027facc97bf1c0a02fa437dd68b335f8cbf0d9a3ba4a30302523609f40a177cc31961ca63a9c375b714831bc007ddbc5cfbafca368200b6c33b4b0aeadf537b47c16788bdc00981713b79f23fc0b4065ab9369072589728ed0cc3ac25076a2f8141a2637e589983210ce6d09e67c36167cb9fa5b4a9bf8daafc795b9c3978ffeade3698dfd4c86f3c7b2dd92c36e6303101b49fdd4f1e4357223c02f19329f6bb18f1f6d2e297e9fefa2d9f92f81ce07a8980effa10b8b8bf39aa19e80d96ef1c915cc55d1d26ea07b1c0da2ecf66b7f8b64657f6ac95466a983553f29a8bea3d78c178b2129745d432ddc95532e56f8e93625c674f20375a48990ca287591fcf0c476c3d1392d4e1355caf8d7352f895dc62da55d83e478ab00b78d5a68a0f50a69d9c595bcf494361517c703db9dba728e8c79a833d753f1977f526e9afd4b6daaff37fa0f1d52a63199fb3f8e97b7061a200aed5d2865de16b83b762638e6c8f9269967299a97618c1bd984f5afa25d170cf9eef601bdd1c1d33bd91813c19f70e102b16327e4cd3d4851bfa76b7caf45026c70d4f2b4872d7255133b07dc41b626228051537eee53083e9a11daf5fcc5cf7ca1cef99579362b1506a90fc1ed5d4fe8b7133c7179a2d3aee27dc802a90403ba445adb6eef8b35fd798fb0d374ce3c8b4a6870bcf32651c9c32cfeafbb0672f50561d76826b938b9b2c44029bc5d11838d453a48565c70e0d3c8f2a915ba932a02271c73046b2c53aaf6e27bb72a567a26e2a4164974fc52d0ad7fa5dddfe9390007e2fc3ad46d644be55519e01a2cce76744f165c6705d3b007d2f649df84e3783622f5e077fe37fdd192896eae9b1245322db6e3242714a0552253b472103553f09b6b1d32804742375d3b140d2ebff2155b6248d07992f40e5537a0587315c451ac53cee490ce49c3b321a967558c39f789bf5d35859d4136bcf4178bf6b1814d617e139aa35710edcd325dd03957462070393b7066182fc56be713bba49a2359db71604e97e9350af687a7f185d7905d8900f7e2431386c00e55e3200000000000000000000000070d7f083adb12e90018094ebdc03\" } Return: { \"result\" : true } Note: before broadcasting the transaction, the sender should sign the transaction by its private key to generate the signature and add it to the transaction.","title":"Broadcast the shielded SRC-20 transaction"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#scan-shielded-src-20-notes-by-ivk","text":"Call api: wallet/scanshieldedsrc20notesbyivk to scan the shielded SRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ivk\" : \"c1898b84ced7e5c8840632ad1203d56b4a8ebbaa8425dd8b5a5b3d43578e1006\" , \"ak\" : \"66fda71a704eb463a13b6f43be7e296dd7ff3e6075e64badf462eca042f0b269\" , \"nk\" : \"b5f558a783c968b624f7cfc9a4f2c909332c0c514a8a419e552337e82e073f66\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"zstabila1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"is_spent\" :true, \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0, \"position\" :9 }] }","title":"Scan shielded SRC-20 notes by ivk"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#scan-shielded-src-20-notes-by-ovk","text":"Call api: wallet/scanshieldedsrc20notesbyovk to scan the shileded SRC-20 notes Method: Post and Get Parameters: { \"start_block_index\" : 46079 , \"end_block_index\" : 46091 , \"shielded_SRC20_contract_address\" : \"TDxka3zetrpWsWoeWWjSAQDwM186UmzwQn\" , \"ovk\" : \"4364c875deeb663781a2f1530f9e4f87ea81cc3c757ca2a30fa4768940de2f98\" , \"visible\" : true } Return: { \"noteTxs\" : [ { \"note\" : { \"payment_address\" : \"zstabila1e453jrrxwsvj6s480a2rduz28jfedrsjwu0xsfk8psd85hajeyc6jx56nh0x7ngclh6tytr28wn\" , \"value\" :60, \"rcm\" : \"e51c6ef6c51ab1bb289056db13d44c0af35e70e18d76d8e9f270176663d8f50d\" } , \"txid\" : \"59b64426f6bffead22739eb7aee626e11258cb899bc035c7e9d86bb495414dd8\" , \"index\" :0 } , { \"note\" : { \"payment_address\" : \"zstabila129rzep2kymh87rwpp6eqk65l7a395y4w2t4zdma7chca4f8thncedlhkynta8655v3swqwna6qc\" , \"value\" :20, \"rcm\" : \"05f8adce01aa4aa61058b77924d46554edbecb3138f7704d7dc98180c3d88c07\" } , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :0 } , { \"to_amount\" : \"4000\" , \"txid\" : \"ae633c43530ba54b6684e795720dd1c74834744988a65b0af2baea41099f2f66\" , \"index\" :1, \"transparent_to_address\" : \"TBaBXpRAeBhs75TZT751LwyhrcR25XeUot\" }] }","title":"Scan shielded SRC-20 notes by ovk"},{"location":"mechanism-algorithm/shielded-TRC20-contract/#check-the-shielded-src-20-note-status","text":"Call api: wallet/isshieldedsrc20contractNoteSpent to check the shielded SRC-20 note status whether it is spent Method: Post Parameters: { \"note\" : { \"value\" : 40 , \"payment_address\" : \"zstabila1nzfh9270dvpn0gysedl9gx6wfmh2hve3rtf0m57vla04pfjm3ermmrh9yasa2xnuy2zycsvwawe\" , \"rcm\" : \"b269a741bde1de2df79ffccf96d6eb646aa996e6567c208d774e851aef3e1909\" }, \"ak\" : \"8072d9110c9de9d9ade33d5d0f5890a7aa65b0cde42af7816d187297caf2fd64\" , \"nk\" : \"590bf33f93f792be659fd404df91e75c3b08d38d4e08ee226c3f5219cf598f14\" , \"position\" : 1 , \"shielded_SRC20_contract_address\" : \"41e6e90fbc958ba09483550882b1f0327e0193250a\" } Return: { \"is_spent\" : true }","title":"Check the shielded SRC-20 note status"},{"location":"mechanism-algorithm/shielded-transaction/","text":"Shielded Transaction \u00b6 Introduction \u00b6 STABILA shielded transaction uses zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to implement a completely anonymous transaction. StabilaZ is the name of shielded src10 token. In shielded transaction of transfering StabilaZ, the sender and the receiver's address and transfer amount can both be completely confidential. In shielded transaction of transfering StabilaZ, there are two types of address: \"t-addr\" (Transparent Address) \"z-addr\" (Shielded Address) \"t-addr\" address uses STABILA account model. \"z-addr\" address uses Anonymous account model. In shielded transaction of transfering StabilaZ, there are three types of transfer transaction: - From \"t-addr\" to \"z-addr\": The transaction information of \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"z-addr\" to \"z-addr\": The transaction information of both \"z-addr\" can not be tracked. From \"z-addr\" to \"t-addr\": The transaction information of both \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"t-addr\" to \"t-addr\" are not supported. Usage Guide \u00b6 1. The sender can only spend one note in each transfer. The receiver can receive two notes in each transfer at most. 2. When you transfer from \"z-addr\" to \"t-addr\", if no note returns to \"z-addr\" as a change, it will generate a note of zero value automatically, and send it to a random black hole address. 3. The fee for each shielded transaction is xx. The doc below describes how to use STABILA Shielded Transaction with http api. Transfer from transparent address to shielded address \u00b6 Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { \"transparent_from_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"from_amount\" : 100000000 , \"ovk\" : \"798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6\" , \"shielded_receives\" :[{ \"note\" : { \"value\" : 500000000 , \"payment_address\" : \"zstabila1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" } }] } Return: { \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Step 2. Call api: wallet/gettransactionsign to sign (use the private key of the transparent address) Method: Post Parameters: { \"privateKey\" : \"7f7f701e94d4f1dd60ee5205e7ea8ee31121427210417b608a6b2e96433549a7\" , \"transaction\" : { \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" : 100000000 , \"fee\" : 10000000 , \"receive_description\" :[{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]}, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" : 1558691289000 , \"timestamp\" : 1558691230861 }, \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } } Return: { \"signature\" : [ \"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\" ] , \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: { \"signature\" : [ \"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\" ] , \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Return: { \"result\" : true } Transfer from shielded address to shielded address \u00b6 Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" } , \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }} , \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06\" , \"nsk\" : \"050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d\" , \"ovk\" : \"a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 90000000 , \"payment_address\" : \"zstabila1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302\" }, \"alpha\" : \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" }, \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }}, \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"zstabila1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] } Return: { \"txID\" : \"5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"binding_signature\" : \"b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c\" , \"spend_description\" : [{ \"value_commitment\" : \"ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08\" , \"zkproof\" : \"82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad\" }] , \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758\" , \"c_enc\" : \"1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653\" , \"c_out\" : \"bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0\" , \"zkproof\" : \"b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"029b\" , \"ref_block_hash\" : \"027c45a7dc0875f7\" , \"expiration\" :1558691547000, \"timestamp\" :1558691489292 } , \"raw_data_hex\" : \"0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"binding_signature\" : \"231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504\" , \"spend_description\" :[{ \"value_commitment\" : \"f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08\" , \"zkproof\" : \"984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b\" }], \"fee\" : 10000000 , \"receive_description\" :[{ \"value_commitment\" : \"3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c\" , \"c_enc\" : \"4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040\" , \"c_out\" : \"5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e\" , \"zkproof\" : \"b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b\" }]}, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"0328\" , \"ref_block_hash\" : \"833c24d9f1019cd0\" , \"expiration\" : 1558691970000 , \"timestamp\" : 1558691911355 }, \"raw_data_hex\" : \"0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d\" } Return: { \"result\" : true } Transfer from shielded address to transparent address \u00b6 Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } , \"parents\" : [{ \"content\" : \"c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61\" }]} , \"rt\" : \"8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" , \"nsk\" : \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" , \"ovk\" : \"1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"zstabila1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" }, \"alpha\" : \"3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }, \"right\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } }, \"rt\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000\" } ], \"transparent_to_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"to_amount\" : 70000000 } Return: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"to_amount\" :70000000, \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" : [{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }] , \"fee\" :10000000, \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" } , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" :1558928754000, \"timestamp\" :1558928695327 } , \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"to_amount\" : 70000000 , \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" :[{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }], \"fee\" : 10000000 , \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" }, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" : 1558928754000 , \"timestamp\" : 1558928695327 }, \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Return: { \"result\" : true }","title":"Shielded Transaction"},{"location":"mechanism-algorithm/shielded-transaction/#shielded-transaction","text":"","title":"Shielded Transaction"},{"location":"mechanism-algorithm/shielded-transaction/#introduction","text":"STABILA shielded transaction uses zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to implement a completely anonymous transaction. StabilaZ is the name of shielded src10 token. In shielded transaction of transfering StabilaZ, the sender and the receiver's address and transfer amount can both be completely confidential. In shielded transaction of transfering StabilaZ, there are two types of address: \"t-addr\" (Transparent Address) \"z-addr\" (Shielded Address) \"t-addr\" address uses STABILA account model. \"z-addr\" address uses Anonymous account model. In shielded transaction of transfering StabilaZ, there are three types of transfer transaction: - From \"t-addr\" to \"z-addr\": The transaction information of \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"z-addr\" to \"z-addr\": The transaction information of both \"z-addr\" can not be tracked. From \"z-addr\" to \"t-addr\": The transaction information of both \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"t-addr\" to \"t-addr\" are not supported.","title":"Introduction"},{"location":"mechanism-algorithm/shielded-transaction/#usage-guide","text":"1. The sender can only spend one note in each transfer. The receiver can receive two notes in each transfer at most. 2. When you transfer from \"z-addr\" to \"t-addr\", if no note returns to \"z-addr\" as a change, it will generate a note of zero value automatically, and send it to a random black hole address. 3. The fee for each shielded transaction is xx. The doc below describes how to use STABILA Shielded Transaction with http api.","title":"Usage Guide"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-transparent-address-to-shielded-address","text":"Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { \"transparent_from_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"from_amount\" : 100000000 , \"ovk\" : \"798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6\" , \"shielded_receives\" :[{ \"note\" : { \"value\" : 500000000 , \"payment_address\" : \"zstabila1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" } }] } Return: { \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Step 2. Call api: wallet/gettransactionsign to sign (use the private key of the transparent address) Method: Post Parameters: { \"privateKey\" : \"7f7f701e94d4f1dd60ee5205e7ea8ee31121427210417b608a6b2e96433549a7\" , \"transaction\" : { \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" : 100000000 , \"fee\" : 10000000 , \"receive_description\" :[{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]}, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" : 1558691289000 , \"timestamp\" : 1558691230861 }, \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } } Return: { \"signature\" : [ \"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\" ] , \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: { \"signature\" : [ \"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\" ] , \"txID\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"transparent_from_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" , \"binding_signature\" : \"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\" , \"from_amount\" :100000000, \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\" , \"note_commitment\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" , \"epk\" : \"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\" , \"c_enc\" : \"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\" , \"c_out\" : \"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\" , \"zkproof\" : \"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"0245\" , \"ref_block_hash\" : \"b1ea272768028540\" , \"expiration\" :1558691289000, \"timestamp\" :1558691230861 } , \"raw_data_hex\" : \"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\" } Return: { \"result\" : true }","title":"Transfer from transparent address to shielded address"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-shielded-address-to-shielded-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" } , \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }} , \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06\" , \"nsk\" : \"050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d\" , \"ovk\" : \"a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 90000000 , \"payment_address\" : \"zstabila1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\" , \"rcm\" : \"e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302\" }, \"alpha\" : \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\" }, \"right\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }}, \"rt\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" } ], \"shielded_receives\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"zstabila1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] } Return: { \"txID\" : \"5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"binding_signature\" : \"b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c\" , \"spend_description\" : [{ \"value_commitment\" : \"ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08\" , \"zkproof\" : \"82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad\" }] , \"fee\" :10000000, \"receive_description\" : [{ \"value_commitment\" : \"6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758\" , \"c_enc\" : \"1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653\" , \"c_out\" : \"bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0\" , \"zkproof\" : \"b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956\" }]} , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"029b\" , \"ref_block_hash\" : \"027c45a7dc0875f7\" , \"expiration\" :1558691547000, \"timestamp\" :1558691489292 } , \"raw_data_hex\" : \"0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"binding_signature\" : \"231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504\" , \"spend_description\" :[{ \"value_commitment\" : \"f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140\" , \"anchor\" : \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\" , \"nullifier\" : \"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\" , \"rk\" : \"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\" , \"spend_authority_signature\" : \"2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08\" , \"zkproof\" : \"984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b\" }], \"fee\" : 10000000 , \"receive_description\" :[{ \"value_commitment\" : \"3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595\" , \"note_commitment\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" , \"epk\" : \"3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c\" , \"c_enc\" : \"4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040\" , \"c_out\" : \"5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e\" , \"zkproof\" : \"b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b\" }]}, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"0328\" , \"ref_block_hash\" : \"833c24d9f1019cd0\" , \"expiration\" : 1558691970000 , \"timestamp\" : 1558691911355 }, \"raw_data_hex\" : \"0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d\" } Return: { \"result\" : true }","title":"Transfer from shielded address to shielded address"},{"location":"mechanism-algorithm/shielded-transaction/#transfer-from-shielded-address-to-transparent-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\" :[{ \"hash\" : \"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\" , \"index\" : 0 }], \"block_num\" : 1 } Return: { \"vouchers\" : [{ \"tree\" : { \"left\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } , \"parents\" : [{ \"content\" : \"c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61\" }]} , \"rt\" : \"8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b\" }] , \"paths\" : [ \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000\" ]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\" : \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" , \"nsk\" : \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" , \"ovk\" : \"1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61\" , \"shielded_spends\" : [ { \"note\" : { \"value\" : 80000000 , \"payment_address\" : \"zstabila1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\" , \"rcm\" : \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" }, \"alpha\" : \"3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405\" , \"voucher\" : { \"tree\" : { \"left\" : { \"content\" : \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }, \"right\" : { \"content\" : \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } }, \"rt\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" }, \"path\" : \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000\" } ], \"transparent_to_address\" : \"41A7D8A35B260395C14AA456297662092BA3B76FC0\" , \"to_amount\" : 70000000 } Return: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" : { \"contract\" : [{ \"parameter\" : { \"value\" : { \"to_amount\" :70000000, \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" : [{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }] , \"fee\" :10000000, \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" } , \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" } , \"type\" : \"ShieldedTransferContract\" }] , \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" :1558928754000, \"timestamp\" :1558928695327 } , \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: { \"txID\" : \"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\" , \"raw_data\" :{ \"contract\" :[{ \"parameter\" :{ \"value\" :{ \"to_amount\" : 70000000 , \"binding_signature\" : \"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\" , \"spend_description\" :[{ \"value_commitment\" : \"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\" , \"anchor\" : \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" , \"nullifier\" : \"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\" , \"rk\" : \"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\" , \"spend_authority_signature\" : \"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\" , \"zkproof\" : \"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\" }], \"fee\" : 10000000 , \"transparent_to_address\" : \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" }, \"type_url\" : \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\" : \"ShieldedTransferContract\" }], \"ref_block_bytes\" : \"00dc\" , \"ref_block_hash\" : \"a45c748f93fa2854\" , \"expiration\" : 1558928754000 , \"timestamp\" : 1558928695327 }, \"raw_data_hex\" : \"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\" } Return: { \"result\" : true }","title":"Transfer from shielded address to transparent address"},{"location":"mechanism-algorithm/sr/","text":"Super Representative \u00b6 How to Become a Super Representative \u00b6 In STABILA network, any account can apply to become a executive. Every account can vote for executives. The top 21 executives are called Governor, the executives from 22nd to 100th are called Partner, the executives after 100th are called Candidates. Only Governor can produce blocks. The votes will be counted every 6 hours, so governors may also change every 6 hours. To prevent vicious attack, STABILA network burns 9999 STB from the account that applies to become a governor candidate. Super Representative Election \u00b6 To vote, you need to have STABILA Power(TP). To get STABILA Power, you need to stake STB. Every 1 staked STB accounts for one STABILA Power(TP). Every account in STABILA network has the right to vote for a governor candidate. After you unstake your staked STB, you will lose the responding STABILA Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in STABILA network which means your previous vote will be overwritten by your latest vote. Example (Using wallet-cli): > cdbalance 10 ,000,000 3 // Stake 10 STB to get 10 STABILA Power ( TP ) > voteexecutive executive1 4 executive2 6 // Vote 4 votes for executive1, 6 votes for executive2 > voteexecutive executive1 3 executive2 7 // Vote 3 votes for executive1, 7 votes for executive2 The final output above is: Vote 3 votes for executive1, 7 votes for executive2 Executives Brokerage \u00b6 The default ratio is 20%, which can be modified by the executives. If a executive get 20% of the reward, and the other 80% will be awarded to the voters. If the brokerage ratio is set to 100%, the rewards are all obtained by the executive; if set to 0, the rewards are all sent to the voters. Reward for Executives \u00b6 Votes Reward \u00b6 Vote rewards are 160 STB every block, with a block generated every 3 seconds, the total vote rewards per day is 4,608,000 STB. For each Governor and Partner, the daily Vote Rewards = 4,608,000 * ( votes / total votes) x 20% STB Block Producing Reward \u00b6 Every time after a governor produces a block, it will be reward 16 STB. The 21 governors take turns to produce blocks every 3 seconds. The annual block producing reward is 168,192,000 STB in total. Every time after a governor produces a block, the 16 STB block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to governor account every 24 hours. $16 (\\mathsf{STB}/block) \\times 28,800 (blocks/day) = 460,800 (\\mathsf{STB}/day)$ For each governor, the daily block $Rewards_{sr} = (460,800 / 21) \\times 20 \\% \\mathsf{STB}$. Reward may be less than the theoretical number due to missed blocks and maintenance period. Reward for Voters \u00b6 If you vote for a Super Representative: the daily Voter Rewards = (((the number of votes you vote to an executive) * 4,608,000 / total votes) * 80%) + ((460,800 / 21) * 80%) * (the number of votes you vote to a executive) / (the total number of votes a executive receives) STB If you vote for a Partner: the daily Voter Rewards = (((the number of votes you vote to a executive) * 4,608,000 / total votes) * 80%) STB Committee \u00b6 1. What is Committee \u00b6 Committee can modify the STABILA network parameters, like transaction fees, block producing reward amount, etc. Committee is composed of the current 21 governors. Every governor has the right to start a proposal. The proposal will be passed after it gets more than 18 approves from the governors and will become valid in the next maintenance period. 2. Create a Proposal \u00b6 Only Governors, Partners and Candidates can create a proposal. The network parameters can be modified([min,max]). {0,1}: 1 means 'allowed' or 'actived', 0 means 'disallow', 'disable' or 'no'. # Command Value 0 MaintenanceTimeInterval (To modify the maintenance interval of Governor) 6 Hours [3 * 21, 24 * 3600] s 1 AccountUpgradeCost (To modify the cost of applying for Governor account) 9999 STB [0, 100000000000] STB 2 CreateAccountFee (To modify the account creation fee) 0.1 STB [0, 100000000000] STB 3 TransactionFee (To modify the amount of STB used to gain extra bandwidth) 1000 Unit/Byte [0, 100000000000] STB 4 AssetIssueFee (To modify asset issuance fee) 1024 STB [0, 100000000000] STB 5 ExecutivePayPerBlock (To modify Governor block generation reward) 16 STB [0, 100000000000] STB 6 ExecutiveStandbyAllowance (To modify the rewards given to the top 21 Governors and the following 100 executives) 115200 STB [0, 100000000000] STB 7 CreateNewAccountFeeInSystemContract (To modify the cost of account creation) 1 STB 8 CreateNewAccountBandwidthRate (To modify the consumption of bandwidth of account creation) 1 Bandwidth/Byte 9 AllowCreationOfContracts (To activate the Virtual Machine (VM)) 1 {0, 1} 10 RemoveThePowerOfTheGr (To remove the GR Genesis votes) 1 {0, 1} 11 UcrFee (To modify the fee of 1 ucr) 140 Unit [0, 100000000000] STB 12 ExchangeCreateFee (To modify the cost of trading pair creation) 1024 STB [0, 100000000000] STB 13 MaxCpuTimeOfOneTx (To modify the maximum execution time of one transaction) 50 ms [0, 1000] ms 14 AllowUpdateAccountName (To allow to change the account name) 0 {0, 1} 15 AllowSameTokenName (To allow the same token name) 1 {0, 1} 16 AllowDelegateResource (To allow resource delegation) 1 {0, 1} 18 AllowSvmTransferSrc10 (To allow the SRC-10 token transfer in smart contracts) 1 {0, 1} 19 TotalUcrCurrentLimit (To modify current total ucr limit) 50000000000 20 AllowMultiSign (To allow the initiation of multi-signature) 1 {0, 1} 21 AllowAdaptiveUcr (To allow adaptive adjustment for total Ucr) 0 {0, 1} 22 UpdateAccountPermissionFee (To modify the fee for updating account permission) 100 STB 23 MultiSignFee (To modify the fee for multi-signature) 1 STB 24 AllowProtoFilterNum (To enable protocol optimization) 0 {0, 1} 26 AllowSvmConstantinople (To support the new commands of Constantinople) 1 {0, 1} 21 AllowShieldedTransaction (To enable shielded transaction) 0 {0, 1} 28 ShieldedTransactionFee (To modify shielded transaction fee) 10 STB [0, 10000] STB 29 AdaptiveResourceLimitMultiplier (To modify the adaptive ucr limit multiplier) 1000 [1, 10000] 30 ChangeDelegation (Propose to support the decentralized vote dividend) 1 {0, 1} 31 Executive127PayPerBlock (Propose to modify the block voting rewards given to the top 21 Governors and the following 100 executives) 160 STB [0, 100000000000] STB 32 AllowSvmSolidity059 (To allow SVM to support solidity compiler 0.5.9) 0 {0, 1} 33 AdaptiveResourceLimitTargetRatio (To modify the target ucr limit) 10 [1, 1000] Example (Using wallet-cli): > createproposal id value # id: the serial number ( 0 ~ 33 ) # value: the parameter value Note: In STABILA network, 1 STB = 1_000_000 UNIT 3. Vote for a Proposal \u00b6 Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): > approveProposal id is_or_not_add_approval # id: proposal id # is_or_not_add_approval: YES vote or cancel YES vote 4. Cancel Proposal \u00b6 Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): > deleteProposal id # id: proposal id 5. Query Proposal \u00b6 Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more API detail, please refer to HTTP API .","title":"SR and Committee"},{"location":"mechanism-algorithm/sr/#super-representative","text":"","title":"Super Representative"},{"location":"mechanism-algorithm/sr/#how-to-become-a-super-representative","text":"In STABILA network, any account can apply to become a executive. Every account can vote for executives. The top 21 executives are called Governor, the executives from 22nd to 100th are called Partner, the executives after 100th are called Candidates. Only Governor can produce blocks. The votes will be counted every 6 hours, so governors may also change every 6 hours. To prevent vicious attack, STABILA network burns 9999 STB from the account that applies to become a governor candidate.","title":"How to Become a Super Representative"},{"location":"mechanism-algorithm/sr/#super-representative-election","text":"To vote, you need to have STABILA Power(TP). To get STABILA Power, you need to stake STB. Every 1 staked STB accounts for one STABILA Power(TP). Every account in STABILA network has the right to vote for a governor candidate. After you unstake your staked STB, you will lose the responding STABILA Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in STABILA network which means your previous vote will be overwritten by your latest vote. Example (Using wallet-cli): > cdbalance 10 ,000,000 3 // Stake 10 STB to get 10 STABILA Power ( TP ) > voteexecutive executive1 4 executive2 6 // Vote 4 votes for executive1, 6 votes for executive2 > voteexecutive executive1 3 executive2 7 // Vote 3 votes for executive1, 7 votes for executive2 The final output above is: Vote 3 votes for executive1, 7 votes for executive2","title":"Super Representative Election"},{"location":"mechanism-algorithm/sr/#executives-brokerage","text":"The default ratio is 20%, which can be modified by the executives. If a executive get 20% of the reward, and the other 80% will be awarded to the voters. If the brokerage ratio is set to 100%, the rewards are all obtained by the executive; if set to 0, the rewards are all sent to the voters.","title":"Executives Brokerage"},{"location":"mechanism-algorithm/sr/#reward-for-executives","text":"","title":"Reward for Executives"},{"location":"mechanism-algorithm/sr/#votes-reward","text":"Vote rewards are 160 STB every block, with a block generated every 3 seconds, the total vote rewards per day is 4,608,000 STB. For each Governor and Partner, the daily Vote Rewards = 4,608,000 * ( votes / total votes) x 20% STB","title":"Votes Reward"},{"location":"mechanism-algorithm/sr/#block-producing-reward","text":"Every time after a governor produces a block, it will be reward 16 STB. The 21 governors take turns to produce blocks every 3 seconds. The annual block producing reward is 168,192,000 STB in total. Every time after a governor produces a block, the 16 STB block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to governor account every 24 hours. $16 (\\mathsf{STB}/block) \\times 28,800 (blocks/day) = 460,800 (\\mathsf{STB}/day)$ For each governor, the daily block $Rewards_{sr} = (460,800 / 21) \\times 20 \\% \\mathsf{STB}$. Reward may be less than the theoretical number due to missed blocks and maintenance period.","title":"Block Producing Reward"},{"location":"mechanism-algorithm/sr/#reward-for-voters","text":"If you vote for a Super Representative: the daily Voter Rewards = (((the number of votes you vote to an executive) * 4,608,000 / total votes) * 80%) + ((460,800 / 21) * 80%) * (the number of votes you vote to a executive) / (the total number of votes a executive receives) STB If you vote for a Partner: the daily Voter Rewards = (((the number of votes you vote to a executive) * 4,608,000 / total votes) * 80%) STB","title":"Reward for Voters"},{"location":"mechanism-algorithm/sr/#committee","text":"","title":"Committee"},{"location":"mechanism-algorithm/sr/#1-what-is-committee","text":"Committee can modify the STABILA network parameters, like transaction fees, block producing reward amount, etc. Committee is composed of the current 21 governors. Every governor has the right to start a proposal. The proposal will be passed after it gets more than 18 approves from the governors and will become valid in the next maintenance period.","title":"1. What is Committee"},{"location":"mechanism-algorithm/sr/#2-create-a-proposal","text":"Only Governors, Partners and Candidates can create a proposal. The network parameters can be modified([min,max]). {0,1}: 1 means 'allowed' or 'actived', 0 means 'disallow', 'disable' or 'no'. # Command Value 0 MaintenanceTimeInterval (To modify the maintenance interval of Governor) 6 Hours [3 * 21, 24 * 3600] s 1 AccountUpgradeCost (To modify the cost of applying for Governor account) 9999 STB [0, 100000000000] STB 2 CreateAccountFee (To modify the account creation fee) 0.1 STB [0, 100000000000] STB 3 TransactionFee (To modify the amount of STB used to gain extra bandwidth) 1000 Unit/Byte [0, 100000000000] STB 4 AssetIssueFee (To modify asset issuance fee) 1024 STB [0, 100000000000] STB 5 ExecutivePayPerBlock (To modify Governor block generation reward) 16 STB [0, 100000000000] STB 6 ExecutiveStandbyAllowance (To modify the rewards given to the top 21 Governors and the following 100 executives) 115200 STB [0, 100000000000] STB 7 CreateNewAccountFeeInSystemContract (To modify the cost of account creation) 1 STB 8 CreateNewAccountBandwidthRate (To modify the consumption of bandwidth of account creation) 1 Bandwidth/Byte 9 AllowCreationOfContracts (To activate the Virtual Machine (VM)) 1 {0, 1} 10 RemoveThePowerOfTheGr (To remove the GR Genesis votes) 1 {0, 1} 11 UcrFee (To modify the fee of 1 ucr) 140 Unit [0, 100000000000] STB 12 ExchangeCreateFee (To modify the cost of trading pair creation) 1024 STB [0, 100000000000] STB 13 MaxCpuTimeOfOneTx (To modify the maximum execution time of one transaction) 50 ms [0, 1000] ms 14 AllowUpdateAccountName (To allow to change the account name) 0 {0, 1} 15 AllowSameTokenName (To allow the same token name) 1 {0, 1} 16 AllowDelegateResource (To allow resource delegation) 1 {0, 1} 18 AllowSvmTransferSrc10 (To allow the SRC-10 token transfer in smart contracts) 1 {0, 1} 19 TotalUcrCurrentLimit (To modify current total ucr limit) 50000000000 20 AllowMultiSign (To allow the initiation of multi-signature) 1 {0, 1} 21 AllowAdaptiveUcr (To allow adaptive adjustment for total Ucr) 0 {0, 1} 22 UpdateAccountPermissionFee (To modify the fee for updating account permission) 100 STB 23 MultiSignFee (To modify the fee for multi-signature) 1 STB 24 AllowProtoFilterNum (To enable protocol optimization) 0 {0, 1} 26 AllowSvmConstantinople (To support the new commands of Constantinople) 1 {0, 1} 21 AllowShieldedTransaction (To enable shielded transaction) 0 {0, 1} 28 ShieldedTransactionFee (To modify shielded transaction fee) 10 STB [0, 10000] STB 29 AdaptiveResourceLimitMultiplier (To modify the adaptive ucr limit multiplier) 1000 [1, 10000] 30 ChangeDelegation (Propose to support the decentralized vote dividend) 1 {0, 1} 31 Executive127PayPerBlock (Propose to modify the block voting rewards given to the top 21 Governors and the following 100 executives) 160 STB [0, 100000000000] STB 32 AllowSvmSolidity059 (To allow SVM to support solidity compiler 0.5.9) 0 {0, 1} 33 AdaptiveResourceLimitTargetRatio (To modify the target ucr limit) 10 [1, 1000] Example (Using wallet-cli): > createproposal id value # id: the serial number ( 0 ~ 33 ) # value: the parameter value Note: In STABILA network, 1 STB = 1_000_000 UNIT","title":"2. Create a Proposal"},{"location":"mechanism-algorithm/sr/#3-vote-for-a-proposal","text":"Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): > approveProposal id is_or_not_add_approval # id: proposal id # is_or_not_add_approval: YES vote or cancel YES vote","title":"3. Vote for a Proposal"},{"location":"mechanism-algorithm/sr/#4-cancel-proposal","text":"Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): > deleteProposal id # id: proposal id","title":"4. Cancel Proposal"},{"location":"mechanism-algorithm/sr/#5-query-proposal","text":"Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more API detail, please refer to HTTP API .","title":"5. Query Proposal"},{"location":"mechanism-algorithm/system-contracts/","text":"System Contracts \u00b6 AccountCreateContract \u00b6 message AccountCreateContract { bytes owner_address = 1; bytes account_address = 2; AccountType type = 3; } owner_address : The owner of the current account. account_address : The target address to create. type : Account type. 0 means normal account; 1 means the Genesis account; 2 means smart contract account. TransferContract \u00b6 message TransferContract { bytes owner_address = 1; bytes to_address = 2; int64 amount = 3; } owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of STB to transfer. TransferAssetContract \u00b6 message TransferAssetContract { bytes asset_name = 1; bytes owner_address = 2; bytes to_address = 3; int64 amount = 4; } asset_name : The token id to transfer. owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of token to transfer. VoteExecutiveContract \u00b6 message VoteExecutiveContract { message Vote { bytes vote_address = 1; int64 vote_count = 2; } bytes owner_address = 1; repeated Vote votes = 2; bool support = 3; } owner_address : The owner of the current account. vote_address : The Governor or candidate's address. vote_count : The votes number. support : Constant true, not used. ExecutiveCreateContract \u00b6 message ExecutiveCreateContract { bytes owner_address = 1; bytes url = 2; } owner_address : The owner of the current account. url : The website url of the executive. AssetIssueContract \u00b6 message AssetIssueContract { message CdedSupply { int64 cded_amount = 1; int64 cded_days = 2; } bytes owner_address = 1; bytes name = 2; bytes abbr = 3; int64 total_supply = 4; repeated CdedSupply cded_supply = 5; int32 stb_num = 6; int32 num = 8; int64 start_time = 9; int64 end_time = 10; int64 order = 11; // the order of tokens of the same name int32 vote_score = 16; bytes description = 20; bytes url = 21; int64 free_asset_net_limit = 22; int64 public_free_asset_net_limit = 23; int64 public_free_asset_net_usage = 24; int64 public_latest_free_net_time = 25; } owner_address : The owner of the current account. name : The token name to issue. abbr : The abbreviation of the token name. total_supply : The amount of token to issue. cded_supply : The amount of token and staked days to stake. stb_num : stb_num/num defines the token price. num : stb_num/num defines the token price. start_time : ICO starts time. end_time : ICO ends time. order : Deprecated. vote_score : Deprecated. description : The description of the token. url : The website url of the token. free_asset_net_limit : The free bandwidth limit each account owns when transfers asset. public_free_asset_net_limit : The free bandwidth limit all the accounts can use. public_free_asset_net_usage : The free bandwidth usage of all the accounts. public_latest_free_net_time : The latest bandwidth consumption time of token transfer. ExecutiveUpdateContract \u00b6 message ExecutiveUpdateContract { bytes owner_address = 1; bytes update_url = 12; } owner_address : The owner of the current account. update_url : The website url of the executive. ParticipateAssetIssueContract \u00b6 message ParticipateAssetIssueContract { bytes owner_address = 1; bytes to_address = 2; bytes asset_name = 3; int64 amount = 4; } owner_address : The owner of the current account. to_address : The token owner address. account_name : The token id. amount : The amount of token to purchase. AccountUpdateContract \u00b6 // Update account name. Account name is unique now. message AccountUpdateContract { bytes account_name = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_name : Account name. CdBalanceContract \u00b6 message CdBalanceContract { bytes owner_address = 1; int64 cded_balance = 2; int64 cded_duration = 3; ResourceCode resource = 10; bytes receiver_address = 15; } owner_address : The owner of the current account. cded_balance : The amount of STB to stake. cded_duration : The stake duration. resource : The type of resource get by staking STB. receiver_address : The account address to receive resource. UncdBalanceContract \u00b6 message UncdBalanceContract { bytes owner_address = 1; ResourceCode resource = 10; bytes receiver_address = 13; } owner_address : The owner of the current account. resource : The type of resource to unfree. receiver_address : The account address to receive resource. WithdrawBalanceContract \u00b6 message WithdrawBalanceContract { bytes owner_address = 1; } owner_address : The owner of the current account. UncdAssetContract \u00b6 message UncdAssetContract { bytes owner_address = 1; } owner_address : The owner of the current account. UpdateAssetContract \u00b6 message UpdateAssetContract { bytes owner_address = 1; bytes description = 2; bytes url = 3; int64 new_limit = 4; int64 new_public_limit = 5; } owner_address : The owner of the current account. description : The description of the token. url : The website url of the token. new_limit : The bandwidth consumption limit of each account when transfers asset. new_public_limit : The bandwidth consumption limit of the accounts. ProposalCreateContract \u00b6 message ProposalCreateContract { bytes owner_address = 1; map<int64, int64> parameters = 2; } owner_address : The owner of the current account. parameters : The proposal. ProposalApproveContract \u00b6 message ProposalApproveContract { bytes owner_address = 1; int64 proposal_id = 2; bool is_add_approval = 3; // add or remove approval } owner_address : The owner of the current account. proposal_id : The proposal id. is_add_approval : Whether to approve. ProposalDeleteContract \u00b6 message ProposalDeleteContract { bytes owner_address = 1; int64 proposal_id = 2; } owner_address : The owner of the current account. proposal_id : The proposal id. SetAccountIdContract \u00b6 // Set account id if the account has no id. Account id is unique and case insensitive. message SetAccountIdContract { bytes account_id = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_id : The account id. CreateSmartContract \u00b6 message CreateSmartContract { bytes owner_address = 1; SmartContract new_contract = 2; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. new_contract : the smart contract. call_token_value : The amount of SRC-10 token to send to the contract when triggers. token_id : The id of the SRC-10 token to be sent to the contract. TriggerSmartContract \u00b6 message TriggerSmartContract { bytes owner_address = 1; bytes contract_address = 2; int64 call_value = 3; bytes data = 4; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. contract_address : The contract address. call_value : The amount of STB to send to the contract when triggers. data : The parameters to trigger the contract. call_token_value : The amount of SRC-10 token to send to the contract when triggers. token_id : The id of the SRC-10 token to be sent to the contract. UpdateSettingContract \u00b6 message UpdateSettingContract { bytes owner_address = 1; bytes contract_address = 2; int64 consume_user_resource_percent = 3; } owner_address : The owner of the current account. contract_address : The address of the smart contract. consume_user_resource_percent : The percentage of resource consumption ratio. ExchangeCreateContract \u00b6 message ExchangeCreateContract { bytes owner_address = 1; bytes first_token_id = 2; int64 first_token_balance = 3; bytes second_token_id = 4; int64 second_token_balance = 5; } owner_address : The owner of the current account. first_token_id : First token id. first_token_balance : First token balance. second_token_id : Second token id. second_token_balance : Second token balance. ExchangeInjectContract \u00b6 message ExchangeInjectContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to inject. quant : The token amount to inject. ExchangeWithdrawContract \u00b6 message ExchangeWithdrawContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to withdraw. quant : The token amount to withdraw. ExchangeTransactionContract \u00b6 message ExchangeTransactionContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to sell. quant : The token amount to sell. ShieldedTransferContract \u00b6 message ShieldedTransferContract { bytes transparent_from_address = 1; int64 from_amount = 2; repeated SpendDescription spend_description = 3; repeated ReceiveDescription receive_description = 4; bytes binding_signature = 5; bytes transparent_to_address = 6; int64 to_amount = 7; } transparent_from_address : The transparent address of the sender. from_amount : The amount to send. spend_description : Shielded spend information. receive_description : Shielded receive information. binding_signature : The binding signature. transparent_to_address : The transparent address of the receiver. to_amount : The amount to receive. message SpendDescription { bytes value_commitment = 1; bytes anchor = 2; bytes nullifier = 3; bytes rk = 4; bytes zkproof = 5; bytes spend_authority_signature = 6; } value_commitment : value commitment of spender's transfer amount. anchor : root of the note commitment Merkle tree at some block. nullifier : nullifier of spender's note, to prevent double-spent. rk : public key, to verify spender's Spend Authorization Signature . zkproof : zero-knowledge proof of spender's note, prove that this note exists and could be spent. spend_authority_signature : the spender's Spend Authorization Signature . message ReceiveDescription { bytes value_commitment = 1; bytes note_commitment = 2; bytes epk = 3; bytes c_enc = 4; bytes c_out = 5; bytes zkproof = 6; } value_commitment : value commitment of receiver's transfer amount. note_commitment : commitment of the receiver's not. epk : ephemeral public key, in order to generate note's decryption key. c_enc : part of note ciphertext, encryption of diversifier, receiver's transfer amount, rcm, and memo. c_out : part of note ciphertext, encryption of the receiver's public key and ephemeral private key. zkproof : zero-knowledge proof of the receiver's note. Multi Signature \u00b6 Multi-Signature ClearABIContract \u00b6 message ClearABIContract { bytes owner_address = 1; bytes contract_address = 2; } owner_address : The owner of the current account. account_address : The target contract address to clear ABI. UpdateBrokerageContract \u00b6 message UpdateBrokerageContract { bytes owner_address = 1; int32 brokerage = 2; } owner_address : The owner of the current account. brokerage : Commission rate, from 0 to 100,1 mean 1%. UpdateUcrLimitContract \u00b6 message UpdateUcrLimitContract { bytes owner_address = 1; bytes contract_address = 2; int64 origin_ucr_limit = 3; } owner_address : The owner of the current account. contract_address : The contract address. origin_ucr_limit : The target ucr limit to change.","title":"System Contracts"},{"location":"mechanism-algorithm/system-contracts/#system-contracts","text":"","title":"System Contracts"},{"location":"mechanism-algorithm/system-contracts/#accountcreatecontract","text":"message AccountCreateContract { bytes owner_address = 1; bytes account_address = 2; AccountType type = 3; } owner_address : The owner of the current account. account_address : The target address to create. type : Account type. 0 means normal account; 1 means the Genesis account; 2 means smart contract account.","title":"AccountCreateContract"},{"location":"mechanism-algorithm/system-contracts/#transfercontract","text":"message TransferContract { bytes owner_address = 1; bytes to_address = 2; int64 amount = 3; } owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of STB to transfer.","title":"TransferContract"},{"location":"mechanism-algorithm/system-contracts/#transferassetcontract","text":"message TransferAssetContract { bytes asset_name = 1; bytes owner_address = 2; bytes to_address = 3; int64 amount = 4; } asset_name : The token id to transfer. owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of token to transfer.","title":"TransferAssetContract"},{"location":"mechanism-algorithm/system-contracts/#voteexecutivecontract","text":"message VoteExecutiveContract { message Vote { bytes vote_address = 1; int64 vote_count = 2; } bytes owner_address = 1; repeated Vote votes = 2; bool support = 3; } owner_address : The owner of the current account. vote_address : The Governor or candidate's address. vote_count : The votes number. support : Constant true, not used.","title":"VoteExecutiveContract"},{"location":"mechanism-algorithm/system-contracts/#executivecreatecontract","text":"message ExecutiveCreateContract { bytes owner_address = 1; bytes url = 2; } owner_address : The owner of the current account. url : The website url of the executive.","title":"ExecutiveCreateContract"},{"location":"mechanism-algorithm/system-contracts/#assetissuecontract","text":"message AssetIssueContract { message CdedSupply { int64 cded_amount = 1; int64 cded_days = 2; } bytes owner_address = 1; bytes name = 2; bytes abbr = 3; int64 total_supply = 4; repeated CdedSupply cded_supply = 5; int32 stb_num = 6; int32 num = 8; int64 start_time = 9; int64 end_time = 10; int64 order = 11; // the order of tokens of the same name int32 vote_score = 16; bytes description = 20; bytes url = 21; int64 free_asset_net_limit = 22; int64 public_free_asset_net_limit = 23; int64 public_free_asset_net_usage = 24; int64 public_latest_free_net_time = 25; } owner_address : The owner of the current account. name : The token name to issue. abbr : The abbreviation of the token name. total_supply : The amount of token to issue. cded_supply : The amount of token and staked days to stake. stb_num : stb_num/num defines the token price. num : stb_num/num defines the token price. start_time : ICO starts time. end_time : ICO ends time. order : Deprecated. vote_score : Deprecated. description : The description of the token. url : The website url of the token. free_asset_net_limit : The free bandwidth limit each account owns when transfers asset. public_free_asset_net_limit : The free bandwidth limit all the accounts can use. public_free_asset_net_usage : The free bandwidth usage of all the accounts. public_latest_free_net_time : The latest bandwidth consumption time of token transfer.","title":"AssetIssueContract"},{"location":"mechanism-algorithm/system-contracts/#executiveupdatecontract","text":"message ExecutiveUpdateContract { bytes owner_address = 1; bytes update_url = 12; } owner_address : The owner of the current account. update_url : The website url of the executive.","title":"ExecutiveUpdateContract"},{"location":"mechanism-algorithm/system-contracts/#participateassetissuecontract","text":"message ParticipateAssetIssueContract { bytes owner_address = 1; bytes to_address = 2; bytes asset_name = 3; int64 amount = 4; } owner_address : The owner of the current account. to_address : The token owner address. account_name : The token id. amount : The amount of token to purchase.","title":"ParticipateAssetIssueContract"},{"location":"mechanism-algorithm/system-contracts/#accountupdatecontract","text":"// Update account name. Account name is unique now. message AccountUpdateContract { bytes account_name = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_name : Account name.","title":"AccountUpdateContract"},{"location":"mechanism-algorithm/system-contracts/#cdbalancecontract","text":"message CdBalanceContract { bytes owner_address = 1; int64 cded_balance = 2; int64 cded_duration = 3; ResourceCode resource = 10; bytes receiver_address = 15; } owner_address : The owner of the current account. cded_balance : The amount of STB to stake. cded_duration : The stake duration. resource : The type of resource get by staking STB. receiver_address : The account address to receive resource.","title":"CdBalanceContract"},{"location":"mechanism-algorithm/system-contracts/#uncdbalancecontract","text":"message UncdBalanceContract { bytes owner_address = 1; ResourceCode resource = 10; bytes receiver_address = 13; } owner_address : The owner of the current account. resource : The type of resource to unfree. receiver_address : The account address to receive resource.","title":"UncdBalanceContract"},{"location":"mechanism-algorithm/system-contracts/#withdrawbalancecontract","text":"message WithdrawBalanceContract { bytes owner_address = 1; } owner_address : The owner of the current account.","title":"WithdrawBalanceContract"},{"location":"mechanism-algorithm/system-contracts/#uncdassetcontract","text":"message UncdAssetContract { bytes owner_address = 1; } owner_address : The owner of the current account.","title":"UncdAssetContract"},{"location":"mechanism-algorithm/system-contracts/#updateassetcontract","text":"message UpdateAssetContract { bytes owner_address = 1; bytes description = 2; bytes url = 3; int64 new_limit = 4; int64 new_public_limit = 5; } owner_address : The owner of the current account. description : The description of the token. url : The website url of the token. new_limit : The bandwidth consumption limit of each account when transfers asset. new_public_limit : The bandwidth consumption limit of the accounts.","title":"UpdateAssetContract"},{"location":"mechanism-algorithm/system-contracts/#proposalcreatecontract","text":"message ProposalCreateContract { bytes owner_address = 1; map<int64, int64> parameters = 2; } owner_address : The owner of the current account. parameters : The proposal.","title":"ProposalCreateContract"},{"location":"mechanism-algorithm/system-contracts/#proposalapprovecontract","text":"message ProposalApproveContract { bytes owner_address = 1; int64 proposal_id = 2; bool is_add_approval = 3; // add or remove approval } owner_address : The owner of the current account. proposal_id : The proposal id. is_add_approval : Whether to approve.","title":"ProposalApproveContract"},{"location":"mechanism-algorithm/system-contracts/#proposaldeletecontract","text":"message ProposalDeleteContract { bytes owner_address = 1; int64 proposal_id = 2; } owner_address : The owner of the current account. proposal_id : The proposal id.","title":"ProposalDeleteContract"},{"location":"mechanism-algorithm/system-contracts/#setaccountidcontract","text":"// Set account id if the account has no id. Account id is unique and case insensitive. message SetAccountIdContract { bytes account_id = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_id : The account id.","title":"SetAccountIdContract"},{"location":"mechanism-algorithm/system-contracts/#createsmartcontract","text":"message CreateSmartContract { bytes owner_address = 1; SmartContract new_contract = 2; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. new_contract : the smart contract. call_token_value : The amount of SRC-10 token to send to the contract when triggers. token_id : The id of the SRC-10 token to be sent to the contract.","title":"CreateSmartContract"},{"location":"mechanism-algorithm/system-contracts/#triggersmartcontract","text":"message TriggerSmartContract { bytes owner_address = 1; bytes contract_address = 2; int64 call_value = 3; bytes data = 4; int64 call_token_value = 5; int64 token_id = 6; } owner_address : The owner of the current account. contract_address : The contract address. call_value : The amount of STB to send to the contract when triggers. data : The parameters to trigger the contract. call_token_value : The amount of SRC-10 token to send to the contract when triggers. token_id : The id of the SRC-10 token to be sent to the contract.","title":"TriggerSmartContract"},{"location":"mechanism-algorithm/system-contracts/#updatesettingcontract","text":"message UpdateSettingContract { bytes owner_address = 1; bytes contract_address = 2; int64 consume_user_resource_percent = 3; } owner_address : The owner of the current account. contract_address : The address of the smart contract. consume_user_resource_percent : The percentage of resource consumption ratio.","title":"UpdateSettingContract"},{"location":"mechanism-algorithm/system-contracts/#exchangecreatecontract","text":"message ExchangeCreateContract { bytes owner_address = 1; bytes first_token_id = 2; int64 first_token_balance = 3; bytes second_token_id = 4; int64 second_token_balance = 5; } owner_address : The owner of the current account. first_token_id : First token id. first_token_balance : First token balance. second_token_id : Second token id. second_token_balance : Second token balance.","title":"ExchangeCreateContract"},{"location":"mechanism-algorithm/system-contracts/#exchangeinjectcontract","text":"message ExchangeInjectContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to inject. quant : The token amount to inject.","title":"ExchangeInjectContract"},{"location":"mechanism-algorithm/system-contracts/#exchangewithdrawcontract","text":"message ExchangeWithdrawContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to withdraw. quant : The token amount to withdraw.","title":"ExchangeWithdrawContract"},{"location":"mechanism-algorithm/system-contracts/#exchangetransactioncontract","text":"message ExchangeTransactionContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to sell. quant : The token amount to sell.","title":"ExchangeTransactionContract"},{"location":"mechanism-algorithm/system-contracts/#shieldedtransfercontract","text":"message ShieldedTransferContract { bytes transparent_from_address = 1; int64 from_amount = 2; repeated SpendDescription spend_description = 3; repeated ReceiveDescription receive_description = 4; bytes binding_signature = 5; bytes transparent_to_address = 6; int64 to_amount = 7; } transparent_from_address : The transparent address of the sender. from_amount : The amount to send. spend_description : Shielded spend information. receive_description : Shielded receive information. binding_signature : The binding signature. transparent_to_address : The transparent address of the receiver. to_amount : The amount to receive. message SpendDescription { bytes value_commitment = 1; bytes anchor = 2; bytes nullifier = 3; bytes rk = 4; bytes zkproof = 5; bytes spend_authority_signature = 6; } value_commitment : value commitment of spender's transfer amount. anchor : root of the note commitment Merkle tree at some block. nullifier : nullifier of spender's note, to prevent double-spent. rk : public key, to verify spender's Spend Authorization Signature . zkproof : zero-knowledge proof of spender's note, prove that this note exists and could be spent. spend_authority_signature : the spender's Spend Authorization Signature . message ReceiveDescription { bytes value_commitment = 1; bytes note_commitment = 2; bytes epk = 3; bytes c_enc = 4; bytes c_out = 5; bytes zkproof = 6; } value_commitment : value commitment of receiver's transfer amount. note_commitment : commitment of the receiver's not. epk : ephemeral public key, in order to generate note's decryption key. c_enc : part of note ciphertext, encryption of diversifier, receiver's transfer amount, rcm, and memo. c_out : part of note ciphertext, encryption of the receiver's public key and ephemeral private key. zkproof : zero-knowledge proof of the receiver's note.","title":"ShieldedTransferContract"},{"location":"mechanism-algorithm/system-contracts/#multi-signature","text":"Multi-Signature","title":"Multi Signature"},{"location":"mechanism-algorithm/system-contracts/#clearabicontract","text":"message ClearABIContract { bytes owner_address = 1; bytes contract_address = 2; } owner_address : The owner of the current account. account_address : The target contract address to clear ABI.","title":"ClearABIContract"},{"location":"mechanism-algorithm/system-contracts/#updatebrokeragecontract","text":"message UpdateBrokerageContract { bytes owner_address = 1; int32 brokerage = 2; } owner_address : The owner of the current account. brokerage : Commission rate, from 0 to 100,1 mean 1%.","title":"UpdateBrokerageContract"},{"location":"mechanism-algorithm/system-contracts/#updateucrlimitcontract","text":"message UpdateUcrLimitContract { bytes owner_address = 1; bytes contract_address = 2; int64 origin_ucr_limit = 3; } owner_address : The owner of the current account. contract_address : The contract address. origin_ucr_limit : The target ucr limit to change.","title":"UpdateUcrLimitContract"},{"location":"mechanism-algorithm/trc10/","text":"SRC-10 \u00b6 STABILA network supports two types of tokens, one is SRC-20 token issued by smart contract, the other one is SRC-10 token issued by system contract. How to Issue a SRC-10 Token \u00b6 HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"stb_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"cded_supply\":{\"cded_amount\":1, \"cded_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter stb_num: Define the price by the ratio of stb_num/num, Parameter num: Define the price by the ratio of stb_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: The free bandwidth limit of each token holder Parameter public_free_asset_net_limit: The total free bandwidth limit of the Token Parameter cded_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'stb_num' is UNIT Participate SRC-10 Token Issuing \u00b6 HTTP API: wallet/participateassetissue Description: Participate a token issuing demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token SRC-10 Token Transfer \u00b6 HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id number encoded as hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"TRC-10"},{"location":"mechanism-algorithm/trc10/#src-10","text":"STABILA network supports two types of tokens, one is SRC-20 token issued by smart contract, the other one is SRC-10 token issued by system contract.","title":"SRC-10"},{"location":"mechanism-algorithm/trc10/#how-to-issue-a-src-10-token","text":"HTTP API: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"stb_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"cded_supply\":{\"cded_amount\":1, \"cded_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter stb_num: Define the price by the ratio of stb_num/num, Parameter num: Define the price by the ratio of stb_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: The free bandwidth limit of each token holder Parameter public_free_asset_net_limit: The total free bandwidth limit of the Token Parameter cded_supply: Token staked supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'stb_num' is UNIT","title":"How to Issue a SRC-10 Token"},{"location":"mechanism-algorithm/trc10/#participate-src-10-token-issuing","text":"HTTP API: wallet/participateassetissue Description: Participate a token issuing demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"Participate SRC-10 Token Issuing"},{"location":"mechanism-algorithm/trc10/#src-10-token-transfer","text":"HTTP API: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id number encoded as hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"SRC-10 Token Transfer"},{"location":"releases/","text":"Releases \u00b6 Binary Integrity Check \u00b6 All released files after 3.7 will provide signatures signed by the Stabila Account: TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2 . Signature Verification \u00b6 You can verify the signature by stabilaweb. const Stb = require ( 'stabilaweb' ). Stb ; console . log ( Stb . verifySignature ( SHA256 , ADDRESS , SIGNATURE )); Suppose we got a FullNode.jar with a SHA256 hash 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e , and a Stabila signature 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b . To verify the integrity of the released file: # First calculate the sha256 hash sha256sum FullNode.jar # or shasum -a 256 FullNode.jar (macOS) # 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e FullNode.jar # Then check the signature npm install -g stabilaweb node -e 'console.log(require(\"stabilaweb\").Stb.verifySignature( \"2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e\", \"TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2\", \"21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b\" ))' # true # Now you've verified the integrity of the binary release file. Version Signature \u00b6 Odyssey-3.7 FullNode sha256sum: 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e FullNode signature: 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b SolidityNode sha256sum: fcdea8b3e511306218ba442fb0828f0413574012d646c39c212a59f6ba5844bc SolidityNode signature: 6dcad6e02f17467e5cfebeefa0f9963da08e7da10feebefdec47d689fecc30f104c9b7f5e784b883e7ceb786fe55188356c42c306d727fb7819eed2a71f788361c GreatVoyage-4.0.0 FullNode sha256sum: d3f8f9fde64bdefaadae784d09de97172e5e8a3fe539217e12b89963983a530d FullNode signature: e788dbaf2fe35f099f65b2403cfb0d7cbe7f4611f8c5ff8151e4bd84ae468d2e541043c9cde9e74500003027ae9f25cdda81a9bcd60abb45ca7a69f965f4dcc71c SolidityNode sha256sum: adddf88423c6c31f1f25ed39b10779c24dd7cdcf37f2325c02b2f2ecfc97e1f6 SolidityNode signature: e3b9859f178f7851dedb7a0a8deb715e5f1e3af10b1064c36f2727ec2b8825510df4fd7b09d7d049204e5df3e8d5b87778e83a15ca96ce786f7977a6cb48bca91b GreatVoyage-4.1.1 FullNode sha256sum: 30e716b86b879af1e006c2b463903ae3835e239e32e2b01c2a1b903a153897fe FullNode signature: 5faee65a448bb9aa77835992ca3d24e50d8a76b7934f80664ad38e83179c8114278fdef4494de7231f8e40de86461676a7aa4a54c795f4c692e91d90e156ec471b SolidityNode sha256sum: 10a160181053b421109ecace74df5fc0f8860bc8a70181add65fd9a292c35a44 SolidityNode signature: 1d1413b13adf7778f9a720294eca066ac728ad636d166505276f5ff1f63973c100c04778f937f240f10107edb7de477604857867fc4dbdb68238169c978fc3da1b GreatVoyage-v4.1.2 FullNode sha256sum: 4ded44b6c1a3dbd25212e14ab413142b5463dcbf30a528f83ded529048542547 FullNode signature: 57a094c1b8a5ec301ef913eb718de2498b5695eb999530863df05252ba8919ba6866c8490e29d36f7dbf34537c898ece5ef0111efb134419c3a5fd6fc9ec03b81c SolidityNode sha256sum: 3db36cadbd1f7641aafc8164983f28df4b7ceff8174e090327ed407012cf12cb SolidityNode signature: d07604f6811cbed628dd6e5c07880c2fdd3025848fd5365925531c7748467d5228fea2e18326864acc27f3b51c73b364fa44c450d8ec4b5080a7ddb7566724701c GreatVoyage-v4.1.3(Thales) FullNode sha256sum: c5fb99ad5b024bb7877118f30fb6065f6e6febd11a3cfa241521cbed73cca181 FullNode signature: d80ec371e791c4316925d80ff3400cf51b14c8a4d4c696b7817c517eb094823622932b45b9b37f9e9657513c3eddb1134fbbb1ee56727c0957e8a3b40c67409b1c SolidityNode sha256sum: 4b941d71b561a8b2e0b97d7498823d900eaf287910eea1eaafc649f5aad14036 SolidityNode signature: f8a8e8d411b009d02986cad1e19e745f8107384a274f146bcae60c570111b13556ff9ab528eb5d1fb4734bd4ef488ade4038781d06ab6420e35f28be6135fe9b1c GreatVoyage-v4.2.0(Plato) FullNode sha256sum: bbf103432be016b582452137b4862140af15ccf7c5daa9be738450705317fdb8 FullNode signature: 326701699a5eb8d497eb454b5b74c1559961417fb6f262b4e6314052d73f5977312e0450937fa485236f51f706b434acf8659ce1325d704097c5748629e736ef1c SolidityNode sha256sum: 1db544cbca9dc814683ccf9bef28f7d6ca4469289052230394aaf4e3bcd08615 SolidityNode signature: 47fea27df940db0d2a4c0abf6d06969882c027bc4f17449205a28ae5cd25b8ba5339e21f105fe1c25e799d0f4ffea64a15046b9baf5b54341411b5180da439011b GreatVoyage-v4.2.1(Origen) FullNode sha256sum: 9888710c915a4027f1bc3dcb1d5d983e0c00d4c438f6fa307d412f62ff6862ea FullNode signature: 6e7d8ef9d033ebf9213118b7511f4ecc5def97442844fbd34de3ef76dd417a0d45da3e2e70fc213475d7fc0a44df1c54732874d858ec980159c5dbffc975680a1c SolidityNode sha256sum: c70edffa3022e9c25bf845ee978e3500c3ada89b473d895a715acf1738b83f10 SolidityNode signature: 0e366acce33bb7c6b02fa143a57d9380c94d3513a9fba8692efe2862a8f7df93156edbddd075f1844f2f81398b14f2db6a03e21f0f6b8ab25649fae4dc16ae731b GreatVoyage-v4.2.2(Lucretius) FullNode sha256sum: 8a7f8143b3351ea6b5d8e3dfc857b09256d363d4907ba3ab0288f67f77c2a58f FullNode signature: 71c6300ace5cbf16d78a32aa4602c3f129cb768e32acffaecd17b4134b5955bf37efda1d27025e894e521184a21174e5eddf4e7d1f86761657827795cbddfcfd1c SolidityNode sha256sum: 2d0d5334a232b7b74df8ed3211d9e0ac957894f81e9172010732f2159da261ad SolidityNode signature: 0696f8cb3c65324c4b04f9ecf89d939bf7e1b955144e3fe75eeca6bd4c639e463afbe24e31ae38a6889d4d0649ae03fafeeb7c337b34a36fbac33962f64651671b GreatVoyage-v4.2.2.1(Epictetus) FullNode sha256sum: 8bd040a8db16ccba3e957ed3558b82d145928153a53f9688302849658a72f9bc FullNode signature: 3137a8ba8fa5556e4c4a7597aec8f5f46ebb79a64edcf9e2925d2e3314afde3e0f42fd4080e5e4f4d3d1eff263d30478b0322e6dbcc71c43b534f614004b5c561b SolidityNode sha256sum: ee8abd39732e4901828a61124880f1d2eab62f7f3d97150f1e1921bf7da10e54 SolidityNode signature: 092b08184677449dd283a31cc486f994166cd9f5ad312a9c80d3e06689ec540774ac9a1334dffeb6412039ed70ee912ead39c4025dd69b688ea9df4dd831b5771c GreatVoyage-v4.3.0(Bacon) FullNode sha256sum: b5e993800cea5ca040758dd6b3c7438def03cbf1358468beb76ea45399a59298 FullNode signature: 8da6ac58129d78d948810e4bc7372dd8aef5232bfbc4c33ad8fb21e88314e3d97dd77509e0f03a98da32679495152ccd4a9d07541589822e5cf5d3d4f61877191b SolidityNode sha256sum: 446a4736901958a450e4e95aaca99a63957163854fb32d25eed84600e6996668 SolidityNode signature: c27ffde8ce88ee14689e15a9d5c3fb2d2a9d180ea43b45046131df8ac5481fae2588621b395ad7031ed49d65ddd020b3ce084537e3f527d8a5a979f8c65265561c GreatVoyage-v4.4.0(Rousseau) FullNode sha256sum: bf7f962846f75139dd89ac6da32074cad33b2e172c0749abbed8773cc1ab1a37 FullNode signature: 56ed97f3451e3d731f799bad952750d56aa78a9a91a2688b4d6b956328ede7e01bae78037ad6ef1f9c682b566e954dfb958271f006e5cf0dcace5768d76fda6e1b SolidityNode sha256sum: 9dac37763ddf75c07335ec070f837b63ee46b698066dd25c4756ad40f8750d5f SolidityNode signature: cc4325c085719e3e5045b5c6c2553d7adc9c735419618f7afad06c3a532da0ed46906ae9b2dadb15d7f94150268d5ecdc7fd2741693991586d50da30a8d917071b GreatVoyage-v4.4.1(Protagoras) FullNode sha256sum: 4a32918849dc8a7fedcb637ff4939389363726cb16c6a581e39253260668ee04 FullNode signature: fd747f61705ef045143bd2d55b278ca347904323711e2e86b11cf1dd203f198443ab1a399767a570005bd5b2ea283187ccc41557ffb79c959b018e8d798b96f81c SolidityNode sha256sum: b6a06d3b19f41591bd8c01f35e78b316ab8e9ad4c0740128fc95ba52d3106f34 SolidityNode signature: d2836bda30fd25c89494ae7a12b5357bc9e725c9e2c655fb0a9158a4bee881693ea869defe650b0b4f190458a5268f1c121e73c8305cc81a408e62fca0d234c51b GreatVoyage-v4.4.2(Augustinus) FullNode sha256sum: 70eba12350fa21e1b261927093090e7bdf0765592d19433c594149bd3707ef0a FullNode signature: 14430f463e6fab3dd247aca6267b6aaf2f1869b455d95aee297208bd1561c6c67559d9c535e63e74bbef604141cc4ceec78367a75e6ca4d4ceb6513019329c9b1b SolidityNode sha256sum: f08438e093cc1091859f0ee9dbc7e79b0d5d9068facd4e6485374baa3acf59d1 SolidityNode signature: f3935dfe4af9601cf102c975ed2eebbd4b42160e8746c0d0b21ffbd2fbd4b6f374257b1bc0e948909a9ef343d2cc70671961c8f7a992b6cd123f9ad3c8c323391c GreatVoyage-v4.4.3(Pythagoras) FullNode sha256sum: c07637a1a4a9a289218554f4714caef90032e267b068411c7dd818d4af45e39f FullNode signature: 2bf8d65adf556fe2c04b739c1f4e6e73058914cf642a7806ff85e57be2ff122e35cbf3d67b0bc8bad4fb827198ffd8e06f60111a167ecb0b3db0d8e571b8c67b1c SolidityNode sha256sum: 64f4614160b9330d0a9e984686b66fa16e9aecf7ae16e32b8cc7c32f52694eef SolidityNode signature: dc0f910555a23667d682a6775588de90592ede44f76a32b12ea8f89fa7dcc937274cc3a44b20da49726323cc9f476d42caa318c338858474f02bf98cc398bca81c","title":"Binary Integrity Check"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#binary-integrity-check","text":"All released files after 3.7 will provide signatures signed by the Stabila Account: TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2 .","title":"Binary Integrity Check"},{"location":"releases/#signature-verification","text":"You can verify the signature by stabilaweb. const Stb = require ( 'stabilaweb' ). Stb ; console . log ( Stb . verifySignature ( SHA256 , ADDRESS , SIGNATURE )); Suppose we got a FullNode.jar with a SHA256 hash 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e , and a Stabila signature 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b . To verify the integrity of the released file: # First calculate the sha256 hash sha256sum FullNode.jar # or shasum -a 256 FullNode.jar (macOS) # 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e FullNode.jar # Then check the signature npm install -g stabilaweb node -e 'console.log(require(\"stabilaweb\").Stb.verifySignature( \"2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e\", \"TKeAcHxgErbVXrG3N3TZiSV6AT566BHTj2\", \"21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b\" ))' # true # Now you've verified the integrity of the binary release file.","title":"Signature Verification"},{"location":"releases/#version-signature","text":"Odyssey-3.7 FullNode sha256sum: 2fca93b09da4ac62641e03838e77fce99b4711ddb0c09aa91656c80fc9556d2e FullNode signature: 21435e32131feb6d00ba8048df04e112e02569ec851064d8ecad2d4dd5da44b7628ddce16823dadfff6fd683fc58cee74964970621a845ee459e2c96a750de551b SolidityNode sha256sum: fcdea8b3e511306218ba442fb0828f0413574012d646c39c212a59f6ba5844bc SolidityNode signature: 6dcad6e02f17467e5cfebeefa0f9963da08e7da10feebefdec47d689fecc30f104c9b7f5e784b883e7ceb786fe55188356c42c306d727fb7819eed2a71f788361c GreatVoyage-4.0.0 FullNode sha256sum: d3f8f9fde64bdefaadae784d09de97172e5e8a3fe539217e12b89963983a530d FullNode signature: e788dbaf2fe35f099f65b2403cfb0d7cbe7f4611f8c5ff8151e4bd84ae468d2e541043c9cde9e74500003027ae9f25cdda81a9bcd60abb45ca7a69f965f4dcc71c SolidityNode sha256sum: adddf88423c6c31f1f25ed39b10779c24dd7cdcf37f2325c02b2f2ecfc97e1f6 SolidityNode signature: e3b9859f178f7851dedb7a0a8deb715e5f1e3af10b1064c36f2727ec2b8825510df4fd7b09d7d049204e5df3e8d5b87778e83a15ca96ce786f7977a6cb48bca91b GreatVoyage-4.1.1 FullNode sha256sum: 30e716b86b879af1e006c2b463903ae3835e239e32e2b01c2a1b903a153897fe FullNode signature: 5faee65a448bb9aa77835992ca3d24e50d8a76b7934f80664ad38e83179c8114278fdef4494de7231f8e40de86461676a7aa4a54c795f4c692e91d90e156ec471b SolidityNode sha256sum: 10a160181053b421109ecace74df5fc0f8860bc8a70181add65fd9a292c35a44 SolidityNode signature: 1d1413b13adf7778f9a720294eca066ac728ad636d166505276f5ff1f63973c100c04778f937f240f10107edb7de477604857867fc4dbdb68238169c978fc3da1b GreatVoyage-v4.1.2 FullNode sha256sum: 4ded44b6c1a3dbd25212e14ab413142b5463dcbf30a528f83ded529048542547 FullNode signature: 57a094c1b8a5ec301ef913eb718de2498b5695eb999530863df05252ba8919ba6866c8490e29d36f7dbf34537c898ece5ef0111efb134419c3a5fd6fc9ec03b81c SolidityNode sha256sum: 3db36cadbd1f7641aafc8164983f28df4b7ceff8174e090327ed407012cf12cb SolidityNode signature: d07604f6811cbed628dd6e5c07880c2fdd3025848fd5365925531c7748467d5228fea2e18326864acc27f3b51c73b364fa44c450d8ec4b5080a7ddb7566724701c GreatVoyage-v4.1.3(Thales) FullNode sha256sum: c5fb99ad5b024bb7877118f30fb6065f6e6febd11a3cfa241521cbed73cca181 FullNode signature: d80ec371e791c4316925d80ff3400cf51b14c8a4d4c696b7817c517eb094823622932b45b9b37f9e9657513c3eddb1134fbbb1ee56727c0957e8a3b40c67409b1c SolidityNode sha256sum: 4b941d71b561a8b2e0b97d7498823d900eaf287910eea1eaafc649f5aad14036 SolidityNode signature: f8a8e8d411b009d02986cad1e19e745f8107384a274f146bcae60c570111b13556ff9ab528eb5d1fb4734bd4ef488ade4038781d06ab6420e35f28be6135fe9b1c GreatVoyage-v4.2.0(Plato) FullNode sha256sum: bbf103432be016b582452137b4862140af15ccf7c5daa9be738450705317fdb8 FullNode signature: 326701699a5eb8d497eb454b5b74c1559961417fb6f262b4e6314052d73f5977312e0450937fa485236f51f706b434acf8659ce1325d704097c5748629e736ef1c SolidityNode sha256sum: 1db544cbca9dc814683ccf9bef28f7d6ca4469289052230394aaf4e3bcd08615 SolidityNode signature: 47fea27df940db0d2a4c0abf6d06969882c027bc4f17449205a28ae5cd25b8ba5339e21f105fe1c25e799d0f4ffea64a15046b9baf5b54341411b5180da439011b GreatVoyage-v4.2.1(Origen) FullNode sha256sum: 9888710c915a4027f1bc3dcb1d5d983e0c00d4c438f6fa307d412f62ff6862ea FullNode signature: 6e7d8ef9d033ebf9213118b7511f4ecc5def97442844fbd34de3ef76dd417a0d45da3e2e70fc213475d7fc0a44df1c54732874d858ec980159c5dbffc975680a1c SolidityNode sha256sum: c70edffa3022e9c25bf845ee978e3500c3ada89b473d895a715acf1738b83f10 SolidityNode signature: 0e366acce33bb7c6b02fa143a57d9380c94d3513a9fba8692efe2862a8f7df93156edbddd075f1844f2f81398b14f2db6a03e21f0f6b8ab25649fae4dc16ae731b GreatVoyage-v4.2.2(Lucretius) FullNode sha256sum: 8a7f8143b3351ea6b5d8e3dfc857b09256d363d4907ba3ab0288f67f77c2a58f FullNode signature: 71c6300ace5cbf16d78a32aa4602c3f129cb768e32acffaecd17b4134b5955bf37efda1d27025e894e521184a21174e5eddf4e7d1f86761657827795cbddfcfd1c SolidityNode sha256sum: 2d0d5334a232b7b74df8ed3211d9e0ac957894f81e9172010732f2159da261ad SolidityNode signature: 0696f8cb3c65324c4b04f9ecf89d939bf7e1b955144e3fe75eeca6bd4c639e463afbe24e31ae38a6889d4d0649ae03fafeeb7c337b34a36fbac33962f64651671b GreatVoyage-v4.2.2.1(Epictetus) FullNode sha256sum: 8bd040a8db16ccba3e957ed3558b82d145928153a53f9688302849658a72f9bc FullNode signature: 3137a8ba8fa5556e4c4a7597aec8f5f46ebb79a64edcf9e2925d2e3314afde3e0f42fd4080e5e4f4d3d1eff263d30478b0322e6dbcc71c43b534f614004b5c561b SolidityNode sha256sum: ee8abd39732e4901828a61124880f1d2eab62f7f3d97150f1e1921bf7da10e54 SolidityNode signature: 092b08184677449dd283a31cc486f994166cd9f5ad312a9c80d3e06689ec540774ac9a1334dffeb6412039ed70ee912ead39c4025dd69b688ea9df4dd831b5771c GreatVoyage-v4.3.0(Bacon) FullNode sha256sum: b5e993800cea5ca040758dd6b3c7438def03cbf1358468beb76ea45399a59298 FullNode signature: 8da6ac58129d78d948810e4bc7372dd8aef5232bfbc4c33ad8fb21e88314e3d97dd77509e0f03a98da32679495152ccd4a9d07541589822e5cf5d3d4f61877191b SolidityNode sha256sum: 446a4736901958a450e4e95aaca99a63957163854fb32d25eed84600e6996668 SolidityNode signature: c27ffde8ce88ee14689e15a9d5c3fb2d2a9d180ea43b45046131df8ac5481fae2588621b395ad7031ed49d65ddd020b3ce084537e3f527d8a5a979f8c65265561c GreatVoyage-v4.4.0(Rousseau) FullNode sha256sum: bf7f962846f75139dd89ac6da32074cad33b2e172c0749abbed8773cc1ab1a37 FullNode signature: 56ed97f3451e3d731f799bad952750d56aa78a9a91a2688b4d6b956328ede7e01bae78037ad6ef1f9c682b566e954dfb958271f006e5cf0dcace5768d76fda6e1b SolidityNode sha256sum: 9dac37763ddf75c07335ec070f837b63ee46b698066dd25c4756ad40f8750d5f SolidityNode signature: cc4325c085719e3e5045b5c6c2553d7adc9c735419618f7afad06c3a532da0ed46906ae9b2dadb15d7f94150268d5ecdc7fd2741693991586d50da30a8d917071b GreatVoyage-v4.4.1(Protagoras) FullNode sha256sum: 4a32918849dc8a7fedcb637ff4939389363726cb16c6a581e39253260668ee04 FullNode signature: fd747f61705ef045143bd2d55b278ca347904323711e2e86b11cf1dd203f198443ab1a399767a570005bd5b2ea283187ccc41557ffb79c959b018e8d798b96f81c SolidityNode sha256sum: b6a06d3b19f41591bd8c01f35e78b316ab8e9ad4c0740128fc95ba52d3106f34 SolidityNode signature: d2836bda30fd25c89494ae7a12b5357bc9e725c9e2c655fb0a9158a4bee881693ea869defe650b0b4f190458a5268f1c121e73c8305cc81a408e62fca0d234c51b GreatVoyage-v4.4.2(Augustinus) FullNode sha256sum: 70eba12350fa21e1b261927093090e7bdf0765592d19433c594149bd3707ef0a FullNode signature: 14430f463e6fab3dd247aca6267b6aaf2f1869b455d95aee297208bd1561c6c67559d9c535e63e74bbef604141cc4ceec78367a75e6ca4d4ceb6513019329c9b1b SolidityNode sha256sum: f08438e093cc1091859f0ee9dbc7e79b0d5d9068facd4e6485374baa3acf59d1 SolidityNode signature: f3935dfe4af9601cf102c975ed2eebbd4b42160e8746c0d0b21ffbd2fbd4b6f374257b1bc0e948909a9ef343d2cc70671961c8f7a992b6cd123f9ad3c8c323391c GreatVoyage-v4.4.3(Pythagoras) FullNode sha256sum: c07637a1a4a9a289218554f4714caef90032e267b068411c7dd818d4af45e39f FullNode signature: 2bf8d65adf556fe2c04b739c1f4e6e73058914cf642a7806ff85e57be2ff122e35cbf3d67b0bc8bad4fb827198ffd8e06f60111a167ecb0b3db0d8e571b8c67b1c SolidityNode sha256sum: 64f4614160b9330d0a9e984686b66fa16e9aecf7ae16e32b8cc7c32f52694eef SolidityNode signature: dc0f910555a23667d682a6775588de90592ede44f76a32b12ea8f89fa7dcc937274cc3a44b20da49726323cc9f476d42caa318c338858474f02bf98cc398bca81c","title":"Version Signature"}]}